---
# Clang Analyzer is disabled as we may prefer to run a dedicated scan with a report
# TODO: Evaluate the other checks
Checks: >
  *,
  -abseil-string-find-startswith,
  -abseil-string-find-str-contains,
  -altera-id-dependent-backward-branch,
  -altera-struct-pack-align,
  -altera-unroll-loops,
  -android-cloexec-fopen,
  -boost-*,
  -bugprone-assert-side-effect,
  -bugprone-assignment-in-if-condition,
  -bugprone-branch-clone,
  -bugprone-casting-through-void,
  -bugprone-chained-comparison,
  -bugprone-crtp-constructor-accessibility,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  -bugprone-forwarding-reference-overload,
  -bugprone-implicit-widening-of-multiplication-result,
  -bugprone-inc-dec-in-conditions,
  -bugprone-integer-division,
  -bugprone-macro-parentheses,
  -bugprone-multi-level-implicit-pointer-conversion,
  -bugprone-narrowing-conversions,
  -bugprone-nondeterministic-pointer-iteration-order,
  -bugprone-optional-value-conversion,
  -bugprone-parent-virtual-call,
  -bugprone-reserved-identifier,
  -bugprone-sizeof-expression,
  -bugprone-string-integer-assignment,
  -bugprone-suspicious-include,
  -bugprone-suspicious-stringview-data-usage,
  -bugprone-switch-missing-default-case,
  -bugprone-unchecked-optional-access,
  -bugprone-unhandled-self-assignment,
  -bugprone-unused-local-non-trivial-variable,
  -bugprone-unused-raii,
  -bugprone-use-after-move,
  -cert-arr39-c,
  -cert-dcl16-c,
  -cert-dcl21-cpp,
  -cert-dcl37-c,
  -cert-dcl51-cpp,
  -cert-dcl58-cpp,
  -cert-env33-c,
  -cert-err33-c,
  -cert-err34-c,
  -cert-err58-cpp,
  -cert-flp30-c,
  -cert-int09-c,
  -cert-msc30-c,
  -cert-msc32-c,
  -cert-msc50-cpp,
  -cert-msc51-cpp,
  -cert-oop11-cpp,
  -cert-oop54-cpp,
  -clang-analyzer-*,
  -concurrency-mt-unsafe,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -cppcoreguidelines-avoid-do-while,
  -cppcoreguidelines-avoid-goto,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-c-copy-assignment-signature,
  -cppcoreguidelines-init-variables,
  -cppcoreguidelines-macro-to-enum,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-misleading-capture-default-by-value,
  -cppcoreguidelines-missing-std-forward,
  -cppcoreguidelines-narrowing-conversions,
  -cppcoreguidelines-no-malloc,
  -cppcoreguidelines-noexcept-move-operations,
  -cppcoreguidelines-noexcept-swap,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-prefer-member-initializer,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-type-const-cast,
  -cppcoreguidelines-pro-type-cstyle-cast,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-pro-type-union-access,
  -cppcoreguidelines-pro-type-vararg,
  -cppcoreguidelines-rvalue-reference-param-not-moved,
  -cppcoreguidelines-special-member-functions,
  -cppcoreguidelines-use-default-member-init,
  -cppcoreguidelines-virtual-class-destructor,
  -fuchsia-default-arguments-calls,
  -fuchsia-default-arguments-declarations,
  -fuchsia-multiple-inheritance,
  -fuchsia-overloaded-operator,
  -fuchsia-statically-constructed-objects,
  -fuchsia-trailing-return,
  -fuchsia-virtual-inheritance,
  -google-build-using-namespace,
  -google-default-arguments,
  -google-explicit-constructor,
  -google-global-names-in-headers,
  -google-readability-avoid-underscore-in-googletest-name,
  -google-readability-braces-around-statements,
  -google-readability-casting,
  -google-readability-function-size,
  -google-readability-namespace-comments,
  -google-readability-todo,
  -google-runtime-int,
  -hicpp-avoid-c-arrays,
  -hicpp-avoid-goto,
  -hicpp-braces-around-statements,
  -hicpp-deprecated-headers,
  -hicpp-exception-baseclass,
  -hicpp-explicit-conversions,
  -hicpp-function-size,
  -hicpp-invalid-access-moved,
  -hicpp-move-const-arg,
  -hicpp-multiway-paths-covered,
  -hicpp-named-parameter,
  -hicpp-no-array-decay,
  -hicpp-no-malloc,
  -hicpp-noexcept-move,
  -hicpp-signed-bitwise,
  -hicpp-special-member-functions,
  -hicpp-uppercase-literal-suffix,
  -hicpp-use-auto,
  -hicpp-use-emplace,
  -hicpp-use-nullptr,
  -hicpp-vararg,
  -llvm-else-after-return,
  -llvm-header-guard,
  -llvm-include-order,
  -llvm-namespace-comment,
  -llvm-qualified-auto,
  -llvmlibc-callee-namespace,
  -llvmlibc-implementation-in-namespace,
  -llvmlibc-inline-function-decl,
  -llvmlibc-restrict-system-libc-headers,
  -misc-const-correctness,
  -misc-definitions-in-headers,
  -misc-header-include-cycle,
  -misc-include-cleaner,
  -misc-no-recursion,
  -misc-non-private-member-variables-in-classes,
  -misc-redundant-expression,
  -misc-unconventional-assign-operator,
  -misc-uniqueptr-reset-release,
  -misc-unused-parameters,
  -misc-unused-using-decls,
  -misc-use-anonymous-namespace,
  -misc-use-internal-linkage,
  -modernize-avoid-bind,
  -modernize-avoid-c-arrays,
  -modernize-concat-nested-namespaces,
  -modernize-deprecated-headers,
  -modernize-loop-convert,
  -modernize-macro-to-enum,
  -modernize-pass-by-value,
  -modernize-return-braced-init-list,
  -modernize-type-traits,
  -modernize-use-auto,
  -modernize-use-bool-literals,
  -modernize-use-constraints,
  -modernize-use-default-member-init,
  -modernize-use-designated-initializers,
  -modernize-use-emplace,
  -modernize-use-integer-sign-comparison,
  -modernize-use-integer-sign-comparison,
  -modernize-use-nodiscard,
  -modernize-use-nullptr,
  -modernize-use-ranges,
  -modernize-use-starts-ends-with,
  -modernize-use-std-numbers,
  -modernize-use-trailing-return-type,
  -modernize-use-transparent-functors,
  -modernize-use-using,
  -performance-avoid-endl,
  -performance-enum-size,
  -performance-faster-string-find,
  -performance-for-range-copy,
  -performance-inefficient-string-concatenation,
  -performance-move-const-arg,
  -performance-move-constructor-init,
  -performance-no-int-to-ptr,
  -performance-noexcept-move-constructor,
  -performance-noexcept-swap,
  -performance-unnecessary-value-param,
  -portability-simd-intrinsics,
  -portability-template-virtual-member-function,
  -readability-avoid-nested-conditional-operator,
  -readability-avoid-return-with-void-value,
  -readability-avoid-unconditional-preprocessor-if,
  -readability-braces-around-statements,
  -readability-container-contains,
  -readability-container-data-pointer,
  -readability-container-size-empty,
  -readability-convert-member-functions-to-static,
  -readability-else-after-return,
  -readability-enum-initial-value,
  -readability-function-cognitive-complexity,
  -readability-function-size,
  -readability-identifier-length,
  -readability-implicit-bool-conversion,
  -readability-inconsistent-declaration-parameter-name,
  -readability-isolate-declaration,
  -readability-magic-numbers,
  -readability-make-member-function-const,
  -readability-math-missing-parentheses,
  -readability-math-missing-parentheses,
  -readability-named-parameter,
  -readability-non-const-parameter,
  -readability-qualified-auto,
  -readability-redundant-casting,
  -readability-redundant-control-flow,
  -readability-redundant-inline-specifier,
  -readability-redundant-member-init,
  -readability-redundant-smartptr-get,
  -readability-redundant-string-cstr,
  -readability-redundant-string-init,
  -readability-reference-to-constructed-temporary,
  -readability-simplify-boolean-expr,
  -readability-static-accessed-through-instance,
  -readability-suspicious-call-argument,
  -readability-uppercase-literal-suffix,
  -readability-use-anyofallof,
  -readability-use-std-min-max

CheckOptions:
  - key: readability-function-cognitive-complexity.IgnoreMacros
    value: true
  - key: portability-simd-intrinsics.Suggest
    value: true
  # May enable later; for now activate the check with a lighter touch
  - key: readability-simplify-boolean-expr.SimplifyDeMorgan
    value: false
  - key: performance-unnecessary-copy-initialization.AllowedTypes
    value: "^MemoryPin$"

FormatStyle: 'file'

HeaderFilterRegex: '.*'
