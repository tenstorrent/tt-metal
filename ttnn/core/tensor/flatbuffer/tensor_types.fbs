namespace ttnn.flatbuffer;

table CoreCoord {
    x: int;
    y: int;
}

table CoreRange {
    start: CoreCoord;
    end: CoreCoord;
}

table CoreRangeSet {
    ranges: [CoreRange];
}

table Tile {
    tile_shape_h: uint32;
    tile_shape_w: uint32;
    transpose_tile: bool;
}

enum TensorMemoryLayout: ushort {
    Interleaved = 0,
    SingleBank = 1,
    HeightSharded = 2,
    WidthSharded = 3,
    BlockSharded = 4,
}

enum BufferType: ushort {
    DRAM = 0,
    L1 = 1,
    SystemMemory = 2,
    L1Small = 3,
    Trace = 4,
}

enum ShardOrientation : ubyte {
    RowMajor = 0,
    ColMajor = 1,
}

enum ShardMode : ubyte {
    Physical,
    Logical,
}

table ShardShape {
    height: uint32;
    width: uint32;
}

table ShardSpec {
    grid: CoreRangeSet;
    shape_h: uint32;
    shape_w: uint32;
    orientation: ShardOrientation;
    shard_mode: ShardMode;
    physical_shard_shape: ShardShape;
}

enum DataType : ubyte {
    BFloat16 = 0,
    Float32 = 1,
    UInt32 = 2,
    BFloat8B = 3,
    BFloat4B = 4,
    UInt8 = 5,
    UInt16 = 6,
    Int32 = 7,
    Invalid = 8
}

table RowMajorPageConfig {}
table TilePageConfig {
    tile: Tile;
}

union PageConfig {
    row_major: RowMajorPageConfig,
    tile: TilePageConfig,
}

table MemoryConfig {
    memory_layout: TensorMemoryLayout;
    buffer_type: BufferType;
    shard_spec: ShardSpec;
}

table TensorLayout {
    data_type: DataType;
    page_config: PageConfig;
    memory_config: MemoryConfig;
    alignment: [uint32];
}

table TensorSpec {
    shape: [uint32];
    tensor_layout: TensorLayout;
}

root_type TensorSpec;
