// SPDX-FileCopyrightText: ¬© 2023 Tenstorrent Inc.
//
// SPDX-License-Identifier: Apache-2.0

#include <cstdint>
#define REDUCE_OP PoolType::SUM
#define REDUCE_DIM ReduceDim::REDUCE_ROW

#define BCAST_LLKOP EltwiseBinaryType::ELWMUL
#define BCAST_DIM BroadcastType::COL

#include "compute_kernel_api.h"
#include "compute_kernel_api/reduce.h"
#include "compute_kernel_api/bcast.h"
#include "compute_kernel_api/eltwise_binary.h"
#include "compute_kernel_api/layernorm.h"
#include "compute_kernel_api/eltwise_binary_sfpu.h"
#include "compute_kernel_api/tile_move_copy.h"

namespace NAMESPACE {

void MAIN {
    uint32_t NCHt = get_arg_val<uint32_t>(0);
    constexpr uint32_t Wt = get_compile_time_arg_val(0);
    constexpr uint32_t blk = get_compile_time_arg_val(1);
    constexpr uint32_t do_gamma = get_compile_time_arg_val(2);
    constexpr uint32_t do_beta = get_compile_time_arg_val(3);
    constexpr bool FLOAT32_DTYPE = get_compile_time_arg_val(4) == 1;
    constexpr uint32_t W = get_compile_time_arg_val(5);
    constexpr uint32_t tile_width = get_compile_time_arg_val(6);

    constexpr uint32_t onetile = 1;
    // reserve one tile for zeros on cb_in2
    // TODO(AP): check that if DST is indeed zeroed by release_dst (and initially), we can use it as zeroes

    // Note that the entire W dimension must fit in the intermed0 CB for this kernel to be correct
    constexpr auto cb_scaler = tt::CBIndex::c_2;  // single tile generated by the reader
    constexpr auto cb_eps = tt::CBIndex::c_3;     // single tile generated by the reader
    constexpr auto cb_in = tt::CBIndex::c_0;      // input x or a for fused pre-add (x=a+b)
    constexpr auto cb_inb = tt::CBIndex::c_1;     // input b for fused pre-add
    constexpr auto cb_out = tt::CBIndex::c_16;    // output
    constexpr auto cb_gamma = tt::CBIndex::c_5;
    constexpr auto cb_beta = tt::CBIndex::c_6;
    uint32_t cb_xmm = tt::CBIndex::c_24;           // x minus mean
    constexpr auto cb_ex = tt::CBIndex::c_18;      // E[x]
    constexpr auto cb_ex2 = tt::CBIndex::c_19;     // E[(x-E[x])^2]
    constexpr auto cb_ex2pe = tt::CBIndex::c_21;   // E[(x-E[x])^2]+eps
    constexpr auto cb_fusion = tt::CBIndex::c_22;  // stream gamma/beta
    constexpr auto scaler0 = 0;
#ifdef RMSNORM
    constexpr auto cb_x2 = tt::CBIndex::c_20;  // x^2
#endif

#ifdef FUSE_PRE_ADD
#ifdef RMSNORM
    constexpr uint32_t cb_x = cb_xmm;
#else
    constexpr uint32_t cb_x = tt::CBIndex::c_23;
#endif
#else
    constexpr uint32_t cb_x = cb_in;
#endif

#ifdef FUSE_PRE_ADD
    binary_op_init_common(cb_in, cb_inb, cb_x);
#else
#ifdef RMSNORM
    binary_op_init_common(cb_in, cb_in, cb_x2);
#endif
#endif
    cb_wait_front(cb_scaler, 1);  // comes from the reader
    cb_wait_front(cb_eps, 1);     // comes from the reader

    constexpr int onetile = 1;
    constexpr int dst0 = 0;
    constexpr int dst1 = 1;
    constexpr int dst2 = 2;

    for (uint32_t ncht = 0; ncht < NCHt; ncht++) {
#ifndef RMSNORM
        // Simultaneous calculation of E[x] and Var[x] using Welford's algorithm
        tile_regs_acquire();
        tile_regs_wait();

        reconfig_data_format(cb_in, cb_scaler);
        pack_reconfig_data_format(cb_ex);
        cb_reserve_back(cb_ex, onetile);
        welford_init();
        uint32_t start_N = 1;
        // Welford's needs transposed input tile
        constexpr uint32_t transpose = 1;
        copy_tile_to_dst_init_short(cb_in, transpose);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            cb_wait_front(cb_in, blk);
            for (uint32_t j = 0; j < blk; j++) {
                copy_tile(cb_in, j, dst0);
                welford(dst0, dst1, dst2, start_N, W, wt + j == Wt);
                start_N += tile_width;
            }
            cb_pop_front(cb_in, blk);
        }
#ifdef FUSE_PRE_ADD
        reconfig_data_format_srca(cb_in, cb_inb);
        reduce_init(cb_inb, cb_scaler, cb_ex);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            cb_wait_front(cb_inb, blk);
            for (uint32_t j = 0; j < blk; j++) {
                reduce_tile(cb_inb, cb_scaler, j, scaler0, dst0);
            }
            cb_pop_front(cb_inb, blk);
        }
#endif
        tile_regs_commit();
        pack_tile(dst1, cb_ex);
        pack_tile(dst2, cb_ex2);
        tile_regs_release();
        cb_push_back(cb_ex, onetile);
        cb_push_back(cb_ex2, onetile);
        // End of E[x] and Var[x]

        cb_wait_front(cb_ex, onetile);
#endif  // !RMS ifdef end

        // Start of calculation x - E[x] (or (‚àëx^2)/n for RMS norm)
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            tile_regs_acquire();
            tile_regs_wait();
            cb_wait_front(cb_in, blk);
#ifdef RMSNORM
            reconfig_data_format_srca(cb_in);
            copy_tile_init(cb_in);
            for (uint32_t j = 0; j < blk; j++) {
                copy_tile(cb_in, j, j);
            }
#else
            reconfig_data_format(cb_in, cb_ex);
            sub_bcast_cols_init_short(cb_in, cb_ex);
            // x-E[x]
            for (uint32_t j = 0; j < blk; j++) {
                sub_tiles_bcast_cols(cb_in, cb_ex, j, 0, j);
            }
#endif
            cb_pop_front(cb_in, blk);
#ifdef FUSE_PRE_ADD
            cb_wait_front(cb_inb, blk);
            reconfig_data_format_srca(cb_in, cb_inb);
            binary_dest_reuse_tiles_init<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb);
            for (uint32_t j = 0; j < blk; j++) {
                binary_dest_reuse_tiles<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb, j, j);
            }
            cb_pop_front(cb_inb, blk);
#endif
#ifdef RMSNORM
            square_tile_init();
            for (uint32_t j = 0; j < blk; j++) {
                square_tile(j);
            }
            tile_regs_commit();
            cb_reserve_back(cb_xmm, blk);
            for (uint32_t j = 0; j < blk; j++) {
                pack_tile(j, cb_xmm);
            }
            cb_push_back(cb_xmm, blk);
            tile_regs_release();

            tile_regs_acquire();
            tile_regs_wait();
            if (wt > 0) {
                reconfig_data_format_srca(cb_ex2);
                cb_wait_front(cb_ex2, onetile);
                copy_tile_init(cb_ex2);
                copy_tile(cb_ex2, 0, dst0);
                cb_pop_front(cb_ex2, onetile);
            }
            cb_wait_front(cb_xmm, blk);
            reconfig_data_format(cb_xmm, cb_scaler);
            reduce_init(cb_xmm, cb_scaler, cb_ex2);
            // accumulates squared residual
            for (uint32_t j = 0; j < blk; j++) {
                reduce_tile(cb_xmm, cb_scaler, j, scaler0, dst0);
            }
            cb_pop_front(cb_xmm, blk);
            cb_reserve_back(cb_ex2, onetile);
            reduce_uninit();
            tile_regs_commit();
            pack_tile(dst0, cb_ex2);
            cb_push_back(cb_ex2, onetile);
            tile_regs_release();
#endif
        }

        tile_regs_acquire();
        tile_regs_wait();
        // End of calculation x - E[x] (or (‚àëx^2)/n for RMS norm)

        // Start of
        // Calculation
        //                     1
        //  cb_ex2pe =   -------------
        //               ‚àö(Var(X) + Œµ)
        cb_wait_front(cb_ex2, onetile);

        reconfig_data_format(cb_ex2, cb_eps);

        add_tiles_init(cb_ex2, cb_eps);
        add_tiles(cb_ex2, cb_eps, 0, 0, dst0);

        sqrt_tile_init();
        sqrt_tile(dst0);

        recip_tile_init();
        recip_tile(dst0);

        tile_regs_commit();

        pack_tile(dst0, cb_ex2pe);
        cb_push_back(cb_ex2pe, onetile);
        tile_regs_release();

        cb_pop_front(cb_ex2, onetile);
        cb_wait_front(cb_ex2pe, onetile);

        // broadcasts the tile since cb_ex2pe is a column vector that contains the important data
        tile_regs_acquire();
        tile_regs_wait();
        reconfig_data_format_srca(cb_ex2pe);
        unary_bcast_init<BroadcastType::COL>(cb_ex2pe, cb_ex2pe);
        unary_bcast<BroadcastType::COL>(cb_ex2pe, 0, dst0);
        cb_pop_front(cb_ex2pe, onetile);
        tile_regs_commit();
        pack_tile(dst0, cb_ex2pe);
        tile_regs_release();
        cb_push_back(cb_ex2pe, onetile);
        // End of
        // Calculation
        //                     1
        //  cb_ex2pe =   -------------
        //               ‚àö(Var(X) + Œµ)

        // Start of
        // Final Val Calc
        //    x-E[X]
        //(---------------*ùõÑ)+√ü
        //  ‚àö(Var(X)+Œµ)
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            tile_regs_acquire();
            tile_regs_wait();
            cb_reserve_back(cb_out, blk);
            cb_wait_front(cb_ex, 1);
            cb_wait_front(cb_in, blk);
#ifdef RMSNORM
            reconfig_data_format_srca(cb_in);
            copy_tile_init(cb_in);
            for (uint32_t j = 0; j < blk; j++) {
                copy_tile(cb_in, j, j);
            }
#else
            reconfig_data_format(cb_in, cb_ex);
            sub_bcast_cols_init_short(cb_in, cb_ex);
            // x-E[x]
            for (uint32_t j = 0; j < blk; j++) {
                sub_tiles_bcast_cols(cb_in, cb_ex, j, 0, j);
            }
#endif
            cb_pop_front(cb_in, blk);
            reconfig_data_format_srca(cb_in, cb_ex2pe);
#ifdef FUSE_PRE_ADD
            cb_wait_front(cb_inb, blk);
            reconfig_data_format_srca(cb_ex2pe, cb_inb);
            binary_dest_reuse_tiles_init<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb);
            for (uint32_t j = 0; j < blk; j++) {
                binary_dest_reuse_tiles<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb, j, j);
            }
            cb_pop_front(cb_inb, blk);
            reconfig_data_format_srca(cb_inb, cb_ex2pe);
#endif
            cb_wait_front(cb_ex2pe, 1);
            binary_dest_reuse_tiles_init<ELWMUL, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_ex2pe);
            for (uint32_t j = 0; j < blk; j++) {
                binary_dest_reuse_tiles<ELWMUL, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_ex2pe, 0, j);
            }
            tile_regs_commit();
            if constexpr (!(do_gamma == 1 or do_beta == 1)) {
                cb_xmm = cb_out;
            }
            pack_reconfig_data_format(cb_xmm);
            cb_reserve_back(cb_xmm, blk);
            for (uint32_t j = 0; j < blk; j++) {
                pack_tile(j, cb_xmm);
            }
            cb_push_back(cb_xmm, blk);
            tile_regs_release();
            if constexpr (do_gamma == 1) {
                tile_regs_acquire();
                tile_regs_wait();
                reconfig_data_format(cb_xmm, cb_gamma);
                if constexpr (!do_beta) {
                    pack_reconfig_data_format(cb_out);
                }
                cb_wait_front(cb_gamma, blk);
                if (ncht == 1) {
                    DPRINT << "\n\n\nFINAL VAL Pre Var Value wt: " << wt << ENDL();
                }
                cb_wait_front(cb_xmm, blk);
                mul_bcast_rows_init_short(cb_xmm, cb_gamma);
                for (uint32_t j = 0; j < blk; j++) {
                    mul_tiles_bcast_rows(cb_xmm, cb_gamma, j, j, j);
                }
                tile_regs_commit();
                cb_pop_front(cb_gamma, blk);
                cb_pop_front(cb_xmm, blk);
                if constexpr (!do_beta) {
                    cb_reserve_back(cb_out, blk);
                    for (uint32_t j = 0; j < blk; j++) {
                        pack_tile(j, cb_out);
                    }
                    cb_push_back(cb_out, blk);
                } else {
                    cb_reserve_back(cb_xmm, blk);
                    for (uint32_t j = 0; j < blk; j++) {
                        pack_tile(j, cb_xmm);
                    }
                    cb_push_back(cb_xmm, blk);
                }

                tile_regs_release();
            }
            if constexpr (do_beta == 1) {
                tile_regs_acquire();
                tile_regs_wait();
                reconfig_data_format(cb_xmm, cb_beta);
                pack_reconfig_data_format(cb_out);
                cb_wait_front(cb_beta, blk);
                cb_wait_front(cb_xmm, blk);
                add_bcast_rows_init_short(cb_xmm, cb_beta);
                for (uint32_t j = 0; j < blk; j++) {
                    add_tiles_bcast_rows(cb_xmm, cb_beta, j, j, j);
                }
                tile_regs_commit();
                cb_pop_front(cb_beta, blk);
                cb_pop_front(cb_xmm, blk);
                cb_reserve_back(cb_out, blk);
                for (uint32_t j = 0; j < blk; j++) {
                    pack_tile(j, cb_out);
                }
                tile_regs_release();
                cb_push_back(cb_out, blk);
            }
        }

        UNPACK(DPRINT << "-----NCHt val: " << NCHt << "---------- ncht" << ncht << ENDL());
        cb_xmm = tt::CBIndex::c_24;  // x minus mean
#ifdef RMSNORM
        cb_pop_front(cb_ex, 1);
#endif
        // End of
        // Final Val Calc
        //    x-E[X]
        //(---------------*ùõÑ)+√ü
        //  ‚àö(Var(X)+Œµ)
    }  // NCHt loop
}
}  // namespace NAMESPACE
