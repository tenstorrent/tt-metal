// SPDX-FileCopyrightText: © 2023 Tenstorrent Inc.
//
// SPDX-License-Identifier: Apache-2.0

#include <cstdint>
#define REDUCE_OP PoolType::SUM
#define REDUCE_DIM ReduceDim::REDUCE_ROW

#define BCAST_LLKOP EltwiseBinaryType::ELWMUL
#define BCAST_DIM BroadcastType::COL

#include "compute_kernel_api.h"
#include "compute_kernel_api/reduce.h"
#include "compute_kernel_api/bcast.h"
#include "compute_kernel_api/eltwise_binary.h"
#include "compute_kernel_api/layernorm.h"
#include "compute_kernel_api/eltwise_binary_sfpu.h"
#include "compute_kernel_api/tile_move_copy.h"
#include "compute_kernel_api/welford.h"
#include "compute_kernel_api/eltwise_unary/eltwise_unary.h"
#include "layernorm_compute_utils.hpp"
#include "compute_kernel_api/transpose_wh.h"
#include "dprint_pages.h"
#include "dprint_tensix.h"

namespace NAMESPACE {

void MAIN {
    uint32_t NCHt = get_arg_val<uint32_t>(0);
    constexpr uint32_t Wt = get_compile_time_arg_val(0);
    constexpr uint32_t blk = get_compile_time_arg_val(1);
    constexpr uint32_t do_gamma = get_compile_time_arg_val(2);
    constexpr uint32_t do_beta = get_compile_time_arg_val(3);
    constexpr bool FLOAT32_DTYPE = get_compile_time_arg_val(4) == 1;
    constexpr uint32_t W = get_compile_time_arg_val(5);
    constexpr uint32_t tile_width = get_compile_time_arg_val(6);
    constexpr bool rms_norm = static_cast<bool>(get_compile_time_arg_val(7));
    constexpr bool fuse_pre_add = static_cast<bool>(get_compile_time_arg_val(8));

    // reserve one tile for zeros on cb_in2
    // TODO(AP): check that if DST is indeed zeroed by release_dst (and initially), we can use it as zeroes

    // Note that the entire W dimension must fit in the intermed0 CB for this kernel to be correct
    constexpr auto cb_scaler = tt::CBIndex::c_2;  // single tile generated by the reader
    constexpr auto cb_eps = tt::CBIndex::c_3;     // single tile generated by the reader
    constexpr auto cb_in = tt::CBIndex::c_0;      // input x or a for fused pre-add (x=a+b)
    constexpr auto cb_inb = tt::CBIndex::c_1;     // input b for fused pre-add
    constexpr auto cb_out = tt::CBIndex::c_16;    // output
    constexpr auto cb_gamma = tt::CBIndex::c_5;
    constexpr auto cb_beta = tt::CBIndex::c_6;
    uint32_t cb_xmm = tt::CBIndex::c_24;                   // x minus mean (or x^2 for RMS norm)
    constexpr auto cb_ex = tt::CBIndex::c_18;              // E[x]
    constexpr auto cb_ex2 = tt::CBIndex::c_19;             // Var[x] = E[(x-E[x])^2] (or (∑x^2)/n for RMS norm)
    constexpr auto cb_ex2pe = tt::CBIndex::c_21;           // E[(x-E[x])^2]+ε (or (∑x^2)/n+ε for RMS norm)
    constexpr auto cb_fusion = tt::CBIndex::c_22;          // stream gamma/beta
    constexpr auto cb_interm_pre_add = tt::CBIndex::c_23;  // intermediate for layernorm fused pre-add
    constexpr auto scaler0 = 0;
    constexpr auto layernorm = !rms_norm;
    constexpr uint32_t onetile = 1;

    // Initialize the hardware based on the first op
    // that will be done
    if constexpr (fuse_pre_add) {
        // Init for x = in + b
        binary_op_init_common(cb_in, cb_inb, rms_norm ? cb_xmm : tt::CBIndex::c_23);
        pack_reconfig_data_format(cb_interm_pre_add);
    } else {
        // Init for transpose (layernorm) or square (rms)
        constexpr auto first_out_cb = layernorm ? cb_ex : cb_ex2;
        unary_op_init_common(cb_in, first_out_cb);
        pack_reconfig_data_format(cb_ex);
    }

    cb_wait_front(cb_scaler, 1);  // comes from the reader
    cb_wait_front(cb_eps, 1);     // comes from the reader

    constexpr uint32_t dst0 = 0;
    constexpr uint32_t dst1 = 1;
    constexpr uint32_t dst2 = 2;

    for (uint32_t ncht = 0; ncht < NCHt; ncht++) {
        tile_regs_acquire();
        tile_regs_wait();

        // =====================================
        // First pass over the input.
        // Layernorm: Calculate E[x] and Var[x]
        // RMS norm: Calculate (∑x^2)/n
        // =====================================
        cb_reserve_back(cb_ex2, onetile);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            // Wait for block of input
            cb_wait_front(cb_in, blk);

            if constexpr (layernorm) {
                // Layernorm: Calculate E[x] and Var[x] using Welford's algorithm
                // Go tile-by-tile in the block
                for (uint32_t j = 0; j < blk; j++) {
                    if constexpr (fuse_pre_add) {
                        // Fuse in = in + b in dst0
                        copy_tile_to_dst_init_short(cb_in, dst0);
                        copy_tile(cb_in, j, dst0);
                        if (wt == Wt - blk && j == blk - 1) {
                            dprint_tensix_dest_reg(dst0);
                        }

                        cb_wait_front(cb_inb, 1);
                        reconfig_data_format_srca(cb_in, cb_inb);
                        binary_dest_reuse_tiles_init<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb);
                        binary_dest_reuse_tiles<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb, dst0, dst0);
                        if (wt == Wt - 1 && j == blk - 1) {
                            dprint_tensix_dest_reg(dst0);
                        }
                        cb_pop_front(cb_inb, 1);

                        // Welford's needs transposed input tile,
                        // and transpose_wh_dest is currently buggy,
                        // so we need to use the interm CB
                        tile_regs_commit();
                        cb_reserve_back(cb_interm_pre_add, onetile);
                        pack_tile(dst0, cb_interm_pre_add);
                        cb_push_back(cb_interm_pre_add, onetile);
                        cb_wait_front(cb_interm_pre_add, onetile);
                        tile_regs_release();
                        tile_regs_acquire();
                        tile_regs_wait();
                    }

                    // Transpose
                    constexpr auto cb_result_or_input = fuse_pre_add ? cb_interm_pre_add : cb_in;
                    reconfig_data_format(cb_result_or_input, cb_result_or_input);
                    transpose_wh_init_short(cb_result_or_input);
                    transpose_wh_tile(cb_result_or_input, fuse_pre_add ? 0 : j, dst0);
                    if constexpr (fuse_pre_add) {
                        cb_pop_front(cb_interm_pre_add, onetile);
                    }

                    // Accumulate mean and variance
                    welford_init();
                    welford(
                        dst0, dst1, dst2, /*start_N*/ (wt + j) * tile_width, /*end_N*/ W, /*last_run*/ wt + j == Wt);
                }
            } else {
                // RMS: Calculate (∑x^2)/n
                // Copy tiles in block to dst regs
                copy_tile_init(cb_in);
                for (uint32_t j = 0; j < blk; j++) {
                    copy_tile(cb_in, j, j);
                }
                cb_pop_front(cb_in, blk);

                if constexpr (fuse_pre_add) {
                    // Fuse in = in + b
                    reconfig_data_format_srca(cb_in, cb_inb);
                    cb_wait_front(cb_inb, blk);
                    for (uint32_t j = 0; j < blk; j++) {
                        binary_dest_reuse_tiles_init<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb);
                        binary_dest_reuse_tiles<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb, j, j);
                    }
                    cb_pop_front(cb_inb, blk);
                }

                // Square tiles in dst regs
                square_tile_init();
                for (uint32_t j = 0; j < blk; j++) {
                    square_tile(j);
                }

                // Accumulate squares
                add_binary_tile_init();
                for (uint32_t j = 0; j < blk - 1; j++) {
                    add_binary_tile(j, j + 1);
                }

                // Multiply by scalar to get (∑x^2)/n
                binary_dest_reuse_tiles_init<ELWMUL, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_scaler);
                binary_dest_reuse_tiles<ELWMUL, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_scaler, 0, dst0);

                if (wt > 0) {
                    // This block's result is accumulated in dst0
                    // Copy the previous block's result to dst1 and
                    // add to current
                    cb_wait_front(cb_ex2, onetile);
                    reconfig_data_format_srca(cb_ex2);
                    copy_tile_init(cb_ex2);
                    copy_tile(cb_ex2, 0, dst1);

                    add_binary_tile_init();
                    add_binary_tile(dst0, dst1);
                    cb_pop_front(cb_ex2, onetile);
                }
                tile_regs_commit();

                // Push to CB
                pack_tile(dst0, cb_ex2);
                cb_push_back(cb_ex2, onetile);
                tile_regs_release();
            }

            cb_pop_front(cb_in, blk);
        }

        if constexpr (layernorm) {
            // Pack mean and variance to CBs
            // and transpose back to columns
            // transpose_wh_dest is currently buggy,
            // so we transpose through the CB interface
            layernorm::compute::utils::transpose_pack_mean_and_variance(cb_ex, cb_ex2, dst1, dst2);
            tile_regs_commit();
            tile_regs_release();
        }

        // =====================================
        // Calculate 1/(√(Var(X) + ε)).
        // Var[x] for RMS norm is (∑x^2)/n
        // =====================================
        tile_regs_acquire();
        tile_regs_wait();

        cb_wait_front(cb_ex2, onetile);

        reconfig_data_format(cb_ex2, cb_eps);

        add_tiles_init(cb_ex2, cb_eps);
        add_tiles(cb_ex2, cb_eps, 0, 0, dst0);

        rsqrt_tile_init<LEGACY_RSQRT>();
        rsqrt_tile<LEGACY_RSQRT>(dst0);

        tile_regs_commit();

        cb_reserve_back(cb_ex2pe, onetile);
        pack_tile(dst0, cb_ex2pe);
        cb_push_back(cb_ex2pe, onetile);
        tile_regs_release();

        cb_pop_front(cb_ex2, onetile);
        cb_wait_front(cb_ex2pe, onetile);

        // broadcasts the tile since cb_ex2pe is a column vector that contains the important data
        tile_regs_acquire();
        tile_regs_wait();
        reconfig_data_format_srca(cb_ex2pe);
        unary_bcast_init<BroadcastType::COL>(cb_ex2pe, cb_ex2pe);
        unary_bcast<BroadcastType::COL>(cb_ex2pe, 0, dst0);
        cb_pop_front(cb_ex2pe, onetile);
        tile_regs_commit();
        pack_tile(dst0, cb_ex2pe);
        tile_regs_release();
        cb_push_back(cb_ex2pe, onetile);

        // =====================================
        // Second pass over the input.
        // Computes the final value.
        // Layernorm:
        //    x-E[x]
        //(---------------*𝛄)+ß
        //  √(Var(x)+ε)
        // RMS norm:
        //    x
        //(---------------*𝛄)+ß
        //  √(Var(X)+ε)
        // =====================================
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            tile_regs_acquire();
            tile_regs_wait();
            cb_reserve_back(cb_out, blk);
            cb_wait_front(cb_ex, onetile);
            cb_wait_front(cb_in, blk);
            if constexpr (layernorm) {
                // Layernorm: Calculate x-E[x]
                reconfig_data_format(cb_in, cb_ex);
                sub_bcast_cols_init_short(cb_in, cb_ex);
                // x-E[x]
                for (uint32_t j = 0; j < blk; j++) {
                    sub_tiles_bcast_cols(cb_in, cb_ex, j, 0, j);
                }
            } else {
                // RMS: Just copy input
                reconfig_data_format_srca(cb_in);
                copy_tile_init(cb_in);
                for (uint32_t j = 0; j < blk; j++) {
                    copy_tile(cb_in, j, j);
                }
            }
            cb_pop_front(cb_in, blk);
            reconfig_data_format_srca(cb_in, cb_ex2pe);

            if constexpr (fuse_pre_add) {
                // Fuse in = in + b
                cb_wait_front(cb_inb, blk);
                reconfig_data_format_srca(cb_ex2pe, cb_inb);
                binary_dest_reuse_tiles_init<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb);
                for (uint32_t j = 0; j < blk; j++) {
                    binary_dest_reuse_tiles<ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_inb, j, j);
                }
                cb_pop_front(cb_inb, blk);
                reconfig_data_format_srca(cb_inb, cb_ex2pe);
            }

            // Multiply by 1/(√(Var(X) + ε))
            cb_wait_front(cb_ex2pe, 1);
            binary_dest_reuse_tiles_init<ELWMUL, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_ex2pe);
            for (uint32_t j = 0; j < blk; j++) {
                binary_dest_reuse_tiles<ELWMUL, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(cb_ex2pe, 0, j);
            }
            tile_regs_commit();
            if constexpr (!(do_gamma == 1 or do_beta == 1)) {
                cb_xmm = cb_out;
            }
            pack_reconfig_data_format(cb_xmm);
            cb_reserve_back(cb_xmm, blk);
            for (uint32_t j = 0; j < blk; j++) {
                pack_tile(j, cb_xmm);
            }
            cb_push_back(cb_xmm, blk);
            tile_regs_release();

            if constexpr (do_gamma == 1) {
                // Multiply by gamma
                tile_regs_acquire();
                tile_regs_wait();
                reconfig_data_format(cb_xmm, cb_gamma);
                if constexpr (!do_beta) {
                    pack_reconfig_data_format(cb_out);
                }
                cb_wait_front(cb_gamma, blk);
                cb_wait_front(cb_xmm, blk);
                mul_bcast_rows_init_short(cb_xmm, cb_gamma);
                for (uint32_t j = 0; j < blk; j++) {
                    mul_tiles_bcast_rows(cb_xmm, cb_gamma, j, j, j);
                }
                tile_regs_commit();
                cb_pop_front(cb_gamma, blk);
                cb_pop_front(cb_xmm, blk);
                if constexpr (!do_beta) {
                    cb_reserve_back(cb_out, blk);
                    for (uint32_t j = 0; j < blk; j++) {
                        pack_tile(j, cb_out);
                    }
                    cb_push_back(cb_out, blk);
                } else {
                    cb_reserve_back(cb_xmm, blk);
                    for (uint32_t j = 0; j < blk; j++) {
                        pack_tile(j, cb_xmm);
                    }
                    cb_push_back(cb_xmm, blk);
                }

                tile_regs_release();
            }
            if constexpr (do_beta == 1) {
                // Add beta
                tile_regs_acquire();
                tile_regs_wait();
                reconfig_data_format(cb_xmm, cb_beta);
                pack_reconfig_data_format(cb_out);
                cb_wait_front(cb_beta, blk);
                cb_wait_front(cb_xmm, blk);
                add_bcast_rows_init_short(cb_xmm, cb_beta);
                for (uint32_t j = 0; j < blk; j++) {
                    add_tiles_bcast_rows(cb_xmm, cb_beta, j, j, j);
                }
                tile_regs_commit();
                cb_pop_front(cb_beta, blk);
                cb_pop_front(cb_xmm, blk);
                cb_reserve_back(cb_out, blk);
                for (uint32_t j = 0; j < blk; j++) {
                    pack_tile(j, cb_out);
                }
                tile_regs_release();
                cb_push_back(cb_out, blk);
            }
        }

        cb_xmm = tt::CBIndex::c_24;  // x minus mean
        if constexpr (rms_norm) {
            cb_pop_front(cb_ex, 1);
        }
    }  // NCHt loop
}
}  // namespace NAMESPACE
