// SPDX-FileCopyrightText: Â© 2023 Tenstorrent Inc.
//
// SPDX-License-Identifier: Apache-2.0

#include <cstdint>

#define REDUCE_OP PoolType::SUM
#define REDUCE_DIM ReduceDim::REDUCE_ROW

#define BCAST_LLKOP EltwiseBinaryType::ELWMUL
#define BCAST_DIM BroadcastType::COL

#include "compute_kernel_api/reduce.h"
#include "compute_kernel_api/bcast.h"
#include "compute_kernel_api/eltwise_binary.h"
#include "compute_kernel_api/layernorm.h"
#include "debug/dprint.h"
#include "debug/dprint_pages.h"

ALWI void ACQ() { acquire_dst(); }
ALWI void REL() { release_dst(); }

namespace NAMESPACE {
void MAIN {
    uint32_t NCHt = get_arg_val<uint32_t>(0);
    constexpr uint32_t Wt = get_compile_time_arg_val(0);
    constexpr uint32_t blk = get_compile_time_arg_val(1);
    constexpr uint32_t do_gamma = get_compile_time_arg_val(2);
    constexpr uint32_t do_beta = get_compile_time_arg_val(3);
    constexpr bool FLOAT32_DTYPE = get_compile_time_arg_val(4) == 1;

    constexpr uint32_t onetile = 1;
    // reserve one tile for zeros on cb_in2
    // TODO(AP): check that if DST is indeed zeroed by release_dst (and initially), we can use it as zeroes

    // Note that the entire W dimension must fit in the intermed0 CB for this kernel to be correct
    constexpr auto cb_scaler = tt::CBIndex::c_2;  // single tile generated by the reader
    constexpr auto cb_eps = tt::CBIndex::c_3;     // single tile generated by the reader
    constexpr auto cb_in = tt::CBIndex::c_0;      // input x or a for fused pre-add (x=a+b)
    constexpr auto cb_inb = tt::CBIndex::c_1;     // input b for fused pre-add
    constexpr auto cb_out = tt::CBIndex::c_16;    // output
    constexpr auto cb_gamma = tt::CBIndex::c_5;
    constexpr auto cb_beta = tt::CBIndex::c_6;
#if defined RMSNORM and not defined FUSE_PRE_ADD
    constexpr uint32_t cb_xmm = cb_in;  // x minus mean
#else
    constexpr uint32_t cb_xmm = tt::CBIndex::c_24;  // x minus mean
#endif
    constexpr auto cb_ex = tt::CBIndex::c_18;      // E[x]
    constexpr auto cb_ex2 = tt::CBIndex::c_19;     // E[(x-E[x])^2]
    constexpr auto cb_xmm2 = tt::CBIndex::c_20;    // xmm^2
    constexpr auto cb_ex2pe = tt::CBIndex::c_21;   // E[(x-E[x])^2]+eps
    constexpr auto cb_fusion = tt::CBIndex::c_22;  // stream gamma/beta
    constexpr auto scaler0 = 0;
#ifdef FUSE_PRE_ADD
#ifdef RMSNORM
    constexpr uint32_t cb_x = cb_xmm;
#else
    constexpr uint32_t cb_x = tt::CBIndex::c_23;
#endif
#else
    constexpr uint32_t cb_x = cb_in;
#endif

#ifdef FUSE_PRE_ADD
    binary_op_init_common(cb_in, cb_inb, cb_x);
#else
    binary_op_init_common(cb_in, cb_in, cb_xmm2);
#endif

    cb_wait_front(cb_scaler, 1);  // comes from the reader
    cb_wait_front(cb_eps, 1);     // comes from the reader

    constexpr int cb_im_or_out = (do_gamma | do_beta) ? cb_fusion : cb_out;

    for (uint32_t ncht = 0; ncht < NCHt; ncht++) {
        constexpr int onetile = 1;
        constexpr int dst0 = 0;

/*
 * X + Y
 */
#ifdef FUSE_PRE_ADD
        reconfig_data_format(cb_in, cb_inb);
        pack_reconfig_data_format(cb_x);
        add_tiles_init(cb_in, cb_inb);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            ACQ();
            // UNPACK(( { DPRINT  << "Waiting on cb_x" << ENDL(); } ));
            cb_wait_front(cb_in, blk);
            // UNPACK(( { DPRINT  << "Waiting on cb_inb" << ENDL(); } ));
            cb_wait_front(cb_inb, blk);
            // UNPACK(( { DPRINT  << "Done Waiting on cb_inb" << ENDL(); } ));
            cb_reserve_back(cb_x, blk);
            for (uint32_t j = 0; j < blk; j++) {
                add_tiles(cb_in, cb_inb, j, j, j);
                pack_tile(j, cb_x);
            }
            REL();
            cb_push_back(cb_x, blk);  // push the sum into the same buffer
            cb_pop_front(cb_in, blk);
            cb_pop_front(cb_inb, blk);
        }
#ifndef RMSNORM
        reconfig_data_format(cb_in, cb_x, cb_inb, cb_scaler);
#else
        reconfig_data_format(cb_in, cb_x, cb_inb, cb_x);
#endif
        // by the end of this loop we should end up with Wt tiles in cb_x
#else
#ifndef RMSNORM
        reconfig_data_format(cb_in, cb_scaler);
        pack_reconfig_data_format(cb_ex);
#else
        reconfig_data_format(cb_in, cb_in);
        pack_reconfig_data_format(cb_xmm2);
#endif
#endif

#ifndef RMSNORM
        UNPACK(DPRINT << "----------------Got to the start---------" << ENDL());
        /*
         * E[x]
         * means = ttnn.sum(x, 3, True, None, None, 1.0/W) # -> NCH1
         */
        // GOAL: Reduce a tile in a numeric stable way through pairwise summation.
        //   We try to avoid accumulation by adding half the cb to the other half.
        //   Then repeating until we are left with only a single tile to reduce upon.
        // The following code is a tad complex by nature, so some design choices were
        //   All variables that don't change will be called const
        //       We have a lot of these since it can reduce computation
        //   If its not const, it will change
        // We first reduce input from cb_x, then store the intermediates in cb_ex
        uint32_t cb_reduce_input = cb_x;
        uint32_t cb_length = Wt;
        reconfig_data_format(cb_x, cb_x);
        pack_reconfig_data_format(cb_ex);
        add_tiles_init(cb_x, cb_x, false);
        // 4 dst regs if FP32 and 8 is BFLOAT 16
        constexpr uint32_t num_dst_regs = FLOAT32_DTYPE ? 4 : 8;
        bool first_sum = true;
        while (cb_length > 1) {
            // This does a ceiling divide,
            const uint32_t num_passes = 1 + ((cb_length - 1) / (num_dst_regs * 2));
            // We need to reset this every loop since it can change in the following loop
            uint32_t regs_to_use = num_dst_regs;
            for (uint32_t pass = 0; pass < num_passes; pass++) {
                const uint32_t start_index = first_sum ? pass * num_dst_regs * 2 : 0;

                const uint32_t length_to_be_processed = cb_length - (pass * num_dst_regs * 2);
                if (length_to_be_processed < regs_to_use) {
                    // This will floor divide, we will need to account to the one leftover tile incase
                    regs_to_use = length_to_be_processed / 2;
                }
                tile_regs_acquire();
                UNPACK(DPRINT << "----------------pass" << pass << ENDL());
                UNPACK(DPRINT << "----------------num_regs" << regs_to_use << ENDL());
                cb_wait_front(cb_reduce_input, start_index + (regs_to_use * 2));
                UNPACK(DPRINT << "----------------pass" << pass << ENDL());
                cb_reserve_back(cb_ex, regs_to_use);
                UNPACK(DPRINT << "----------------pass" << pass << ENDL());
                for (uint32_t dst = 0; dst < regs_to_use; dst++) {
                    add_tiles(
                        cb_reduce_input, cb_reduce_input, start_index + (dst * 2), start_index + (dst * 2) + 1, dst);
                }
                // Check if we are processing the odd tile and we do & 1 to account for floor divide earlier
                if (length_to_be_processed < regs_to_use && (length_to_be_processed & 1)) {
                    const uint32_t last_index = start_index + (regs_to_use * 2) + 1;
                    cb_wait_front(cb_reduce_input, last_index);
                    binary_dest_reuse_tiles_init<EltwiseBinaryType::ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(
                        cb_reduce_input);
                    binary_dest_reuse_tiles<EltwiseBinaryType::ELWADD, EltwiseBinaryReuseDestType::DEST_TO_SRCB>(
                        cb_reduce_input, last_index, dst0);
                    add_tiles_init(cb_ex, cb_ex, false);
                    if (!first_sum) {
                        cb_pop_front(cb_reduce_input, 1);
                    }
                }
                tile_regs_wait();
                tile_regs_commit();
                if (!first_sum) {
                    cb_pop_front(cb_reduce_input, (regs_to_use * 2));
                }
                uint32_t dst = 0;
                // We use a do while in the case that there is only one cb to be processed on this pass since then
                // regs_to_use would equal 0
                do {
                    pack_tile(dst, cb_ex);
                    dst++;
                    cb_reserve_back(cb_ex, 1);
                    cb_push_back(cb_ex, 1);
                } while (dst < regs_to_use);
                tile_regs_release();
            }
            if (first_sum) {
                reconfig_data_format(cb_ex, cb_ex);
                add_tiles_init(cb_ex, cb_ex, false);
                first_sum = false;
                cb_reduce_input = cb_ex;
            }
            // We floor divide since we squish all odd tiles into dst0
            cb_length = cb_length / 2;
        }
        reconfig_data_format(cb_ex, cb_scaler);
        cb_reserve_back(cb_ex, onetile);
        reduce_init_delta<false>(cb_ex, cb_scaler, cb_ex);
        tile_regs_acquire();
        reduce_tile(cb_ex, cb_scaler, 0, scaler0, dst0);
        tile_regs_commit();
        tile_regs_wait();
        pack_tile(dst0, cb_ex);
        reduce_uninit();
        reduce_revert_delta(cb_ex);
        cb_push_back(cb_ex, 1);
        tile_regs_release();

        /*
         * x - E[x]
         * compute xmm=x-mean. Reuse cb_x since we didn't pop anything from it
         */
        if constexpr (FLOAT32_DTYPE) {
            reconfig_data_format(cb_x, cb_ex);
        }
        cb_wait_front(cb_ex, 1);  // should have 1 tile
        UNPACK(tt::compute::common::print_full_tile(cb_ex, 0, true));
        cb_reserve_back(cb_xmm, Wt);
        sub_bcast_cols_init_short(cb_x, cb_ex);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            ACQ();
            for (uint32_t wtr = 0; wtr < blk; wtr++) {
                sub_tiles_bcast_cols(cb_x, cb_ex, wt + wtr, 0, wtr);  // tile *= 1/(sum(exp(x)))
                pack_tile(wtr, cb_xmm);
            }
            cb_push_back(cb_xmm, blk);
            REL();
        }
        cb_pop_front(cb_ex, 1);
        cb_pop_front(cb_x, Wt);

#ifndef FUSE_PRE_ADD
        reconfig_data_format_srca(cb_x, cb_xmm);
#endif
#endif

        /* (x - E[x])^2
         * compute temp = xmm*xmm = (x-E[x])^2
         */
        mul_tiles_init(cb_xmm, cb_xmm);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            cb_wait_front(cb_xmm, wt + blk);  // cumulative wait
            cb_reserve_back(cb_xmm2, blk);    // can probably use less space for this if we block
            ACQ();
            for (uint32_t wtr = 0; wtr < blk; wtr++) {
                mul_tiles(cb_xmm, cb_xmm, wt + wtr, wt + wtr, wtr);
                // mul_tiles(cb_xmm, cb_col1, wt+wtr, wt+wtr, wtr);
                pack_tile(wtr, cb_xmm2);
            }
            cb_push_back(cb_xmm2, blk);
            REL();
        }

#if defined RMSNORM and not defined FUSED_PRE_ADD
        reconfig_data_format(cb_xmm, cb_xmm2, cb_xmm, cb_scaler);
#endif

        /* Var(x)
         * compute E[(x-E[x])^2]
         * IIRC E[x^2] - E[x]^2 trick was unstable
         * TODO(AP): can save space here by reusing CB
         */
        if constexpr (FLOAT32_DTYPE) {
            reconfig_data_format(cb_xmm2, cb_scaler);
        }
        cb_reserve_back(cb_ex2, 1);
        reduce_init(cb_xmm2, cb_scaler, cb_ex2);
        ACQ();
        cb_wait_front(cb_xmm2, Wt);
        // cb_wait_front(cb_xmm, Wt);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            // reduce
            for (uint32_t wtr = 0; wtr < blk; wtr++) {
                reduce_tile(cb_xmm2, cb_scaler, wt + wtr, scaler0, dst0);
            }
            // reduce_tile(cb_xmm, cb_scaler, wt+wtr, scaler0, dst0);
        }
        cb_pop_front(cb_xmm2, Wt);
        pack_tile(dst0, cb_ex2);
        reduce_uninit();
        REL();

        cb_push_back(cb_ex2, 1);
        cb_wait_front(cb_ex2, 1);

        /* Var(x) + eps
         * add epsilon E[(x-E[x])^2]+eps
         */
        if constexpr (FLOAT32_DTYPE) {
            reconfig_data_format(cb_ex2, cb_eps);
        }
        ACQ();
        add_tiles_init(cb_ex2, cb_eps);
        add_tiles(cb_ex2, cb_eps, 0, 0, dst0);

        cb_reserve_back(cb_ex2pe, 1);  // 1
        sqrt_tile_init();
        sqrt_tile(dst0);
        recip_tile_init();
        recip_tile(dst0);
        pack_tile(dst0, cb_ex2pe);
        cb_push_back(cb_ex2pe, 1);
        REL();
        cb_pop_front(cb_ex2, 1);

        /* ln(x) * gamma + beta (gamma and beta are optional)
         * now xmm = (x-E[x])
         * we have 1.0/sqrt( E[(x-E[x])^2] + eps) in cb_ex2pe
         * just need to bcast_mul xmm with cb_ex2pe
         */
        cb_wait_front(cb_ex2pe, 1);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            // if (ht == 1) UNPACK(( DPRINT << "wt_2=" << wt << " " ));
            // if (ht == 1) UNPACK(( DPRINT << "rem_2=" << rem << ENDL() ));
            reconfig_data_format(cb_xmm, cb_ex2pe);
            if constexpr (do_gamma == 0 && do_beta == 0) {
                pack_reconfig_data_format(cb_out);
            } else {
                pack_reconfig_data_format(cb_fusion);
            }
            cb_reserve_back(cb_im_or_out, blk);
#if defined RMSNORM and not defined FUSE_PRE_ADD
            reconfig_data_format_srca(cb_fusion, cb_xmm);
#endif
            ACQ();
            mul_bcast_cols_init_short(cb_xmm, cb_ex2pe);
            for (uint32_t wtr = 0; wtr < blk; wtr++) {
                // cb_xmm[wt+wtr] since we pop Wt from cb_xmm after the entire loop
                mul_tiles_bcast_cols(cb_xmm, cb_ex2pe, wt + wtr, 0, wtr);  // tile *= 1/(sum(exp(x)))
                pack_tile(wtr, cb_im_or_out);  // pack either to intermediate (cb_fusion or out0)
            }
            cb_push_back(cb_im_or_out, blk);  // if no gamma/beta are provided, this will be passed on to the writer
            REL();

            if constexpr (!(do_gamma == 0 && do_beta == 0)) {
#if defined RMSNORM and not defined FUSE_PRE_ADD
                reconfig_data_format_srca(cb_xmm, cb_fusion);
#endif
            }
            if constexpr (do_gamma) {
                if constexpr (do_beta == 0) {
                    pack_reconfig_data_format(cb_out);
                }
                reconfig_data_format_srcb(cb_ex2pe, cb_gamma);
                ACQ();
                uint32_t cb_outg = do_beta ? cb_fusion : cb_out;
                mul_bcast_rows_init_short(cb_fusion, cb_gamma);
                cb_reserve_back(cb_outg, blk);
                cb_wait_front(cb_gamma, wt + blk);  // we don't pop, TODO: only wait on first ht
                cb_wait_front(cb_fusion, blk);
                for (uint32_t wtr = 0; wtr < blk; wtr++) {
                    mul_tiles_bcast_rows(cb_fusion, cb_gamma, wtr, wt + wtr, wtr);  // tile *= 1/(sum(exp(x)))
                    pack_tile(wtr, cb_outg);  // pack either to intermediate (cb_fusion or out0)
                }
                cb_pop_front(cb_fusion, blk);
                // we don't pop gamma
                cb_push_back(cb_outg, blk);
                // We don't pop gamma since it's 1,1,1,Wt and we reuse it for all NCHt
                REL();
            }
            if constexpr (do_beta) {
                pack_reconfig_data_format(cb_out);
                if constexpr (do_gamma) {
                    reconfig_data_format_srcb(cb_gamma, cb_beta);
                } else {
                    reconfig_data_format_srcb(cb_ex2pe, cb_beta);
                }
                ACQ();
                add_bcast_rows_init_short(cb_fusion, cb_beta);
                cb_reserve_back(cb_out, blk);
                cb_wait_front(cb_beta, wt + blk);  // TODO: optimization - only wait on first ht
                cb_wait_front(cb_fusion, blk);
                for (uint32_t wtr = 0; wtr < blk; wtr++) {
                    add_tiles_bcast_rows(cb_fusion, cb_beta, wtr, wt + wtr, wtr);  // tile *= 1/(sum(exp(x)))
                    pack_tile(wtr, cb_out);  // pack either to intermediate (cb_fusion or out0)
                }
                cb_pop_front(cb_fusion, blk);
                // We don't pop beta since it's 1,1,1,Wt and we reuse it for all NCHt
                cb_push_back(cb_out, blk);
                REL();
            }
        }
        cb_pop_front(cb_ex2pe, 1);
        cb_pop_front(cb_xmm, Wt);

    }  // NCHt loop
    // cb_pop_front(cb_scaler, 1); // optional for correctness
    // cb_pop_front(cb_eps, 1); // optional for correctness
    // cb_pop_front(cb_col1, 1); // optional for correctness
}
}  // namespace NAMESPACE
