name: "[impl] TTSim Integration Tests"

on:
  workflow_call:
    inputs:
      basic-docker-image:
        required: true
        type: string
      test-docker-image:
        required: true
        type: string
      package-artifact-name:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string
      ttsim-ref:
        required: false
        type: string
        default: "919f293d7fc404c0c81456b3552e918ed6edf07a"

jobs:
  ttsim-integration:
    runs-on: ubuntu-latest
    name: "TTSim Integration - ${{ matrix.arch }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: wormhole_b0
            build_suffix: release_wh
            soc_desc: wormhole_b0_80_arch.yaml
          - arch: blackhole
            build_suffix: release_bh
            soc_desc: blackhole_140_arch.yaml
    permissions:
      contents: read
    container:
      image: ${{ inputs.basic-docker-image || 'docker-image-unresolved!'}}
      volumes:
        - ${{ github.workspace }}/docker-job:/work
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    env:
      CC: gcc-12
      CXX: g++-12
      TT_METAL_HOME: /usr/libexec/tt-metalium
      TT_METAL_SIMULATOR_HOME: /work/sim
      TT_METAL_SIMULATOR: /work/sim/libttsim.so
      TT_METAL_SLOW_DISPATCH_MODE: 1
    steps:

      - name: Download packages artifact
        uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ inputs.package-artifact-name || 'packages artifact unresolved!' }}
          path: /work/pkgs/

      - name: Install packages
        run: |
          set -euo pipefail
          apt update
          apt install -y ./pkgs/tt-metalium_*.deb ./pkgs/tt-metalium-jit_*.deb ./pkgs/tt-metalium-dev_*.deb ./pkgs/tt-metalium-examples_*.deb

      - name: Install System Packages
        run: |
          apt update
          apt install -y git

      - name: Checkout ttsim
        uses: actions/checkout@v4
        with:
          repository: tenstorrent/ttsim
          ref: ${{ inputs.ttsim-ref }}
          path: docker-job/ttsim
          token: ${{ secrets.TTSIM_TOKEN }}

      - name: Build ttsim
        run: |
          cd /work/ttsim/src
          ../scripts/make.py _out/${{ matrix.build_suffix }}/libttsim.so

      - name: Install ttsim
        run: |
          mkdir -p $TT_METAL_SIMULATOR_HOME
          cp /work/ttsim/src/_out/${{ matrix.build_suffix }}/libttsim.so $TT_METAL_SIMULATOR_HOME/
          cp $TT_METAL_HOME/tt_metal/soc_descriptors/${{ matrix.soc_desc }} $TT_METAL_SIMULATOR_HOME/soc_descriptor.yaml

      - name: Build and Run Metal Examples
        timeout-minutes: 15
        run: |
          working_examples=(
            "add_2_integers_in_compute"
            "add_2_integers_in_riscv"
            "eltwise_binary"
            "hello_world_compute_kernel"
            "hello_world_datamovement_kernel"
            "custom_sfpi_add"
            "custom_sfpi_smoothstep"
          )
          for example_name in "${working_examples[@]}"; do
            example_path="/usr/share/tt-metalium/examples/${example_name}"
            if [[ -d "$example_path" ]]; then
              echo "::group::${example_name} - build and run"
              build_dir=$(mktemp -d)
              cd "$build_dir"
              # Build the example
              cmake -G Ninja -S "$example_path" -B .
              cmake --build .
              # Find and run the built executable
              readarray -t exec_paths < <(find . -maxdepth 2 -type f -executable -not -name "*.so")
              for exe in "${exec_paths[@]}"; do
                exe_basename=$(basename "$exe")
                echo "Running ${exe_basename}"
                "$exe"
              done
              echo "::endgroup::"
            else
              echo "Warning: Example directory not found: $example_path"
            fi
          done
  ttnn-pytests:
    runs-on: tt-ubuntu-2204-small-stable
    name: "TTNN Pytests - ${{ matrix.arch }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: wormhole_b0
            build_suffix: release_wh
            soc_desc: wormhole_b0_80_arch.yaml
          - arch: blackhole
            build_suffix: release_bh
            soc_desc: blackhole_140_arch.yaml
    container:
      image: harbor.ci.tenstorrent.net/${{ inputs.test-docker-image || 'docker-image-unresolved!'}}
      volumes:
        - ${{ github.workspace }}/docker-job:/work
      env:
        ARCH_NAME: ${{ matrix.arch }}
        TT_METAL_SIMULATOR_HOME: /work/sim
        TT_METAL_SIMULATOR: /work/sim/libttsim.so
        TT_METAL_SLOW_DISPATCH_MODE: 1
        LOGURU_LEVEL: INFO
        PYTHONPATH: /work
        PYTHONHASHSEED: 0
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: ⬇️  Setup Job
        uses: tenstorrent/tt-metal/.github/actions/setup-job@main
        timeout-minutes: 10
        with:
          wheel-artifact-name: ${{ inputs.wheel-artifact-name }}

      - name: Checkout ttsim
        uses: actions/checkout@v4
        with:
          repository: tenstorrent/ttsim
          ref: ${{ inputs.ttsim-ref }}
          path: docker-job/ttsim
          token: ${{ secrets.TTSIM_TOKEN }}

      - name: Build ttsim
        run: |
          cd /work/ttsim/src
          ../scripts/make.py _out/${{ matrix.build_suffix }}/libttsim.so

      - name: Install ttsim
        run: |
          mkdir -p $TT_METAL_SIMULATOR_HOME
          cp /work/ttsim/src/_out/${{ matrix.build_suffix }}/libttsim.so $TT_METAL_SIMULATOR_HOME/
          cp /work/tt_metal/soc_descriptors/${{ matrix.soc_desc }} $TT_METAL_SIMULATOR_HOME/soc_descriptor.yaml

      - name: Run TTNN Pytests
        run: |
          pytest tests/ttnn/unit_tests/operations/eltwise/test_sub.py
