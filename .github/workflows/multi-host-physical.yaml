name: Multi-Host Deployment (Physical)
on:
  push:
    branches:
      - akirby/multi-host-workflow
  workflow_dispatch:

jobs:
  build-artifact:
    uses: ./.github/workflows/build-artifact.yaml
    permissions:
      packages: write
    secrets: inherit
    with:
      version: 22.04
      build-wheel: true
  deploy:
    runs-on: multi-host
    needs: build-artifact
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: ⬇️ Download Build
        uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ needs.build-artifact.outputs.build-artifact-name }}
      - name: Extract files
        run: tar -xvf ttm_any.tar
      - name: ⬇️ Download Wheel
        uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ needs.build-artifact.outputs.wheel-artifact-name }}
      - name: Capture runner's home directory
        id: capture-home
        run: echo "home=${HOME}" >> $GITHUB_OUTPUT
      - name: Run tests on multiple hosts
        uses: ./.github/actions/docker-run
        timeout-minutes: 120
        env:
          CONTAINER_HOME: "/home/ansible"
        with:
          docker_image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:c2417bb0778b77d3092bd2f4a4c4269123d25b05
          docker_password: ${{ secrets.GITHUB_TOKEN }}
          docker_opts: |
            -e TT_METAL_HOME="${{ github.workspace }}"
            -e PYTHONPATH="${{ github.workspace }}"
            -e PYTHON_ENV_DIR="${{ github.workspace }}/python_env"
            -e LD_LIBRARY_PATH="${{ github.workspace }}/build/lib"
            -e TT_METAL_ENABLE_ERISC_IRAM="1"
            -e GTEST_OUTPUT="xml:${{ github.workspace }}/generated/test_reports/"
            -v ${{ github.workspace }}:${{ github.workspace }}
            -v /dev/hugepages-1G:/dev/hugepages-1G
            -v /etc/mpirun:/etc/mpirun:ro
            -v ${{ steps.capture-home.outputs.home }}/.ssh:${{ steps.capture-home.outputs.home }}/.ssh:ro
            --device /dev/tenstorrent
            --privileged
            --pid=host
          install_wheel: false
          run_args: |
            sleep 10s
            echo "Running mpirun command on multiple hosts"
            cd "${{ github.workspace }}"
            ./create_venv.sh
            source ./python_env/bin/activate
            # mpirun --allow-run-as-root --hostfile /etc/mpirun/hostfile --mca btl_tcp_if_exclude docker0,lo --tag-output hostname
            # mpirun --allow-run-as-root --hostfile /etc/mpirun/hostfile --mca btl_base_warn_component_unused 0 --mca btl tcp,self  --mca btl_tcp_if_include cnx1 --mca oob_tcp_if_include cnx1  --tag-output bash -c "export TT_MESH_ID=0; export TT_HOST_RANK=0; export LD_LIBRARY_PATH=${{ github.workspace }}/build/lib; export TT_METAL_HOME=${{ github.workspace }}; export PYTHONPATH=${{ github.workspace }}; export ARCH_NAME=wormhole_b0; ${{ github.workspace }}/build/test/tt_metal/multi_host_fabric_tests"
            tt-run --rank-binding tests/tt_metal/distributed/config/dual_t3k_rank_bindings.yaml --mpi-args "--hostfile /etc/mpirun/hostfile --mca btl_tcp_if_exclude docker0,lo --tag-output" ./build/test/tt_metal/multi_host_fabric_tests
