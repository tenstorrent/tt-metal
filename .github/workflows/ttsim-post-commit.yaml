name: "[impl] TTSim Unit Tests Impl"

on:
  workflow_call:
    inputs:
      docker-image:
        required: true
        type: string
      build-artifact-name:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string
      ttsim-ref:
        required: false
        type: string
        default: "6a29a2ca053cf30f6540b3af8131398987cd02a5"

jobs:
  ttsim-unit-tests:
    runs-on: tt-ubuntu-2204-small-stable
    name: "TTSim Unit Tests - ${{ matrix.arch }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: wormhole_b0
            build_suffix: release_wh
            soc_desc: wormhole_b0_80_arch.yaml
          - arch: blackhole
            build_suffix: release_bh
            soc_desc: blackhole_140_arch.yaml
    permissions:
      contents: read
    container:
      image: ${{ inputs.docker-image || 'docker-image-unresolved!'}}
      volumes:
        - ${{ github.workspace }}/docker-job:/work
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    env:
      TT_METAL_SIMULATOR_HOME: /work/sim
      TT_METAL_SIMULATOR: /work/sim/libttsim.so
      TT_METAL_SLOW_DISPATCH_MODE: 1
    steps:
      - name: Setup Job
        uses: tenstorrent/tt-metal/.github/actions/setup-job@5b5c6ff5b54025e165d189371cda93d2b9ef6115
        timeout-minutes: 10
        with:
          build-artifact-name: ${{ inputs.build-artifact-name }}
          wheel-artifact-name: ${{ inputs.wheel-artifact-name }}

      - name: Checkout ttsim
        uses: actions/checkout@v4
        with:
          repository: tenstorrent/ttsim
          ref: ${{ inputs.ttsim-ref }}
          path: docker-job/ttsim
          token: ${{ secrets.TTSIM_TOKEN }}

      - name: Build ttsim
        run: |
          cd /work/ttsim/src
          ../scripts/make.py _out/${{ matrix.build_suffix }}/libttsim.so

      - name: Install ttsim
        run: |
          mkdir -p $TT_METAL_SIMULATOR_HOME
          cp /work/ttsim/src/_out/${{ matrix.build_suffix }}/libttsim.so $TT_METAL_SIMULATOR_HOME/
          cp /work/tt_metal/soc_descriptors/${{ matrix.soc_desc }} $TT_METAL_SIMULATOR_HOME/soc_descriptor.yaml

      - name: Run Idle Eth Tests
        timeout-minutes: 5
        run: |
          ./build/test/tt_metal/unit_tests_api --gtest_filter="MeshDeviceFixture.IdleEthTestNocStreamRegs"
          ./build/test/tt_metal/unit_tests_api --gtest_filter="MeshDispatchFixture.IdleEthDRAMLoopbackSingleCore"
          ./build/test/tt_metal/unit_tests_debug_tools --gtest_filter="DPrintMeshFixture.IdleEthTestPrint"
          # BH doesn't work on watcher, triggers: ERROR: decode_and_execute_fence: unsupported fence_mode=0x31
          if [[ "${{ matrix.arch }}" != "blackhole" ]]; then
            # WH works (very long test, by default for erisc runs at least 0x5f5e1000U cycles)
            # ./build/test/tt_metal/unit_tests_debug_tools --gtest_filter="MeshWatcherFixture.TensixTestWatcherPause"
            ./build/test/tt_metal/unit_tests_debug_tools --gtest_filter="MeshWatcherFixture.TestWatcherRingBufferIErisc"
            ./build/test/tt_metal/unit_tests_debug_tools --gtest_filter="MeshWatcherFixture.TestWatcherStackUsage0"
            ./build/test/tt_metal/unit_tests_debug_tools --gtest_filter="MeshWatcherFixture.TestWatcherStackUsage16"
          fi
          ./build/test/tt_metal/unit_tests_dispatch --gtest_filter="MeshDispatchFixture.TensixIdleEthTestSemaphores"
          ./build/test/tt_metal/unit_tests_dispatch --gtest_filter="MeshDispatchFixture.EthTestBlank"
          ./build/test/tt_metal/unit_tests_eth --gtest_filter="BlackholeSingleCardFixture.IdleEthKernelOnIdleErisc0"
          ./build/test/tt_metal/unit_tests_eth --gtest_filter="BlackholeSingleCardFixture.IdleEthKernelOnIdleErisc1"
          ./build/test/tt_metal/unit_tests_eth --gtest_filter="BlackholeSingleCardFixture.IdleEthKernelOnBothIdleEriscs"
