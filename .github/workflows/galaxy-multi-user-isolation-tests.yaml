name: Galaxy Multi-user Isolation Tests
on:
  push:
    branches:
      - main
      - slee/multiusergalaxy
  workflow_dispatch:
    inputs:
      galaxy-multi-user-isolation-tests:
        description: 'Run Galaxy multi-host job'
        required: false
        default: true
        type: boolean

jobs:
  build-artifact:
    uses: ./.github/workflows/build-artifact.yaml
    permissions:
      packages: write
    secrets: inherit
    with:
      version: 22.04
      build-wheel: true
  galaxy-multi-user-isolation-tests:
    needs: build-artifact
    runs-on:
      # A physical, multi-host WH 6U that's in service
      - topology-6u
      - arch-wormhole_b0
      - bare-metal
      - g15glx04
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: ⬇️ Download Build
        uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ needs.build-artifact.outputs.build-artifact-name }}
      - name: Extract files #maybe I dont need this step
        run: tar -xvf ttm_any.tar
      - name: ⬇️ Download Wheel
        uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ needs.build-artifact.outputs.wheel-artifact-name }}
      # - name: Extract Wheel and files
      #   run: |
      #     rm -rf ./docker_artifacts
      #     mkdir -p ./docker_artifacts
      #     tar -xvf ttm_any.tar -C ./docker_artifacts
      #     mv *.whl ./docker_artifacts
      - name: Create Docker Compose file
        run: |
          for i in [1..4]; do
            mkdir -p /home/ubuntu/.cache/tt-metal-cache-$i
            chown $(id -u):$(id -g) /home/ubuntu/.cache/tt-metal-cache-$i
          done
          cat > multi-user-dc.yaml <<EOF
          services:
            tray-1:
              image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:339a22f363ab2750837c81672cee4f1ac813d6ef
              stdin_open: true
              tty: true
              container_name: tray-1
              volumes:
                  - ${{ github.workspace }}:/app/tt-metal
                  - /home/ubuntu/.cache/tt-metal-cache-1:/app/.cache
              entrypoint: ["./.github/scripts/utils/configure-multi-user-container.sh"]
              user: "\${USER_ID}:\${GROUP_ID}"
              working_dir: /app/tt-metal
              environment:
                HOME: /app
                LD_LIBRARY_PATH: /app/tt-metal/build/lib
                PYTHONPATH: /app/tt-metal
                TT_METAL_HOME: /app/tt-metal
                TT_MESH_GRAPH_DESC_PATH: /app/tt-metal/tt_metal/fabric/mesh_graph_descriptors/t3k_mesh_graph_descriptor.yaml
                TT_MULTI_USER_GALAXY: /app/tt-metal/.multi-user-galaxy-docker-files/tray-presence-1.txt
              devices:
                - "/dev/tenstorrent/0:/dev/tenstorrent/0"
                - "/dev/tenstorrent/1:/dev/tenstorrent/1"
                - "/dev/tenstorrent/2:/dev/tenstorrent/2"
                - "/dev/tenstorrent/3:/dev/tenstorrent/3"
                - "/dev/tenstorrent/4:/dev/tenstorrent/4"
                - "/dev/tenstorrent/5:/dev/tenstorrent/5"
                - "/dev/tenstorrent/6:/dev/tenstorrent/6"
                - "/dev/tenstorrent/7:/dev/tenstorrent/7"
            tray-2:
              image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:339a22f363ab2750837c81672cee4f1ac813d6ef
              stdin_open: true
              tty: true
              container_name: tray-2
              volumes:
                  - ${{ github.workspace }}:/app/tt-metal
                  - /home/ubuntu/.cache/tt-metal-cache-2:/app/.cache
              entrypoint: ["./.github/scripts/utils/configure-multi-user-container.sh"]
              user: "\${USER_ID}:\${GROUP_ID}"
              working_dir: /app/tt-metal
              environment:
                HOME: /app
                LD_LIBRARY_PATH: /app/tt-metal/build/lib
                PYTHONPATH: /app/tt-metal
                TT_METAL_HOME: /app/tt-metal
                TT_MESH_GRAPH_DESC_PATH: /app/tt-metal/tt_metal/fabric/mesh_graph_descriptors/t3k_mesh_graph_descriptor.yaml
                TT_MULTI_USER_GALAXY: /app/tt-metal/.multi-user-galaxy-docker-files/tray-presence-2.txt
              devices:
                - "/dev/tenstorrent/8:/dev/tenstorrent/8"
                - "/dev/tenstorrent/9:/dev/tenstorrent/9"
                - "/dev/tenstorrent/10:/dev/tenstorrent/10"
                - "/dev/tenstorrent/11:/dev/tenstorrent/11"
                - "/dev/tenstorrent/12:/dev/tenstorrent/12"
                - "/dev/tenstorrent/13:/dev/tenstorrent/13"
                - "/dev/tenstorrent/14:/dev/tenstorrent/14"
                - "/dev/tenstorrent/15:/dev/tenstorrent/15"
            tray-3:
              image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:339a22f363ab2750837c81672cee4f1ac813d6ef
              stdin_open: true
              tty: true
              container_name: tray-3
              volumes:
                  - ${{ github.workspace }}:/app/tt-metal
                  - /home/ubuntu/.cache/tt-metal-cache-3:/app/.cache
              entrypoint: ["./.github/scripts/utils/configure-multi-user-container.sh"]
              user: "\${USER_ID}:\${GROUP_ID}"
              working_dir: /app/tt-metal
              environment:
                HOME: /app
                LD_LIBRARY_PATH: /app/tt-metal/build/lib
                PYTHONPATH: /app/tt-metal
                TT_METAL_HOME: /app/tt-metal
                TT_MESH_GRAPH_DESC_PATH: /app/tt-metal/tt_metal/fabric/mesh_graph_descriptors/t3k_mesh_graph_descriptor.yaml
                TT_MULTI_USER_GALAXY: /app/tt-metal/.multi-user-galaxy-docker-files/tray-presence-3.txt
              devices:
                - "/dev/tenstorrent/16:/dev/tenstorrent/16"
                - "/dev/tenstorrent/17:/dev/tenstorrent/17"
                - "/dev/tenstorrent/18:/dev/tenstorrent/18"
                - "/dev/tenstorrent/19:/dev/tenstorrent/19"
                - "/dev/tenstorrent/20:/dev/tenstorrent/20"
                - "/dev/tenstorrent/21:/dev/tenstorrent/21"
                - "/dev/tenstorrent/22:/dev/tenstorrent/22"
                - "/dev/tenstorrent/23:/dev/tenstorrent/23"
            tray-4:
              image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:339a22f363ab2750837c81672cee4f1ac813d6ef
              stdin_open: true
              tty: true
              container_name: tray-4
              volumes:
                  - ${{ github.workspace }}:/app/tt-metal
                  - /home/ubuntu/.cache/tt-metal-cache-4:/app/.cache
              entrypoint: ["./.github/scripts/utils/configure-multi-user-container.sh"]
              user: "\${USER_ID}:\${GROUP_ID}"
              working_dir: /app/tt-metal
              environment:
                HOME: /app
                LD_LIBRARY_PATH: /app/tt-metal/build/lib
                PYTHONPATH: /app/tt-metal
                TT_METAL_HOME: /app/tt-metal
                TT_MESH_GRAPH_DESC_PATH: /app/tt-metal/tt_metal/fabric/mesh_graph_descriptors/t3k_mesh_graph_descriptor.yaml
                TT_MULTI_USER_GALAXY: /app/tt-metal/.multi-user-galaxy-docker-files/tray-presence-4.txt
              devices:
                - "/dev/tenstorrent/24:/dev/tenstorrent/24"
                - "/dev/tenstorrent/25:/dev/tenstorrent/25"
                - "/dev/tenstorrent/26:/dev/tenstorrent/26"
                - "/dev/tenstorrent/27:/dev/tenstorrent/27"
                - "/dev/tenstorrent/28:/dev/tenstorrent/28"
                - "/dev/tenstorrent/29:/dev/tenstorrent/29"
                - "/dev/tenstorrent/30:/dev/tenstorrent/30"
                - "/dev/tenstorrent/31:/dev/tenstorrent/31"
          EOF

      - name: Run Docker Compose
        run: |
          TRAY_PODS_DIR= ".multi-user-galaxy-docker-files"
          REQUIRED_PODS=4
          TIMEOUT=300
          
          rm -rf "$TRAY_PODS_DIR"
          mkdir -p "$TRAY_PODS_DIR"

          echo "make folder"

          EPOCH_START=$(date +%s)

          USER_ID=$(id -u) GROUP_ID=$(id -g) docker compose -p multi-user -f multi-user-dc.yaml up -d
          
          # wait for REQUIRED .txt files to appear (with timeout)
          while true; do
            files=( "$TRAY_PODS_DIR"/tray-presence-*.txt )
            count=${#files[@]}
            elapsed=$(( $(date +%s) - EPOCH_START))
            if [ "$count" -ge "$REQUIRED_PODS" ]; then
              break
            fi
            if [ "$elapsed" -ge "$TIMEOUT" ]; then
              echo "Error: Not all $REQUIRED_PODS files appeared within $TIMEOUT seconds (found $count)."
              exit 1
            fi
            sleep 1
          done

          echo "All $REQUIRED_PODS docker containers have created their files (found $count)."

      - name: Run the tests
        run: |
          run_test() {
            testname="$1"
            command="$2"
            pids=()
            for tray in tray-1 tray-2 tray-3 tray-4; do
              cname="multi-user-$tray"
              echo ">>> Running $testname in $cname" 
              (
              docker exec "$cname" bash -c "$command" \
              | sed "s/^/[$cname] /" 
              exit ${PIPESTATUS[0]}
              ) &         
              pids+=($!)
            done

            status=0
            for pid in "${pids[@]}"; do
              if ! wait "$pid"; then
                status=1
              fi
            done

            if [ $status -ne 0 ]; then
              exit 1
            fi
          }

          export -f run_test
          # run_test "test_system_health" "./build/test/tt_metal/tt_fabric/test_system_health --cluster-type T3K"
          run_test "test_minimal_all_gather_async" "pytest -v tests/nightly/t3000/ccl/test_minimal_all_gather_async.py"

      - name: Tear down containers
        if: always()
        run: |
          USER_ID=$(id -u) GROUP_ID=$(id -g) docker compose -p multi-user -f multi-user-dc.yaml down
