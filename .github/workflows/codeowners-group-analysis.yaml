name: CodeOwners Group Analysis

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name to analyze (e.g., feature-branch-name)'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  find-pr:
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.find-pr.outputs.pr-number }}
      pr-exists: ${{ steps.find-pr.outputs.pr-exists }}
    steps:
      - name: Find PR for branch
        id: find-pr
        run: |
          BRANCH="${{ github.event.inputs.branch }}"
          echo "Looking for PR associated with branch: $BRANCH"

          # Use GitHub API to find PR for the branch
          API_URL="https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:$BRANCH&state=open"

          echo "API URL: $API_URL"

          # Get PR data
          PR_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         "$API_URL")

          # Extract PR number
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number // empty')

          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            echo "Found PR #$PR_NUMBER for branch $BRANCH"
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr-exists=true" >> $GITHUB_OUTPUT
          else
            echo "No open PR found for branch $BRANCH"
            echo "pr-number=" >> $GITHUB_OUTPUT
            echo "pr-exists=false" >> $GITHUB_OUTPUT
          fi

  analyze-codeowners:
    needs: find-pr
    if: needs.find-pr.outputs.pr-exists == 'true'
    runs-on: ubuntu-latest
    outputs:
      codeowners-groups: ${{ steps.analyze.outputs.codeowners-groups }}
      codeowners-teams: ${{ steps.analyze.outputs.codeowners-teams }}
      codeowners-individuals: ${{ steps.analyze.outputs.codeowners-individuals }}
      changed-files: ${{ steps.analyze.outputs.changed-files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR changed files
        id: get-files
        run: |
          PR_NUMBER="${{ needs.find-pr.outputs.pr-number }}"

          # Get changed files using GitHub API
          FILES_API="https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files"
          FILES_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                           -H "Accept: application/vnd.github.v3+json" \
                           "$FILES_API")

          # Extract filenames and save to file
          echo "$FILES_DATA" | jq -r '.[].filename' > changed_files.txt

          # Count files and show first few
          FILE_COUNT=$(wc -l < changed_files.txt)
          echo "Found $FILE_COUNT changed files"
          echo "First 10 files:"
          head -10 changed_files.txt

          # Save files list for next step
          {
            echo "changed-files<<EOF"
            cat changed_files.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Analyze CODEOWNERS
        id: analyze
        run: |
          # Run the dedicated Python script for CODEOWNERS analysis
          python3 .github/scripts/codeowners_analysis.py changed_files.txt .github/CODEOWNERS
        # The script writes directly to GITHUB_OUTPUT, so we don't need to capture stdout here

  post-comment:
    needs: [find-pr, analyze-codeowners]
    if: needs.find-pr.outputs.pr-exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create approval requirements comment
        run: |
          PR_NUMBER="${{ needs.find-pr.outputs.pr-number }}"
          TEAMS="${{ needs.analyze-codeowners.outputs.codeowners-teams }}"
          INDIVIDUALS="${{ needs.analyze-codeowners.outputs.codeowners-individuals }}"

          if [ -z "$TEAMS" ] && [ -z "$INDIVIDUALS" ]; then
            COMMENT="## CodeOwners Analysis\n\nNo specific codeowners found for the changed files in this PR.\n\n**Required Approvals:** At least one maintainer approval is required."
          else
            COMMENT="## CodeOwners Group Analysis\n\nThis PR requires approval from **one member of each** of the following groups:\n\n### Required Groups:"

            # Add teams (without @ symbols)
            if [ -n "$TEAMS" ]; then
              IFS=',' read -ra TEAM_ARRAY <<< "$TEAMS"
              for team in "${TEAM_ARRAY[@]}"; do
                # Remove @ prefix and format team name
                clean_team=$(echo "$team" | sed 's/^@//')
                COMMENT="$COMMENT\n- **$clean_team** (Team)"
              done
            fi

            # Add individuals (full names without @ symbols)
            if [ -n "$INDIVIDUALS" ]; then
              IFS=',' read -ra INDIVIDUAL_ARRAY <<< "$INDIVIDUALS"
              for individual in "${INDIVIDUAL_ARRAY[@]}"; do
                COMMENT="$COMMENT\n- **$individual** (Individual)"
              done
            fi

            COMMENT="$COMMENT\n### Approval Rules:\n- ✅ **One approval from each group is sufficient**\n- ✅ Groups can approve in any order\n- ❌ **All members of a group must approve** ❌\n\nThis ensures proper review coverage across different areas while avoiding unnecessary bottlenecks."
          fi

          # Post comment to PR
          COMMENT_API="https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"

          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "$COMMENT_API"

          echo "Posted comment to PR #$PR_NUMBER"
