name: "zzz Smoke tests"

on:
  workflow_call:
    inputs:
      docker-image:
        required: true
        type: string
      package-artifact-name:
        required: true
        type: string
      runner:
        required: true
        type: string
      per-test-timeout:
        required: false
        type: string
        default: "4.0" # TODO: Drop back to 3.5 when https://github.com/tenstorrent/github-ci-infra/issues/876 is resolved.
      product:
        required: true
        type: string # tt-metalium or tt-nn
      upload-coverage:
        required: false
        type: boolean
        default: false

jobs:
  smoke:
    runs-on: >-
      ${{
        (format('tt-ubuntu-2204-{0}-stable', inputs.runner))
      }}
    container:
      image: ${{ (inputs.docker-image && format('harbor.ci.tenstorrent.net/{0}', inputs.docker-image)) || 'docker-image-unresolved!' }}
      env:
        ASAN_OPTIONS: "color=always"
        TSAN_OPTIONS: "color=always"
        UBSAN_OPTIONS: "color=always:print_stacktrace=1:halt_on_error=1"
        LLVM_PROFILE_FILE: "/work/coverage/%p-%m.profraw"
      volumes:
        - /work
        - ${{ (!contains(inputs.runner, 'viommu') && '/dev/hugepages-1G:/dev/hugepages-1G') || '/no_hugepages' }}
      options: --device /dev/tenstorrent
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0
        timeout-minutes: 10
        with:
          name: ${{ inputs.package-artifact-name || 'packages artifact unresolved!' }}
          path: /work/pkgs/

      - name: Install packages
        run: |
          # Ideally only ${{ inputs.product }}-validation, but APT doesn't resolve dependencies from files on disk without being told about them.
          apt install -y ./pkgs/tt-metalium_*.deb ./pkgs/tt-metalium-jit_*.deb ./pkgs/${{ inputs.product }}_*.deb ./pkgs/${{ inputs.product }}-validation_*.deb

      - name: Prepare coverage directory
        run: |
          mkdir -p /work/coverage

      - name: Warmup caches
        timeout-minutes: 2
        env:
          GTEST_COLOR: yes
          LSAN_OPTIONS: suppressions=/usr/share/tt-metalium/lsan.supp
          # TT_METAL_WATCHER: 5
          TT_METAL_WATCHER_TEST_MODE: 1
        run: |
          # Run a single test to warm up caches before the full test suite
          /usr/bin/${{ inputs.product }}-validation-smoke --gtest_filter="MeshDispatchFixture.TensixFailOnDuplicateKernelCreationDataflow" || true

      - name: Clear coverage from warmup
        if: ${{ inputs.upload-coverage }}
        run: |
          rm -f /work/coverage/*.profraw || true

      - name: Run a test
        id: test
        timeout-minutes: 15
        env:
          GTEST_COLOR: yes
          GTEST_OUTPUT: xml:/work/test-reports/
          LSAN_OPTIONS: suppressions=/usr/share/tt-metalium/lsan.supp
          # TT_METAL_WATCHER: 5 TODO(#25305): Re-enable watcher after the race condition is fixed.
          TT_METAL_WATCHER_TEST_MODE: 1
        run: |
          /usr/bin/${{ inputs.product }}-validation-smoke

      - name: Merge LLVM coverage
        if: ${{ inputs.upload-coverage }}
        run: |
          shopt -s nullglob || true
          files=(/work/coverage/*.profraw)
          if [ ${#files[@]} -gt 0 ]; then
            llvm-profdata-17 merge -sparse /work/coverage/*.profraw -o /work/coverage/coverage.profdata
          else
            echo "No .profraw files found; skipping merge"
          fi

      - name: Export LCOV (llvm-cov)
        if: ${{ inputs.upload-coverage }}
        run: |
          if [ -f /work/coverage/coverage.profdata ]; then
            objects=(
              /usr/lib/libtt_metal.so
              /usr/lib/libtt_stl.so
              /usr/lib/_ttnncpp.so
            )
            test_bin="/usr/bin/${{ inputs.product }}-validation-smoke"
            llvm-cov-17 export -format=lcov \
              -instr-profile=/work/coverage/coverage.profdata \
              "$test_bin" "${objects[@]}" > /work/coverage/coverage.info || {
                echo "llvm-cov export failed"; exit 1; }
          else
            echo "coverage.profdata not found; creating empty LCOV file"
            : > /work/coverage/coverage.info
          fi

      - name: Checkout repository for Codecov mapping
        uses: actions/checkout@v4
        if: ${{ inputs.upload-coverage }}
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ !cancelled() && inputs.upload-coverage && (
              (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
              || (github.event_name == 'push' && github.ref_name == 'main')
            ) }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: /work/coverage/coverage.info
          flags: ${{ inputs.product }}
          name: smoke-${{ inputs.product }}
          fail_ci_if_error: true
          verbose: true

      - name: workaround
        if: ${{ !cancelled() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        run: |
          # The test-reporting action runs git ls-files with no way to opt-out.
          # Give it a dummy repo so it doesn't fail.
          git init
      - name: Test Report
        # Because of https://github.com/tenstorrent/tt-metal/issues/19413, only run for our repo
        # for now. No forks!
        if: ${{ !cancelled() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
        uses: phoenix-actions/test-reporting@f957cd93fc2d848d556fa0d03c57bc79127b6b5e # v15
        with:
          name: ${{ inputs.product }} ${{ inputs.runner }} smoke tests (${{ github.workflow }}, attempt ${{ github.run_attempt }})
          path: /work/test-reports/*.xml
          reporter: jest-junit
          working-directory: /work

      - uses: tenstorrent/tt-metal/.github/actions/upload-artifact-with-job-uuid@main
        if: ${{ !cancelled() }}
        timeout-minutes: 10
        with:
          path: /work/test-reports/
          prefix: "test_reports_"

      - name: Check for slow tests
        uses: tenstorrent/tt-metal/.github/actions/detect-slow-tests@main
        with:
          threshold: ${{ inputs.per-test-timeout }}
