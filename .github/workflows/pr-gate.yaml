name: PR Gate
# This pipeline is the minimum bar a PR must pass before it can be merged.
# It is intended to be fast and lightweight to trigger automatically on every
# change in every PR and provide quick feedback without overloading the CI.

# Requirements for all jobs in this workflow:
# - A new job must cancel a previously scheduled/running job.
#   PRs only care about the latest commit and multiple pushes may happen in quick succession.
# - End-to-end (excluding wait times for runners) must be less than 5mins.
#   This includes the cost of checking out the code, preparing a runner, etc.
# - Individual test cases must be less than 1s.

run-name: >-
  ${{ github.event_name == 'merge_group' && github.event.action == 'destroyed' && github.event.reason == 'merged' && format('[Merge Queue] 🎯 Merged {0}', github.sha) ||
      github.event_name == 'merge_group' && github.event.action == 'destroyed' && github.event.reason == 'dequeued' && format('[Merge Queue] ↩️ Dequeued {0}', github.sha) ||
      github.event_name == 'merge_group' && github.event.action == 'destroyed' && github.event.reason == 'invalidated' && format('[Merge Queue] 💔 Invalidated {0}', github.sha) ||
      github.event_name == 'merge_group' && github.event.action == 'destroyed' && format('[Merge Queue] {0} {1}', github.event.reason, github.sha) ||
      github.event_name == 'merge_group' && format('[Merge Queue] 💫 Processing {0}: {1}', github.actor, github.sha) ||
      '' }}

on:
  workflow_dispatch:
    inputs:
      build-type:
        required: false
        default: ASan
        type: choice
        options:
          - Release
          - Debug
          - RelWithDebInfo
          - ASan
          - TSan
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  merge_group:
    types:
      - checks_requested
      - destroyed
  push:
    branches:
      - main # Builds on main will populate the shared ccache to speed up builds on branches

concurrency:
  # Groups to control cancelling of obsolete runs.
  # main (or any protected branch): run_id (ie: never cancel other jobs)
  # PRs: PR #
  # Merge Queue: branch name; will be paired with the 'destroyed' trigger to cause a cancel when it leaves or moves in the queue.
  #              See https://github.com/orgs/community/discussions/137976#discussioncomment-14004793
  # All others: branch name (ie: one run per branch)
  group: >-
    ${{ github.workflow }}-
    ${{ (github.ref_protected && github.run_id)
        || github.event.pull_request.number
        || github.ref }}-
    ${{ inputs.build-type || 'default' }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  checks: write
  packages: write

jobs:
  asan-build:
    if: github.event.action != 'destroyed' && (github.event_name != 'pull_request' || !github.event.pull_request.draft)
    uses: ./.github/workflows/build-artifact.yaml
    permissions:
      packages: write
    secrets: inherit
    with:
      version: "22.04"
      toolchain: cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake
      build-type: ${{ inputs.build-type || 'ASan' }}
      publish-artifact: false
      skip-tt-train: true

  find-changed-files:
    if: github.event.action != 'destroyed' && (github.event_name != 'pull_request' || !github.event.pull_request.draft)
    runs-on: ubuntu-latest
    outputs:
      cmake-changed: ${{ steps.find-changes.outputs.cmake-changed }}
      tt-metalium-changed: ${{ steps.find-changes.outputs.tt-metalium-changed }}
      tt-nn-changed: ${{ steps.find-changes.outputs.tt-nn-changed }}
      tt-metalium-or-tt-nn-tests-changed: ${{ steps.find-changes.outputs.tt-metalium-or-tt-nn-tests-changed }}
    steps:
      - id: find-changes
        uses: tenstorrent/tt-metal/.github/actions/find-changed-files@main

  metalium-smoke-tests:
    needs: [ asan-build, find-changed-files ]
    if: ${{
        github.ref_name == 'main' ||
        needs.find-changed-files.outputs.cmake-changed == 'true' ||
        needs.find-changed-files.outputs.tt-metalium-changed == 'true' ||
        needs.find-changed-files.outputs.tt-metalium-or-tt-nn-tests-changed == 'true'
      }}
    strategy:
      fail-fast: false
      matrix:
        platform: [
          "N150-viommu",
          "P150b-viommu",
        ]
    uses: ./.github/workflows/smoke.yaml
    with:
      docker-image: ${{ needs.asan-build.outputs.dev-docker-image }}
      package-artifact-name: ${{ needs.asan-build.outputs.packages-artifact-name }}
      runner: ${{ matrix.platform }}
      product: tt-metalium

  ttnn-smoke-tests:
    needs: [ asan-build, find-changed-files ]
    if: ${{
        github.ref_name == 'main' ||
        needs.find-changed-files.outputs.cmake-changed == 'true' ||
        needs.find-changed-files.outputs.tt-metalium-changed == 'true' ||
        needs.find-changed-files.outputs.tt-nn-changed == 'true' ||
        needs.find-changed-files.outputs.tt-metalium-or-tt-nn-tests-changed == 'true'
      }}
    strategy:
      fail-fast: false
      matrix:
        platform: [
          "N150-viommu",
          "P150b-viommu",
        ]
    uses: ./.github/workflows/smoke.yaml
    with:
      docker-image: ${{ needs.asan-build.outputs.dev-docker-image }}
      package-artifact-name: ${{ needs.asan-build.outputs.packages-artifact-name }}
      runner: ${{ matrix.platform }}
      product: tt-nn

  build:
    if: github.event.action != 'destroyed' && (github.event_name != 'pull_request' || !github.event.pull_request.draft)
    uses: ./.github/workflows/build-artifact.yaml
    permissions:
      packages: write
    secrets: inherit
    with:
      version: "22.04"
      toolchain: cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake
      # Cannot do a Sanitizer build as that's not compatible with the downstream test.
      # Also cannot be Release if the other build was chosen to be Release as the GitHub artifact
      # name clashes.
      build-type: ${{ (inputs.build-type == 'Release' && 'Debug') || 'Release' }}
      publish-artifact: false
      skip-tt-train: true
      distributed: false

  metalium-examples:
    needs: [ build, find-changed-files ]
    if: ${{
        github.ref_name == 'main' ||
        needs.find-changed-files.outputs.cmake-changed == 'true' ||
        needs.find-changed-files.outputs.tt-metalium-changed == 'true'
      }}
    strategy:
      fail-fast: false
      matrix:
        platform: [
          "N150-viommu",
        ]
    uses: ./.github/workflows/sdk-examples.yaml
    with:
      docker-image: ${{ needs.build.outputs.basic-dev-docker-image }}
      package-artifact-name: ${{ needs.build.outputs.packages-artifact-name }}
      runner: ${{ matrix.platform }}
      product: tt-metalium

  docker-image:
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    uses: ./.github/workflows/build-docker-artifact.yaml
    secrets: inherit
    with:
      distro: ubuntu
      version: 22.04
      architecture: amd64

  # A lightweight ClangTidy scan.  It does not detect all issues, but is cheap
  # enough to run during PRs without bringing infra to a grinding halt.
  # A proper scan is run in Merge Gate to ensure only clean code lands.
  clang-tidy-light:
    needs: [docker-image]
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    runs-on: ubuntu-latest
    container: ${{ needs.docker-image.outputs.ci-build-tag }}
    permissions:
      pull-requests: write
      contents: write # to allow auto-closing conversations
    steps:
    - name: Change ownership of /github/home
      run: sudo chown -R $(whoami) /github/home # Thanks GH...
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
        submodules: "recursive"
    - name: Set safe directory for Git
      run: git config --global --add safe.directory $GITHUB_WORKSPACE
    - name: Fetch base branch
      run: |
        git remote add upstream "https://github.com/${{ github.event.pull_request.base.repo.full_name }}"
        git fetch --no-tags upstream "${{ github.event.pull_request.base.ref }}"
    - name: Install clang-tidy
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y clang-tidy-20 python3.11 python3.11-venv python3.11-dev
        sudo ln -s $(which clang-tidy-20) /usr/local/bin/clang-tidy
        pip install pyyaml # Needed for clang-tidy-diff-20.py
    - name: Prepare compile_commands.json
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON -DTT_METAL_BUILD_TESTS=ON -DTTNN_BUILD_TESTS=ON -DTT_UNITY_BUILDS=OFF -DCMAKE_TOOLCHAIN_FILE=cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake
        cmake --build build --target all_generated_files
    - name: 'Install jq'
      uses: dcarbone/install-jq-action@v2
    - name: Create results directory
      run: |
        mkdir clang-tidy-result
    - name: Analyze
      timeout-minutes: 60 # Big PRs will have a LOT to scan, but most should be well under this.
      shell: bash
      run: |
        set -euo pipefail

        # Find all touched files present in compile_commands.json
        # This is not as simple as filtering non-code files, as some code (eg: Kernels) are C++ code that
        # is not built at this level, and thus clang-tidy will be unable to process them.
        PREFIX=$(pwd)
        jq --arg prefix "$PREFIX/" -r '.[].file | sub("^" + $prefix; "")' build/compile_commands.json > relative_files_in_build.txt
        git diff --name-only "$(git merge-base HEAD "upstream/${{ github.event.pull_request.base.ref }}")..." > changed_files.txt
        grep -F -f relative_files_in_build.txt changed_files.txt > common_files.txt || true

        # Exit if there are no modified files known to CMake
        [[ -s common_files.txt ]] || {
          echo "No files to analyze"
          exit 0
        }

        # Analyze the relevant diffs of the relevant files
        git diff "$(git merge-base HEAD "upstream/${{ github.event.pull_request.base.ref }}")" -- $(cat common_files.txt) > filtered_changes.diff
        clang-tidy-diff-20.py -p1 -path build  -export-fixes clang-tidy-result/fixes.yml -j$(nproc) < filtered_changes.diff

        # TODO: Find a way to fail THIS step if there's some USEFUL issues detected.
        #       For now disable it b/c it fails if it finds things in non-user code and/or NOLINT's.
        # # Draw attention to this step (make it an error) if there are fixes to be addressed.
        # [[ -s clang-tidy-result/fixes.yml ]] && exit 42
    - name: Run clang-tidy-pr-comments action
      if: ${{ !cancelled() }}
      uses: platisd/clang-tidy-pr-comments@28cfb84edafa771c044bde7e4a2a3fae57463818 # v1.8.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        clang_tidy_fixes: clang-tidy-result/fixes.yml
        request_changes: false # TODO: consider enabling this?
        suggestions_per_comment: 10 # arbitrary limit toavoid GH API timeouts
        python_path: python3 # Pip fails if the action attempts to install its own Python; Sidestep that.
        auto_resolve_conversations: true # NOTE: only resolves when ALL are fixed.

  # GitHub has so many design limitations it's not even funny.
  # This job is purely so we can capture the essence of the workflow as a whole in our status checks.
  workflow-status:
    name: PR Gate Status
    # Force this job to run so GH can 'see' it, provided some other job has actually run.
    # Otherwise if the entire workflow has been skipped (eg: the PR was in Draft), then this will
    # report FAILED instead of SKIPPED.
    if: >-
      ${{
        always() &&
        contains(join(needs.*.result, ','), 'success') ||
        contains(join(needs.*.result, ','), 'failure')
      }}
    needs: [asan-build, metalium-smoke-tests, ttnn-smoke-tests, build, metalium-examples, clang-tidy-light]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs passed
        uses: tenstorrent/tt-metal/.github/actions/workflow-status@main
        with:
          required-jobs: "asan-build, build"
          optional-jobs: "metalium-smoke-tests, ttnn-smoke-tests, metalium-examples"
        env:
          NEEDS_CONTEXT: '${{ toJSON(needs) }}'
