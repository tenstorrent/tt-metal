name: PR Gate
# This pipeline is the minimum bar a PR must pass before it can be merged.
# It is intended to be fast and lightweight to trigger automatically on every
# change in every PR and provide quick feedback without overloading the CI.

# Requirements for all jobs in this workflow:
# - A new job must cancel a previously scheduled/running job.
#   PRs only care about the latest commit and multiple pushes may happen in quick succession.
# - End-to-end (excluding wait times for runners) must be less than 5mins.
#   This includes the cost of checking out the code, preparing a runner, etc.
# - Individual test cases must be less than 1s.

run-name: >-
  ${{ github.event_name == 'merge_group' && github.event.action == 'destroyed' && github.event.reason == 'merged' && format('[Merge Queue] 🎯 Merged {0}', github.sha) ||
      github.event_name == 'merge_group' && github.event.action == 'destroyed' && github.event.reason == 'dequeued' && format('[Merge Queue] ↩️ Dequeued {0}', github.sha) ||
      github.event_name == 'merge_group' && github.event.action == 'destroyed' && github.event.reason == 'invalidated' && format('[Merge Queue] 💔 Invalidated {0}', github.sha) ||
      github.event_name == 'merge_group' && github.event.action == 'destroyed' && format('[Merge Queue] {0} {1}', github.event.reason, github.sha) ||
      github.event_name == 'merge_group' && format('[Merge Queue] 💫 Processing {0}: {1}', github.actor, github.sha) ||
      '' }}


on:
  push:
    branches:
      - blozano-house-cleaning-jj-test # I test

concurrency:
  # Groups to control cancelling of obsolete runs.
  # main (or any protected branch): run_id (ie: never cancel other jobs)
  # PRs: PR #
  # Merge Queue: branch name; will be paired with the 'destroyed' trigger to cause a cancel when it leaves or moves in the queue.
  #              See https://github.com/orgs/community/discussions/137976#discussioncomment-14004793
  # All others: branch name (ie: one run per branch)
  group: >-
    ${{ github.workflow }}-
    ${{ (github.ref_protected && github.run_id)
        || github.event.pull_request.number
        || github.ref }}-
    ${{ inputs.build-type || 'default' }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  checks: write
  packages: write

jobs:

  find-changed-files:
    if: github.event.action != 'destroyed' && (github.event_name != 'pull_request' || !github.event.pull_request.draft)
    runs-on: ubuntu-latest
    outputs:
      cmake-changed: ${{ steps.find-changes.outputs.cmake-changed }}
      tt-metalium-changed: ${{ steps.find-changes.outputs.tt-metalium-changed }}
      tt-nn-changed: ${{ steps.find-changes.outputs.tt-nn-changed }}
      tt-metalium-or-tt-nn-tests-changed: ${{ steps.find-changes.outputs.tt-metalium-or-tt-nn-tests-changed }}
      model-charts-changed: ${{ steps.find-changes.outputs.model-charts-changed }}
    steps:
      - id: find-changes
        uses: tenstorrent/tt-metal/.github/actions/find-changed-files@main

  build:
    if: github.event.action != 'destroyed' && (github.event_name != 'pull_request' || !github.event.pull_request.draft)
    uses: ./.github/workflows/build-artifact.yaml
    permissions:
      packages: write
    secrets: inherit
    with:
      version: "22.04"
      toolchain: cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake
      # Cannot do a Sanitizer build as that's not compatible with the downstream test.
      # Also cannot be Release if the other build was chosen to be Release as the GitHub artifact
      # name clashes.
      build-type: ${{ (inputs.build-type == 'Release' && 'Debug') || 'Release' }}
      build-wheel: true
      publish-artifact: false
      skip-tt-train: true
      distributed: false
      ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || '' }}

  ttsim-integration-tests:
    needs: [ build, find-changed-files ]
    strategy:
      fail-fast: false
    uses: ./.github/workflows/ttsim.yaml
    secrets: inherit
    with:
      basic-docker-image: ${{ needs.build.outputs.basic-dev-docker-image }}
      test-docker-image: ${{ needs.build.outputs.ci-test-docker-image }}
      package-artifact-name: ${{ needs.build.outputs.packages-artifact-name }}
      wheel-artifact-name: ${{ needs.build.outputs.wheel-artifact-name }}
