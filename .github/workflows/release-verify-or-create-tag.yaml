name: Verify/create new release tag

on:
  workflow_call:
    inputs:
      fetch_depth:
        description: "Commit depth to checkout to scan for previous release tags"
        default: 0
        type: number
      bump_each_commit:
        description: "Bump each commit as a patch version"
        default: true
        type: boolean
      tag-type:
        description: "Type of tag to create: 'rc' for release candidate, 'dev' for dev development, or '' for normal release"
        default: ""
        type: string
      dry-run:
        description: "If true, do not upload tag."
        default: false
        type: boolean
    outputs:
      version:
        description: "New version"
        value: ${{ jobs.verify-create-new-tag.outputs.version }}

jobs:
  verify-create-new-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-tag-version.outputs.version }}
    env:
      GITHUB_TOKEN: ${{ secrets.TT_METAL_RELEASE_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch_depth }}
          fetch-tags: true
          ref: stable

      - name: Get latest semver tag
        id: get-latest-semver
        run: |
          # Get all tags matching exact semver format v{number}.{number}.{number} excluding any with dashes
          latest_semver=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v '-' | sort -V | tail -1)
          if [ -z "$latest_semver" ]; then
            echo "No semver tags found, using v0.0.0"
            latest_semver="v0.0.0"
          fi
          echo "Latest semver tag: $latest_semver"
          echo "latest_semver=$latest_semver" >> "$GITHUB_OUTPUT"

      - name: Analyze commits for version bump
        id: analyze-commits
        run: |
          latest_tag="${{ steps.get-latest-semver.outputs.latest_semver }}"
          echo "Analyzing commits since $latest_tag"

          # Get commit messages since the latest tag
          if [ "$latest_tag" = "v0.0.0" ]; then
            # If no previous tag, analyze all commits
            commits=$(git log --oneline --pretty=format:"%s")
          else
            # Get commits since the latest tag
            commits=$(git log ${latest_tag}..HEAD --oneline --pretty=format:"%s")
          fi

          # Check for version bump indicators
          bump_type="none"

          # Check for MAJOR version indicators
          if echo "$commits" | grep "(MAJOR)"; then
            bump_type="major"
            echo "Found MAJOR version indicators"

          # Check for MINOR version indicators
          elif echo "$commits" | grep "(MINOR)"; then
            bump_type="minor"
            echo "Found MINOR version indicators"

          # Check for PATCH version indicators
          elif echo "$commits" | grep "(PATCH)"; then
            bump_type="patch"
            echo "Found PATCH version indicators"
          fi


          echo "Determined bump type: $bump_type"
          echo "bump_type=$bump_type" >> "$GITHUB_OUTPUT"

      - name: Calculate new version
        id: calculate-version
        run: |
          latest_tag="${{ steps.get-latest-semver.outputs.latest_semver }}"
          bump_type="${{ steps.analyze-commits.outputs.bump_type }}"
          tag_type="${{ inputs.tag-type }}"

          if [ "$tag_type" = "dev" ]; then
            echo "Dev tag type - ignoring version bump, using latest version"
            echo "new_version=$latest_tag" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$bump_type" = "none" ]; then
            echo "No version bump needed - no relevant commit indicators found"
            echo "new_version=$latest_tag" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Extract version numbers (remove 'v' prefix)
          version_no_v=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version_no_v"

          echo "Current version: $major.$minor.$patch"
          echo "Bump type: $bump_type"

          # Calculate new version based on bump type
          case $bump_type in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          new_version="v$major.$minor.$patch"
          echo "New calculated version: $new_version"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Get tag version
        id: get-tag-version
        run: |
            baseVersion=${{ steps.calculate-version.outputs.new_version }}
            tagType="${{ inputs.tag-type }}"
            if [ "$tagType" = "rc" ]; then
              currentNumberRCs=$(git tag | grep "$baseVersion"-rc | wc -l)
              newNumber=$(($currentNumberRCs+1))
              version="$baseVersion-rc$newNumber"
            elif [ "$tagType" = "dev" ]; then
              dateInt=$(date +%Y%m%d)
              version="$baseVersion-dev$dateInt"
            else
              version="$baseVersion"
            fi
            echo "version=$version" >> "$GITHUB_OUTPUT"
            echo "$version"

      - name: Create tag
        if: ${{ !inputs.dry-run }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.TT_METAL_RELEASE_TOKEN }}
          script: |
            const owner = "${{ github.repository_owner }}";
            const repo = "${{ github.repository }}".split('/')[1];
            const version = "${{ steps.get-tag-version.outputs.version }}";
            const sha = "${{ github.sha }}";

            console.log(`Checking for existing tag ${version} in ${owner}/${repo} at sha ${sha}...`);

            async function getRefOrNull() {
              try {
                const { data } = await github.rest.git.getRef({
                  owner, repo, ref: `tags/${version}`,
                });
                return data; // { ref, node_id, url, object: { sha, type, url } }
              } catch (e) {
                if (e.response.status === 404) return null;
                core.error(`getRef failed: ${e.response.status} ${e.response.data.message}`);
                throw e;
              }
            }

            const existingRef = await getRefOrNull();

            if(!existingRef) {
              console.log(`Tag ${version} does not exist, creating it...`);
              const tag = await github.rest.git.createTag({
                  owner: owner,
                  repo: repo,
                  tag: version,
                  message: `Release for ${version}`,
                  object: sha,
                  type: "commit",
                  tagger: {
                    name: "Tenstorrent Inc.",
                    email: "info@tenstorrent.com",
                  }
                });
                console.log("Created tag:", tag.data);
                const ref = await github.rest.git.createRef({
                  owner: owner,
                  repo: repo,
                  ref: `refs/tags/${version}`,
                  sha: tag.data.sha,
                });
                console.log("Created ref:", ref.data);
            } else {
              console.log(`Tag ${version} already exists at sha ${existingRef.object.sha}, not creating it again.`);
              const currentSha = existingRef.object?.sha;
              if(currentSha === sha) {
                console.log(`Tag ${version} already exists at the current commit sha ${sha}, all good.`);
              } else {
                console.warn(`Tag ${version} already exists at a different commit sha ${currentSha} than the current commit sha ${sha}.`);
                await github.rest.git.updateRef({
                  owner: owner,
                  repo: repo,
                  ref: `tags/${version}`,
                  sha: sha,
                  force: true,
                });
              }
            }
