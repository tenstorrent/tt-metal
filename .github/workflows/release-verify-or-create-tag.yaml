name: Verify/create new release tag

on:
  workflow_call:
    inputs:
      fetch_depth:
        description: "Commit depth to checkout to scan for previous release tags"
        default: 0
        type: number
      bump_each_commit:
        description: "Bump each commit as a patch version"
        default: true
        type: boolean
      tag-type:
        description: "Type of tag to create: 'rc' for release candidate, 'dev' for dev development, or '' for normal release"
        default: ""
        type: string
      dry-run:
        description: "If true, do not upload tag."
        default: false
        type: boolean
    outputs:
      version:
        description: "New version"
        value: ${{ jobs.verify-create-new-tag.outputs.version }}

jobs:
  verify-create-new-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate-version.outputs.final_version }}
    env:
      GITHUB_TOKEN: ${{ secrets.TT_METAL_RELEASE_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch_depth }}
          fetch-tags: true
          ref: stable

      - name: Calculate version
        id: calculate-version
        uses: tenstorrent/tt-metal/.github/actions/calculate-version@main
        with:
          tag-type: ${{ inputs.tag-type }}



      - name: Create tag
        if: ${{ !inputs.dry-run }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.TT_METAL_RELEASE_TOKEN }}
          script: |
            const owner = "${{ github.repository_owner }}";
            const repo = "${{ github.repository }}".split('/')[1];
            const version = "${{ steps.calculate-version.outputs.final_version }}";
            const sha = "${{ github.sha }}";

            console.log(`Checking for existing tag ${version} in ${owner}/${repo} at sha ${sha}...`);

            async function getRefOrNull() {
              try {
                const { data } = await github.rest.git.getRef({
                  owner, repo, ref: `tags/${version}`,
                });
                return data; // { ref, node_id, url, object: { sha, type, url } }
              } catch (e) {
                if (e.response.status === 404) return null;
                core.error(`getRef failed: ${e.response.status} ${e.response.data.message}`);
                throw e;
              }
            }

            const existingRef = await getRefOrNull();

            if(!existingRef) {
              console.log(`Tag ${version} does not exist, creating it...`);
              const tag = await github.rest.git.createTag({
                  owner: owner,
                  repo: repo,
                  tag: version,
                  message: `Release for ${version}`,
                  object: sha,
                  type: "commit",
                  tagger: {
                    name: "Tenstorrent Inc.",
                    email: "info@tenstorrent.com",
                  }
                });
                console.log("Created tag:", tag.data);
                const ref = await github.rest.git.createRef({
                  owner: owner,
                  repo: repo,
                  ref: `refs/tags/${version}`,
                  sha: tag.data.sha,
                });
                console.log("Created ref:", ref.data);
            } else {
              console.log(`Tag ${version} already exists at sha ${existingRef.object.sha}, not creating it again.`);
              const currentSha = existingRef.object?.sha;
              if(currentSha === sha) {
                console.log(`Tag ${version} already exists at the current commit sha ${sha}, all good.`);
              } else {
                console.warn(`Tag ${version} already exists at a different commit sha ${currentSha} than the current commit sha ${sha}.`);
                await github.rest.git.updateRef({
                  owner: owner,
                  repo: repo,
                  ref: `tags/${version}`,
                  sha: sha,
                  force: true,
                });
              }
            }
