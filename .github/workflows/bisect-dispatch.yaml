name: "Git bisect dispatch"

on:
  workflow_dispatch:
    inputs:
      arch:
        required: true
        type: choice
        options:
          - wormhole_b0
          - blackhole
      tracy:
        required: true
        type: boolean
        default: false
        description: "Build with tracy enabled"
      nd-mode:
        required: true
        type: boolean
        default: false
        description: "Enable non-deterministic detection mode"
      runner-label:
        required: true
        type: choice
        options:
          - N150
          - N300
          - P150
          - config-t3000
          - config-tg
          - topology-6u
          - config-t3000
        description: "Runner Type Label"
      good-commit:
        required: true
        type: string
      bad-commit:
        required: true
        type: string
      command:
        required: true
        type: string
      timeout:
        required: true
        type: string
        description: "Timeout for one iteration (eg: 5m, 1h)"
      retries:
        required: false
        type: string
        default: "3"
        description: "Number of retries (default 3)"
      download-artifacts:
        required: false
        type: boolean
        default: true
        description: "Download artifacts from GitHub for each commit (requires gh cli to be authenticated)"

permissions:
  actions: write
  contents: write

run-name: "Bisect on ${{ inputs.runner-label }}"
jobs:
  test-dispatch:
    timeout-minutes: 1440
    runs-on: >-
      ${{
        fromJSON(format('["{0}", "in-service", "cloud-virtual-machine"]', inputs.runner-label))
        || format('tt-ubuntu-2204-{0}-viommu-stable', inputs.runner-label)
      }}
    container:
      image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:latest
      env:
        GH_TOKEN: ${{ github.token }}
        ARCH_NAME: ${{ inputs.arch }}
        LOGURU_LEVEL: DEBUG
        PYTHONPATH: /work
        LD_LIBRARY_PATH: /work/build/lib
        GTEST_OUTPUT: xml:/work/generated/test_reports/
        TT_METAL_HOME: /work
        PYTHONFAULTHANDLER: 1       # prints Python stack trace on segfault
        PYTHONMALLOC: debug         # adds checks, helps catch memory issues
        CCACHE_REMOTE_ONLY: "true"
        CCACHE_TEMPDIR: /tmp/ccache
        CARGO_HOME: /tmp/.cargo
        TT_FROM_PRECOMPILED_DIR: /work
        # TODO: Revisit the addition of these env vars https://github.com/tenstorrent/tt-metal/issues/20161
        TRACY_NO_INVARIANT_CHECK: 1
        TRACY_NO_ISA_EXTENSIONS: 1
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /home/ubuntu/.ccache-ci:/github/home/.ccache # HOME is hardcoded for no clear reason: https://github.com/actions/runner/issues/863
        - /mnt/MLPerf:/mnt/MLPerf:ro
      options: >
        --device /dev/tenstorrent
        --group-add 1457
        --tmpfs /tmp
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: Check Redis credentials
        # Failing internal jobs draws attention immediately so we can fix them and make them fast.
        # Forks will never have secrets; don't fail the job for them, they'll just run slower
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        run: |
          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then
            echo "Redis password is missing. Did you forget 'secrets: inherit'?"
            exit 1
          fi
          # Conditionally set this here so that it remains unset on forks, otherwise it resolves an invalid URL and the job fails
          CCACHE_REMOTE_STORAGE="redis://${{ vars.REDIS_USER }}:${{ secrets.REDIS_PASSWORD }}@${{ vars.REDIS_HOST }}:${{ vars.REDIS_PORT }}|read-only=${{ vars.REDIS_IS_READONLY }}"
          echo "CCACHE_REMOTE_STORAGE=${CCACHE_REMOTE_STORAGE}" >> $GITHUB_ENV
          echo "CCACHE_REMOTE_STORAGE: ${CCACHE_REMOTE_STORAGE}"

      - name: ⬇️  Setup Job
        uses: tenstorrent/tt-metal/.github/actions/setup-job@5b5c6ff5b54025e165d189371cda93d2b9ef6115
        timeout-minutes: 10
        with:
          fetch-depth: 0

      - name: 🔧 Setup GitHub CLI and jq
        if: ${{ inputs.download-artifacts == true }}
        run: |
          echo "Checking GitHub CLI, jq, and zstd installation..."

          # Check and install GitHub CLI
          if ! command -v gh >/dev/null 2>&1; then
            echo "Installing GitHub CLI 2.81.0..."
            apt-get update
            wget -O gh_2.81.0_linux_amd64.deb https://github.com/cli/cli/releases/download/v2.81.0/gh_2.81.0_linux_amd64.deb
            apt-get install -y --no-install-recommends ./gh_2.81.0_linux_amd64.deb
            rm -f gh_2.81.0_linux_amd64.deb
            echo "GitHub CLI 2.81.0 installed successfully"
          else
            echo "GitHub CLI is already installed"
          fi

          # Check and install jq and zstd
          if ! command -v jq >/dev/null 2>&1 || ! command -v zstd >/dev/null 2>&1; then
            echo "Installing jq and zstd..."
            apt-get update
            apt-get install -y --no-install-recommends jq zstd
            echo "jq and zstd installed successfully"
          else
            echo "jq and zstd are already installed"
          fi

          # Verify installations
          echo "Verifying installations:"
          gh --version
          jq --version
          zstd --version

          # Check GitHub CLI authentication (GH_TOKEN is provided via env)
          echo "Checking GitHub CLI authentication status:"
          gh auth status || echo "WARNING: Authentication check failed"

          echo "Testing gh CLI with current repository:"
          echo "Repository: $(gh repo view --repo tenstorrent/tt-metal --json nameWithOwner --jq .nameWithOwner 2>/dev/null || echo 'Failed to get repo info')"
        shell: bash

      - name: Run Git Bisect
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          GIT_COMMITTER_NAME: "GitHub Actions"
          GIT_COMMITTER_EMAIL: "actions@github.com"
        run: |
          set -euo pipefail
          trap 'rm -rf ./build_bisect' EXIT
          mkdir -p ./build_bisect
          cp ./tests/scripts/tt_bisect.sh ./build_bisect/
          cp ./tests/scripts/download_artifacts.sh ./build_bisect/
          chmod +x ./build_bisect/tt_bisect.sh
          chmod +x ./build_bisect/download_artifacts.sh
          ./build_bisect/tt_bisect.sh -t ${{ inputs.timeout }} -f '${{ inputs.command }}' -b ${{ inputs.bad-commit }} -g ${{ inputs.good-commit }} ${{ inputs.tracy == true && '-p' || '' }} -r ${{ inputs.retries }} ${{ inputs.nd-mode == true && '-n' || '' }} ${{ inputs.download-artifacts == true && '-a' || '' }}

      - name: Upload ND results CSV
        if: ${{ hashFiles('docker-job/bisect_nd_results.csv') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: bisect-nd-results
          path: docker-job/bisect_nd_results.csv
          if-no-files-found: ignore
