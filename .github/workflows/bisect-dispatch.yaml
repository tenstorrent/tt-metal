name: "Git bisect dispatch"

on:
  workflow_dispatch:
    inputs:
      arch:
        required: true
        type: choice
        options:
          - wormhole_b0
          - blackhole
      tracy:
        required: true
        type: boolean
        default: false
        description: "Build with tracy enabled"
      build-wheel:
        required: true
        type: boolean
        default: false
        description: "Build Python Wheel"
      runner-label:
        required: true
        type: choice
        options:
          - N150
          - N300
          - P150
          - config-t3000
          - config-tg
        description: "Runner Type Label"
      extra-label:
        required: true
        type: string
        default: "in-service"
        description: "Secondary tag to filter runners"
      good-commit:
        required: true
        type: string
      bad-commit:
        required: true
        type: string
      command:
        required: true
        type: string
      timeout:
        required: true
        type: string
        description: "Timeout for one iteration (eg: 5m, 1h)"

run-name: "Bisect on ${{ inputs.runner-label }}"
jobs:
  test-dispatch:
    timeout-minutes: 1440
    env:
      ARCH_NAME: ${{ inputs.arch }}
    runs-on:
      - ${{ inputs.runner-label }}
      - ${{ inputs.extra-label }}
    container:
      image: ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-ci-build-amd64:latest
      env:
        CCACHE_REMOTE_ONLY: "true"
        CCACHE_TEMPDIR: /tmp/ccache
        CARGO_HOME: /tmp/.cargo
        TT_FROM_PRECOMPILED_DIR: /work
        ARCH_NAME: ${{ inputs.arch }}
        LOGURU_LEVEL: INFO
        PYTHONPATH: /work
        LD_LIBRARY_PATH: /work/build/lib
        GTEST_OUTPUT: xml:/work/generated/test_reports/
        TT_METAL_SLOW_DISPATCH_MODE: 1
        TT_METAL_HOME: /work
        TRACY_NO_INVARIANT_CHECK: 1
        TRACY_NO_ISA_EXTENSIONS: 1
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /home/ubuntu/.ccache-ci:/github/home/.ccache # HOME is hardcoded for no clear reason: https://github.com/actions/runner/issues/863
        - /mnt/MLPerf/ccache:/mnt/MLPerf/ccache
      options: >
        --group-add 1457
        --tmpfs /tmp
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: Check Redis credentials
        # Failing internal jobs draws attention immediately so we can fix them and make them fast.
        # Forks will never have secrets; don't fail the job for them, they'll just run slower
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        run: |
          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then
            echo "Redis password is missing. Did you forget 'secrets: inherit'?"
            exit 1
          fi
          # Conditionally set this here so that it remains unset on forks, otherwise it resolves an invalid URL and the job fails
          CCACHE_REMOTE_STORAGE="redis://${{ vars.REDIS_USER }}:${{ secrets.REDIS_PASSWORD }}@${{ vars.REDIS_HOST }}:${{ vars.REDIS_PORT }}|read-only=${{ vars.REDIS_IS_READONLY }}"
          echo "CCACHE_REMOTE_STORAGE=${CCACHE_REMOTE_STORAGE}" >> $GITHUB_ENV
          echo "CCACHE_REMOTE_STORAGE: ${CCACHE_REMOTE_STORAGE}"

      - name: ⬇️  Setup Job
        uses: tenstorrent/tt-metal/.github/actions/setup-job@davidp-bisect-workflow
        timeout-minutes: 10

      - name: Run Git Bisect
        shell: bash
        env:
          GIT_COMMITTER_NAME: "GitHub Actions"
          GIT_COMMITTER_EMAIL: "actions@github.com"
        run: |
          timeout_duration_iteration=${{ inputs.timeout }}
          test=${{ inputs.command }}
          good_commit=${{ inputs.good-commit }}
          bad_commit=${{ inputs.bad-commit }}

          while getopts ":f:g:b:t:" opt; do
            case "$opt" in
              f) test="$OPTARG" ;;
              g) good_commit="$OPTARG" ;;
              b) bad_commit="$OPTARG" ;;
              t) timeout_duration_iteration="$OPTARG" ;;
              \?) die "Invalid option: -$OPTARG" ;;
              :)  die "Option -$OPTARG requires an argument." ;;
            esac
          done

          [ -n "$test" ] || die "Please specify -f TEST."
          [ -n "$good_commit" ] || die "Please specify -g GOOD_SHA."
          [ -n "$bad_commit" ] || die "Please specify -b BAD_SHA."

          TT_METAL_HOME="${TT_METAL_HOME:-$(pwd)}"
          cd "$TT_METAL_HOME" || die "Cannot cd into TT_METAL_HOME=$TT_METAL_HOME"
          export PYTHONPATH="$TT_METAL_HOME"

          git cat-file -e "$good_commit^{commit}" 2>/dev/null || die "Invalid good commit: $good_commit"
          git cat-file -e "$bad_commit^{commit}" 2>/dev/null  || die "Invalid bad commit: $bad_commit"

          echo "Good: $good_commit"
          echo "Bad : $bad_commit"
          echo "PWD: $(pwd)"
          echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Commit: $(git rev-parse HEAD)"
          echo "Status:"
          git status --porcelain=v1

          echo "Starting git bisect…"
          git bisect start "$bad_commit" "$good_commit" --

          echo "Environment (filtered):"
          env | grep -E '^(TT_|PYTHON|CC|CXX|PATH)=' || true

          found=false
          while [[ "$found" == "false" ]]; do
            rev="$(git rev-parse --short=12 HEAD)"
            echo "::group::Building $rev"

            git submodule update --init --recursive --force

            # Use and clean the CPM cache that CMake will use
            export CPM_SOURCE_CACHE="${CPM_SOURCE_CACHE:-/work/.cpmcache}"
            rm -rf "$CPM_SOURCE_CACHE" build build_Release build_Debug
            mkdir -p "$CPM_SOURCE_CACHE"

            export CMAKE_ARGS="-DCPM_SOURCE_CACHE=$CPM_SOURCE_CACHE -DCPM_DOWNLOAD_ALL=ON -DCPM_USE_LOCAL_PACKAGES=OFF"

            build_rc=0
            ./build_metal.sh \
              --build-dir build \
              --build-type Release \
              --toolchain-path cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake \
              --build-all \
              --enable-ccache \
              --configure-only || build_rc=$?

            grep -R "CPM_SOURCE_CACHE" build/CMakeCache.txt | cat
            test -d "$CPM_SOURCE_CACHE/tokenizers-cpp" && echo "CPM cache OK"

            # Did the patch apply? Look for the explicit ref used by your patch
            grep -R "(&(*handle).decode_str).len()" "$CPM_SOURCE_CACHE/tokenizers-cpp" -n || true

            if [ $build_rc -eq 0 ]; then
              cmake --build build --target install --verbose || build_rc=$?
            fi
            echo "::endgroup::"

            if [ $build_rc -ne 0 ]; then
              echo "Build failed; skipping this commit"
              git bisect skip
              continue
            fi

            echo "::group::Python env"
            venv_rc=0
            if [ -f "./create_venv.sh" ]; then
              # shellcheck disable=SC1091
              source ./create_venv.sh || venv_rc=$?
            fi
            PYTHON_ENV_DIR="${PYTHON_ENV_DIR:-./.venv}"
            if [ ! -d "$PYTHON_ENV_DIR" ]; then
              python3 -m venv "$PYTHON_ENV_DIR" || venv_rc=$?
            fi
            # shellcheck disable=SC1091
            source "$PYTHON_ENV_DIR/bin/activate" || venv_rc=$?
            python -m pip install -U pip || venv_rc=$?
            python -m pip install -r models/tt_transformers/requirements.txt || venv_rc=$?
            echo "::endgroup::"

            if [ $venv_rc -ne 0 ]; then
              echo "Python env failed; skipping this commit"
              git bisect skip
              continue
            fi

            echo "::group::Testing $rev"
            timeout_rc=1
            max_retries=3
            attempt=1
            while [ $attempt -le $max_retries ]; do
              echo "Attempt $attempt on $(git rev-parse HEAD)"
              echo "Run: $test"
              if timeout -k 10s "$timeout_duration_iteration" bash -lc "$test"; then
                timeout_rc=0
                break
              else
                timeout_rc=$?
                echo "Test failed (code $timeout_rc), retrying…"
                attempt=$((attempt+1))
              fi
            done
            echo "Exit code: $timeout_rc"
            echo "::endgroup::"

            if [ $timeout_rc -eq 0 ]; then
              out="$(git bisect good || true)"
            elif [ $timeout_rc -eq 124 ] || [ $timeout_rc -eq 137 ] || [ $timeout_rc -eq 143 ]; then
              echo "Timeout/kill detected; skipping this commit"
              git bisect skip
              continue
            else
              out="$(git bisect bad || true)"
            fi

            first_line="$(printf '%s\n' "$out" | head -n1)"
            case "$first_line" in
              *"is the first bad commit"*)
                echo "FOUND IT: $first_line"
                found=true
                ;;
              *"There are only 'skip'ped commits left to test."*)
                echo "Bisect inconclusive: only skipped commits left."
                break
                ;;
              "")
                echo "git bisect produced no output; stopping to avoid an infinite loop."
                break
                ;;
            esac
          done

          git bisect reset || true
