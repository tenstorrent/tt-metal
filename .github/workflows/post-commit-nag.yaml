name: Post-commit nag bot
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_run:
    workflows: ["All post-commit tests"]
    types:
      - completed
  issue_comment:
    types: [created]
permissions:
  contents: read
  pull-requests: write
  actions: write
  issues: write
jobs:
  check-and-approve:
    if: github.event_name != 'issue_comment' || github.event.issue.pull_request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const targetWorkflow = 'All post-commit tests';
            const overrideCmd    = '/override';
            const runWorkflowCmd = '/run-it';

            console.log(`ü§ñ Post-commit nag bot triggered by: ${context.eventName}`);
            console.log(`Event payload:`, JSON.stringify(context.payload, null, 2).substring(0, 500));

            /* -------- helpers -------- */

            // locate (or create) the single bot comment for this PR
            async function upsertComment(prNumber, body) {
              console.log(`üìù Updating comment for PR #${prNumber}`);
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: prNumber
              });

              const existing = comments.data.find(
                c => c.user.login === 'github-actions[bot]' &&
                     (c.body.startsWith('**‚õîÔ∏è') || c.body.startsWith('**‚úÖ'))
              );

              if (existing) {
                console.log(`üóëÔ∏è Deleting old comment (ID: ${existing.id}) to move to bottom`);
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo:  context.repo.repo,
                  comment_id: existing.id
                });

                console.log(`üìå Creating new comment at bottom`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo:  context.repo.repo,
                  issue_number: prNumber,
                  body
                });
              } else {
                console.log(`üìå Creating new comment`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo:  context.repo.repo,
                  issue_number: prNumber,
                  body
                });
              }
            }

            // has the target workflow run successfully on the HEAD commit?
            async function workflowGood(pr) {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                branch: pr.head.ref,
                status: 'success'
              });
              return runs.data.workflow_runs.some(r =>
                r.name === targetWorkflow && r.head_sha === pr.head.sha);
            }

            /* -------- router -------- */

            let prNumber, forceGreen = false;

            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              console.log(`üîç Processing PR #${prNumber} event: ${context.payload.action}`);

            } else if (context.eventName === 'workflow_run') {
              const run = context.payload.workflow_run;
              console.log(`üèÉ Processing workflow run: ${run.name} (${run.conclusion})`);
              if (run.name !== targetWorkflow || run.conclusion !== 'success') {
                console.log(`‚è≠Ô∏è Skipping - not a successful ${targetWorkflow} run`);
                return;
              }

              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                head:  `${context.repo.owner}:${run.head_branch}`
              });
              if (!prs.data.length) {
                console.log(`‚è≠Ô∏è No open PRs found for branch: ${run.head_branch}`);
                return;
              }
              prNumber = prs.data[0].number;
              console.log(`‚úÖ Found PR #${prNumber} for workflow run`);

            } else if (context.eventName === 'issue_comment') {
              if (!context.payload.issue.pull_request) {
                console.log(`‚è≠Ô∏è Comment is not on a PR, ignoring`);
                return;
              }

              const commentBody = context.payload.comment.body;
              console.log(`üí¨ Processing comment by ${context.payload.comment.user.login}`);

              if (commentBody.includes(overrideCmd)) {
                console.log(`üü¢ Override command detected!`);
                prNumber   = context.payload.issue.number;
                forceGreen = true;
              } else if (commentBody.includes(runWorkflowCmd)) {
                console.log(`üöÄ Run workflow command detected!`);
                prNumber = context.payload.issue.number;

                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo:  context.repo.repo,
                  pull_number: prNumber
                });

                try {
                  console.log(`üéØ Dispatching workflow for PR #${prNumber} on ref: ${pr.head.ref}`);

                  // Construct the link to the workflow runs page, filtered by branch
                  const workflowRunLink = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/all-post-commit-workflows.yaml?query=branch%3A${encodeURIComponent(pr.head.ref)}`;

                  // Comment immediately before dispatching (async behavior)
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `üîÑ Running \`${targetWorkflow}\` on the latest commit (${pr.head.sha.substring(0, 7)}). [View progress](${workflowRunLink})`
                  });

                  // Now dispatch the workflow
                  await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'all-post-commit-workflows.yaml',
                    ref: pr.head.ref
                  });

                  console.log(`‚úÖ Workflow dispatched successfully`);
                } catch (dispatchError) {
                  console.error("‚ùå Error dispatching workflow:", dispatchError);
                  await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      body: `‚ö†Ô∏è Failed to trigger workflow \`${targetWorkflow}\`. Ensure the workflow file exists and the GITHUB_TOKEN has \`actions:write\` permission. Error: ${dispatchError.message}`
                    });
                }
                return; // Exit after triggering the workflow
              } else {
                console.log(`‚è≠Ô∏è Ignoring comment - no recognized commands`);
                return; // Ignore other comments
              }

            } else {
              console.log(`‚è≠Ô∏è Ignoring event: ${context.eventName}`);
              return;   // ignore other events
            }

            /* -------- main logic -------- */

            console.log(`üîé Checking PR #${prNumber} status...`);
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: prNumber
            });

            const happy = `**‚úÖüéâ Thanks for running \`${targetWorkflow}\`! You're clear to merge. üéâ‚úÖ**`;
            const angry = `**‚õîÔ∏èüö® \`${targetWorkflow}\` has NOT run on the latest commit. Run it before merging! üö®‚õîÔ∏è**\n - /run-it to run the workflow on the latest commit.\n - /override to ignore the workflow check.`;

            if (forceGreen) {
              console.log(`‚úÖ Force green via override command`);
              await upsertComment(prNumber, happy);
            } else {
              const isGood = await workflowGood(pr);
              console.log(`üéØ Workflow status check: ${isGood ? 'PASSED' : 'FAILED'} for commit ${pr.head.sha.substring(0, 7)}`);
              const body = isGood ? happy : angry;
              await upsertComment(prNumber, body);
            }
