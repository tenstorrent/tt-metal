name: "Build tt-metal artifacts"

on:
  workflow_call:
    inputs:
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
      build-wheel:
        required: false
        type: boolean
        default: false
        description: "Build Python Wheel"
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "22.04"
      architecture:
        required: false
        type: string
        default: "amd64"
      toolchain:
        required: false
        type: string
        default: "cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake"
        description: "Toolchain file to use for build"
      publish-artifact:
        required: false
        type: boolean
        default: true
        # FIXME(afuller): We need to fix our artifact naming to avoid conflicts if we
        #     wish to make builds of differing types available in a single workflow.
        description: "Make resulting artifact available in the workflow"
      skip-tt-train:
        # FIXME: TT-Train needs to get fixed to not assume a specific toolchain.
        #        Fow now enabling an opt-out. But this should get removed.
        required: false
        type: boolean
        default: true
      profile:
        required: false
        type: boolean
        default: false
        description: "Profile the compilation"
      build-umd-tests:
        required: false
        type: boolean
        default: false
        description: "Build UMD tests"
    outputs:
      ci-build-docker-image:
        description: "Docker tag for the CI Build Docker image for building TT-Metalium et al"
        value: ${{ jobs.build-docker-image.outputs.ci-build-tag }}
      ci-test-docker-image:
        description: "Docker tag for the CI Test Docker image for testing TT-Metalium et al"
        value: ${{ jobs.build-docker-image.outputs.ci-test-tag }}
      dev-docker-image:
        description: "Docker tag for the dev Docker image for developing TT-Metalium et al"
        value: ${{ jobs.build-docker-image.outputs.dev-tag }}
      basic-dev-docker-image:
        description: "Docker tag for the basic dev Docker image for basic development"
        value: ${{ jobs.build-docker-image.outputs.basic-dev-tag }}
      packages-artifact-name:
        description: "Name to give download-artifact to get the packages"
        value: ${{ jobs.build-artifact.outputs.packages-artifact-name }}
      build-artifact-name:
        description: "Name of the published build artifact"
        value: ${{ jobs.build-artifact.outputs.build_artifact_name }}
      wheel-artifact-name:
        description: "Name of the published wheel artifact"
        value: ${{ jobs.build-artifact.outputs.wheel_artifact_name }}

  workflow_dispatch:
    inputs:
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
      build-wheel:
        required: false
        type: boolean
        default: false
        description: "Build Python Wheel"
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "22.04"
      architecture:
        required: false
        type: string
        default: "amd64"
      toolchain:
        required: false
        type: string
        default: "cmake/x86_64-linux-clang-17-libstdcpp-toolchain.cmake"
        description: "Toolchain file to use for build"
      profile:
        required: false
        type: boolean
        default: false
        description: "Profile the compilation"
      build-umd-tests:
        required: false
        type: boolean
        default: false
        description: "Build UMD tests"


jobs:
  build-docker-image:
    uses: ./.github/workflows/build-docker-artifact.yaml
    secrets: inherit
    with:
      distro: ${{ inputs.distro }}
      version: ${{ inputs.version }}
      architecture: ${{ inputs.architecture }}

  build-artifact:
    name: "🛠️ Build ${{ inputs.build-type }} ${{ inputs.distro }} ${{ inputs.version }}"
    needs: build-docker-image
    timeout-minutes: 30
    runs-on: tt-beta-ubuntu-2204-large
    environment: ${{ github.ref == 'refs/heads/main' && 'mainline' || '' }}
    outputs:
      packages-artifact-name: ${{ steps.set-artifact-name.outputs.name }}
      build_artifact_name: ${{ steps.set_build_artifact_name.outputs.build_artifact_name }}
      wheel_artifact_name: ${{ steps.set_wheel_artifact_name.outputs.wheel_artifact_name }}
    container:
      image: harbor.ci.tenstorrent.net/${{ needs.build-docker-image.outputs.ci-build-tag || 'docker-image-unresolved!' }}
      env:
        CCACHE_REMOTE_ONLY: "true"
        CCACHE_TEMPDIR: /tmp/ccache
        CARGO_HOME: /tmp/.cargo
        TT_FROM_PRECOMPILED_DIR: /work
        # TODO: Revisit the addition of these env vars https://github.com/tenstorrent/tt-metal/issues/20161
        TRACY_NO_INVARIANT_CHECK: 1
        TRACY_NO_ISA_EXTENSIONS: 1
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /home/ubuntu/.ccache-ci:/github/home/.ccache # HOME is hardcoded for no clear reason: https://github.com/actions/runner/issues/863
        - /mnt/MLPerf/ccache:/mnt/MLPerf/ccache
      # Group 1457 is for the shared ccache drive
      # tmpfs is for efficiency
      options: >
        --group-add 1457
        --tmpfs /tmp
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878

    steps:
      - name: Check Redis credentials
        # Failing internal jobs draws attention immediately so we can fix them and make them fast.
        # Forks will never have secrets; don't fail the job for them, they'll just run slower
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
        run: |
          if [ -z "${{ secrets.REDIS_PASSWORD }}" ]; then
            echo "Redis password is missing. Did you forget 'secrets: inherit'?"
            exit 1
          fi
          # Conditionally set this here so that it remains unset on forks, otherwise it resolves an invalid URL and the job fails
          CCACHE_REMOTE_STORAGE="redis://${{ vars.REDIS_USER }}:${{ secrets.REDIS_PASSWORD }}@${{ vars.REDIS_HOST }}:${{ vars.REDIS_PORT }}|read-only=${{ vars.REDIS_IS_READONLY }}"
          echo "CCACHE_REMOTE_STORAGE=${CCACHE_REMOTE_STORAGE}" >> $GITHUB_ENV
          echo "CCACHE_REMOTE_STORAGE: ${CCACHE_REMOTE_STORAGE}"

      - name: Set artifact name
        id: set-artifact-name
        run: |
          TOOLCHAIN="${{ inputs.toolchain }}"
          TOOLCHAIN_CLEANED=$(echo "$TOOLCHAIN" | sed -E 's/^cmake\///; s/-toolchain\.cmake$//')
          ARTIFACT_NAME="packages-${{ inputs.distro }}-${{ inputs.version }}-${{ inputs.architecture }}-${{ inputs.build-type }}-${TOOLCHAIN_CLEANED}${{ (inputs.tracy && '_profiler') || '' }}"

          echo "name=$ARTIFACT_NAME" >> "$GITHUB_OUTPUT"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"

      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 500 # Need enough history for `git describe`
          fetch-tags: true # Need tags for `git describe`
          path: docker-job # Here be dragons; keep it scoped to our desired volume, yet must be under github.workspace and be sure to clean up at the end

      - name: Create ccache tmpdir
        run: |
          mkdir -p /tmp/ccache

      - name: Prepare ccache summary
        run: |
          # Zero out the stats so we can see how we did this build
          # NOTE: may be inaccurate if we have >1 build runner on the same machine, using the same local cache
          ccache -z

      - name: 🔧 CMake configure
        run: |
          set -eu # basic shell hygiene

          args_fixme=$([ "${{ inputs.skip-tt-train }}" = "true" ] && echo "--build-metal-tests --build-ttnn-tests --build-programming-examples" || echo "--build-all")
          echo "Args: ${args_fixme}"
          build_command="./build_metal.sh --build-dir build --build-type ${{ inputs.build-type }} --toolchain-path ${{ inputs.toolchain }} ${args_fixme} --enable-ccache --configure-only --cpm-use-local-packages"
          echo "Build tracy: ${{ inputs.tracy }}"
          if [ "${{ inputs.tracy }}" = "true" ]; then
            build_command="$build_command --enable-profiler"
          fi
          if [ "${{ inputs.profile }}" = "true" ]; then
            build_command="$build_command --enable-time-trace --disable-unity-builds"
          fi
          if [ "${{ inputs.build-umd-tests }}" = "true" ]; then
            build_command="$build_command --build-umd-tests"
          fi

          nice -n 19 $build_command

      - name: 🛠️ Compile
        run: |
          # --target install is for the tarball that should get replaced by proper packaging later
          nice -19 cmake --build build --target install

      - name: 🛠️ Profile
        if: ${{ inputs.profile }}
        run: |
          echo "maxNameLength = 300" > ClangBuildAnalyzer.ini
          nice -n 19 ClangBuildAnalyzer --all build capture.bin
          nice -n 19 ClangBuildAnalyzer --analyze capture.bin

      - name: 📦 Package
        run: |
          nice -n 19 cmake --build build --target package
          ls -1sh build/*.deb build/*.ddeb || true

      - name: 🐍 Build wheel
        if: ${{ inputs.build-wheel }}
        run: |
          nice -n 19 python3 -m build --wheel

      - name: Publish ccache summary
        run: |
          echo '## CCache Summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ccache -s >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: ☁️ Upload packages
        uses: actions/upload-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            /work/build/*.deb
            /work/build/*.ddeb
          compression-level: 0
          if-no-files-found: error

      - name: Set wheel artifact name
        id: set_wheel_artifact_name
        run: |
          WHEEL_ARTIFACT_NAME="eager-dist-${{ inputs.distro }}-${{ inputs.version }}-any${{ (inputs.tracy && '-profiler') || '' }}"
          echo "wheel_artifact_name=$WHEEL_ARTIFACT_NAME" >> "$GITHUB_ENV"
          echo "wheel_artifact_name=$WHEEL_ARTIFACT_NAME" >> "$GITHUB_OUTPUT"

      - name: ☁️ Upload wheel
        if: ${{ inputs.build-wheel }}
        uses: actions/upload-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ env.wheel_artifact_name }}
          path: /work/dist/
          if-no-files-found: error

      - name: 'Tar files'
        if: ${{ inputs.publish-artifact }}
        run: |
          ARTIFACT_PATHS="ttnn/ttnn/*.so build/lib ttnn/ttnn/*.so build/programming_examples build/test build/tools runtime"
          if [[ "${{ inputs.skip-tt-train }}" != "true" ]]; then
            ARTIFACT_PATHS="$ARTIFACT_PATHS build/tt-train data"
          fi
          tar -cvhf /work/ttm_any.tar $ARTIFACT_PATHS

      - name: Set build artifact name
        id: set_build_artifact_name
        run: |
          BUILD_ARTIFACT_NAME="TTMetal_build_any${{ (inputs.tracy && '_profiler') || '' }}"
          echo "build_artifact_name=$BUILD_ARTIFACT_NAME" >> "$GITHUB_ENV"
          echo "build_artifact_name=$BUILD_ARTIFACT_NAME" >> "$GITHUB_OUTPUT"

      - name: ☁️ Upload tarball
        if: ${{ inputs.publish-artifact }}
        uses: actions/upload-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ env.build_artifact_name }}
          path: /work/ttm_any.tar
          if-no-files-found: error
