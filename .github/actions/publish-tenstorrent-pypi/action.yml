name: "Publish Tenstorrent PyPI"
description: "Publish Tenstorrent PyPI"

inputs:
  release-artifacts-id:
    description: "Release artifacts id"
    required: true
  release-artifacts-name:
    description: "Release artifacts name"
    required: true
  release-artifacts-wheel-path:
    description: "Release artifacts wheel path"
    required: true
  role-to-assume:
    description: "Role to assume"
    required: true
  region:
    description: "AWS region"
    required: true
  bucket:
    description: "S3 bucket"
    required: true
  new_version_tag:
    description: "New version tag for wheel"
    required: true
  repo:
    description: "Repo name"
    required: true
  overwrite_releases:
    description: "Overwrite releases"
    required: true

runs:
  using: "composite"
  steps:
    - name: Set Release Facts
      id: set-release-facts
      uses: ./.github/actions/set-release-facts
      with:
        repo: ${{ inputs.repo }}
        new_version_tag: ${{ inputs.new_version_tag }}

    - uses: actions/download-artifact@v4
      with:
        artifact-ids: ${{ inputs.release-artifacts-id }}
        path: ${{ github.workspace }}/release

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.region }}

    - name: Install dependencies
      shell: bash
      run: |
        pip install s3pypi

    - name: Publish Tenstorrent PyPI package
      shell: bash
      run: |
        found_wheel_files=$(find ${{ github.workspace }}/release/${{ inputs.release-artifacts-name }}/${{ inputs.release-artifacts-wheel-path }} -type f -iname "*.whl"  -print0 | xargs -0 realpath)
        for wheel in $found_wheel_files; do
          if [ "${{ inputs.overwrite_releases }}" == "true" ]; then
            s3pypi upload "$wheel" --put-root-index --force --bucket ${{ inputs.bucket }}
          else
            s3pypi upload "$wheel" --put-root-index --bucket ${{ inputs.bucket }}
          fi
        done

    - name: Test Tenstorrent PYPI package install
      shell: bash
      run: |
        set -x
        pip_wheel_names="${{ steps.set-release-facts.outputs.pip_wheel_names }}"
        for wheel_name in $pip_wheel_names; do
          # Check the only tenstorrent index for the wheel version
          pip index versions $wheel_name --pre --index-url https://pypi.eng.aws.tenstorrent.com/ | grep ${{ inputs.new_version_tag }}
          # Test install wheel version.
          pip install $wheel_name==${{ inputs.new_version_tag }} --no-cache-dir --extra-index-url https://pypi.eng.aws.tenstorrent.com/
          # Wheel import wheel
          # TODO: skip import test until wheels are fixed
          #normalized_import=$(echo "$wheel_name" | sed -e 's/-/_/g')
          #python -c "import $normalized_import"
          # Check installed version of wheel
          pip show $wheel_name | grep ${{ inputs.new_version_tag }}
        done
