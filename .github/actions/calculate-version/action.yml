name: 'Calculate Version'
description: 'Calculates the next semantic version based on commit messages and tag type'
inputs:
  tag-type:
    description: "Type of tag to create: 'rc' for release candidate, 'dev' for dev development, or '' for normal release"
    required: false
    default: ""
outputs:
  latest_semver:
    description: 'The latest semver tag found'
    value: ${{ steps.get-latest-semver.outputs.latest_semver }}
  bump_type:
    description: 'The type of version bump determined from commits (major, minor, patch, none)'
    value: ${{ steps.analyze-commits.outputs.bump_type }}
  new_version:
    description: 'The calculated new version'
    value: ${{ steps.calculate-version.outputs.new_version }}
  final_version:
    description: 'The final version with tag type suffix (rc/dev) if applicable'
    value: ${{ steps.format-final-version.outputs.final_version }}

runs:
  using: 'composite'
  steps:
    - name: Get latest semver tag
      id: get-latest-semver
      shell: bash
      run: |
        # Get all tags matching exact semver format v{number}.{number}.{number} excluding any with dashes
        tags=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v '-' || true)
        if [ -z "$tags" ]; then
          echo "No semver tags found, using v0.0.0"
          latest_semver="v0.0.0"
        else
          latest_semver=$(echo "$tags" | sort -V | tail -1)
        fi
        echo "Latest semver tag: $latest_semver"
        echo "latest_semver=$latest_semver" >> "$GITHUB_OUTPUT"

    - name: Analyze commits for version bump
      id: analyze-commits
      shell: bash
      run: |
        latest_tag="${{ steps.get-latest-semver.outputs.latest_semver }}"
        echo "Analyzing commits since $latest_tag"

        # Get commit messages since the latest tag
        if [ "$latest_tag" = "v0.0.0" ]; then
          # If no previous tag, analyze all commits
          commits=$(git log --oneline --pretty=format:"%s")
        else
          # Get commits since the latest tag
          commits=$(git log ${latest_tag}..HEAD --oneline --pretty=format:"%s")
        fi

        # Check for version bump indicators
        bump_type="none"

        # Check for MAJOR version indicators
        if echo "$commits" | grep "(MAJOR)"; then
          bump_type="major"
          echo "Found MAJOR version indicators"

        # Check for MINOR version indicators
        elif echo "$commits" | grep "(MINOR)"; then
          bump_type="minor"
          echo "Found MINOR version indicators"

        # Check for PATCH version indicators
        elif echo "$commits" | grep "(PATCH)"; then
          bump_type="patch"
          echo "Found PATCH version indicators"
        fi

        echo "Determined bump type: $bump_type"
        echo "bump_type=$bump_type" >> "$GITHUB_OUTPUT"

    - name: Calculate new version
      id: calculate-version
      shell: bash
      run: |
        latest_tag="${{ steps.get-latest-semver.outputs.latest_semver }}"
        bump_type="${{ steps.analyze-commits.outputs.bump_type }}"
        tag_type="${{ inputs.tag-type }}"

        if [ "$tag_type" = "dev" ]; then
          echo "Dev tag type - ignoring version bump, using latest version"
          echo "new_version=$latest_tag" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        if [ "$bump_type" = "none" ]; then
          echo "No version bump needed - no relevant commit indicators found"
          echo "new_version=$latest_tag" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        # Extract version numbers (remove 'v' prefix)
        version_no_v=${latest_tag#v}
        IFS='.' read -r major minor patch <<< "$version_no_v"

        echo "Current version: $major.$minor.$patch"
        echo "Bump type: $bump_type"

        # Calculate new version based on bump type
        case $bump_type in
          "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "minor")
            minor=$((minor + 1))
            patch=0
            ;;
          "patch")
            patch=$((patch + 1))
            ;;
        esac

        new_version="v$major.$minor.$patch"
        echo "New calculated version: $new_version"
        echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

    - name: Format final version with tag type
      id: format-final-version
      shell: bash
      run: |
        baseVersion="${{ steps.calculate-version.outputs.new_version }}"
        tagType="${{ inputs.tag-type }}"

        if [ "$tagType" = "rc" ]; then
          rcTags=$(git tag | grep "$baseVersion"-rc || true)
          if [ -z "$rcTags" ]; then
            currentNumberRCs=0
          else
            currentNumberRCs=$(echo "$rcTags" | wc -l)
          fi
          newNumber=$((currentNumberRCs+1))
          version="$baseVersion-rc$newNumber"
        elif [ "$tagType" = "dev" ]; then
          dateInt=$(date +%Y%m%d)
          version="$baseVersion-dev$dateInt"
        else
          version="$baseVersion"
        fi

        echo "Final version: $version"
        echo "final_version=$version" >> "$GITHUB_OUTPUT"
