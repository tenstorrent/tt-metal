name: "Run set of commands in Docker"
description: "Run commands in docker"

inputs:
  run_args:
    description: 'Commands to run in docker'
    required: true
  docker_os_arch:
    description: 'Docker image architecture'
    required: false
    default: tt-metalium/ubuntu-22.04-dev-amd64
  docker_image:
    description: 'Specify Docker image to use.'
    required: false
  docker_username:
    description: docker login username
    required: true
    default: ${{ github.actor }}
  docker_password:
    description: docker login password
    required: true
  docker_opts:
    description: 'Docker options'
    required: false
  device:
    description: "Description of Device as it is used in docker run command."
    type: string
    required: false
    default: |
      -v /dev/hugepages-1G:/dev/hugepages-1G
      --device /dev/tenstorrent
  install_wheel:
    description: "Install the wheel that contains all of the Python environment. The artifact needs to be present."
    type: boolean
    required: false
    default: false
  forward_civ2_proxy_env_vars:
    description: "Forward the CIV2 proxy environment variables to the container."
    type: boolean
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Set docker image tag
      if: ${{ inputs.docker_image }}
      shell: bash
      run: |
        echo "TT_METAL_DOCKER_IMAGE_TAG=${{ inputs.docker_image }}" >> $GITHUB_ENV
    - name: Determine docker image tag
      if: ${{ ! inputs.docker_image }}
      uses: ./.github/actions/generate-docker-tag
      with:
        image: ${{ inputs.docker_os_arch || 'docker-image-unresolved!'}}
    - name: Set
      shell: bash
      run: |
        echo "RUNNER_UID=$(id -u)" >> $GITHUB_ENV
        echo "RUNNER_GID=$(id -g)" >> $GITHUB_ENV
        if [ "${{ inputs.forward_civ2_proxy_env_vars }}" == "true" ]; then
          echo "CIV2_HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
          echo "CIV2_http_proxy=$http_proxy" >> $GITHUB_ENV
          echo "CIV2_HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
          echo "CIV2_https_proxy=$https_proxy" >> $GITHUB_ENV
          echo "CIV2_NO_PROXY=$NO_PROXY" >> $GITHUB_ENV
          echo "CIV2_no_proxy=$no_proxy" >> $GITHUB_ENV
        fi
    - name: Docker login
      uses: docker/login-action@v3
      with:
        registry: https://ghcr.io
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}
    - name: Pull docker image
      shell: bash
      run: |
        docker pull ${{ env.TT_METAL_DOCKER_IMAGE_TAG }}
    - uses: tenstorrent/docker-run-action@v6
      with:
        shell: bash
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}
        registry: ghcr.io
        image: ${{ env.TT_METAL_DOCKER_IMAGE_TAG || 'docker-image-unresolved!'}}
        # The most important option below is `--rm`. Otherwise, the machines will fill up with undeleted containers.
        # The mounting of /etc/passwd, /etc/shadow, and /etc/bashrc is required in order for the correct file permissions
        # for newly created files.
        # Passing HOME variable is necessary to avoid Python lib installation into /home/ubuntu/.local folder which
        # may not be writable by the RUNNER_UID user.
        # --log-driver none: Do not save logs to disk by default as we're printing them to GitHub Actions UI already
        # and it takes up space on the runner. What can happen is that we can eat up all the space of a runner while it's
        # spitting our endless logs, causing the runner being unable to call home, resulting in job failures / runner
        # offline status on GitHub. Issue tt-metal/#12626
        options: |
          -u ${{ env.RUNNER_UID }}:${{ env.RUNNER_GID }}
          --rm
          -v /etc/passwd:/etc/passwd:ro
          -v ${{ github.workspace }}:/workspace:rw
          --net=host
          --log-driver local
          --log-opt max-size=50m
          ${{ inputs.docker_opts }}
          -e LOGURU_LEVEL=${{ env.LOGURU_LEVEL || 'INFO' }}
          -e HOME=/tmp/home
          -e PIP_CACHE_DIR=/tmp/home/.cache/pip
          -e GITHUB_ACTIONS=true
          -e CI=true
          -e GITHUB_REPOSITORY=${{ github.repository }}
          -e GITHUB_SHA=${{ github.sha }}
          -e GITHUB_REF_NAME=${{ github.ref_name }}
          -e GITHUB_RUN_ID=${{ github.run_id }}
          -e GITHUB_TRIGGERING_ACTOR=${{ github.github_triggering_actor }}
          -e RUNNER_NAME=${{ runner.name }}
          ${{ (inputs.forward_civ2_proxy_env_vars && format('-e HTTP_PROXY={0}', env.CIV2_HTTP_PROXY)) || '' }}
          ${{ (inputs.forward_civ2_proxy_env_vars && format('-e http_proxy={0}', env.CIV2_http_proxy)) || '' }}
          ${{ (inputs.forward_civ2_proxy_env_vars && format('-e HTTPS_PROXY={0}', env.CIV2_HTTPS_PROXY)) || '' }}
          ${{ (inputs.forward_civ2_proxy_env_vars && format('-e https_proxy={0}', env.CIV2_https_proxy)) || '' }}
          ${{ (inputs.forward_civ2_proxy_env_vars && format('-e NO_PROXY={0}', env.CIV2_NO_PROXY)) || '' }}
          ${{ (inputs.forward_civ2_proxy_env_vars && format('-e no_proxy={0}', env.CIV2_no_proxy)) || '' }}
          ${{ inputs.device }}
          -w /workspace
        run: |
          set -eu

          echo "=== DEBUG: Container startup ==="
          echo "Current user: $(whoami)"
          echo "User ID: $(id -u)"
          echo "Group ID: $(id -g)"
          echo "Current directory: $(pwd)"
          echo "HOME: $HOME"
          echo "PIP_CACHE_DIR: $PIP_CACHE_DIR"

          echo "=== DEBUG: Directory permissions ==="
          echo "Workspace ownership: $(stat -c '%u:%g' .)"
          echo "Workspace permissions: $(stat -c '%a' .)"
          ls -la

          echo "=== DEBUG: Setting up home directory ==="
          # Create and set up home directory with proper ownership
          mkdir -p /tmp/home/.cache/pip
          echo "Created /tmp/home/.cache/pip"
          ls -la /tmp/home/

          echo "=== DEBUG: Checking workspace ownership ==="
          # Fix ownership of workspace files if needed
          if [ "$(stat -c '%u' .)" != "$(id -u)" ]; then
            echo "Fixing ownership of workspace files..."
            sudo chown -R $(id -u):$(id -g) .
            echo "Fixed ownership - new ownership: $(stat -c '%u:%g' .)"
          else
            echo "Workspace ownership is correct"
          fi

          echo "=== DEBUG: Installing wheel ==="
          install_wheel=${{ inputs.install_wheel }}
          if [ "${install_wheel,,}" == "true" ]; then
            echo "Installing wheel..."
            WHEEL_FILENAME=$(ls -1 *.whl)
            echo "Wheel filename: $WHEEL_FILENAME"

            echo "=== DEBUG: Python environment info ==="
            which python3
            which pip3
            echo "Python sys.path:"
            python3 -c "import sys; print('\n'.join(sys.path))"
            echo "Pip version:"
            pip3 --version

            echo "=== DEBUG: Current directory permissions ==="
            ls -la . | head -10

            echo "=== DEBUG: Trying pip install with isolation ==="
            # Try to install with isolation from current directory and clean environment
            mkdir -p "$HOME/wheels"
            cp -f "/workspace/$WHEEL_FILENAME" "$HOME/wheels/"
            chmod 0644 "$HOME/wheels/$WHEEL_FILENAME"

            PYTHONPATH="" PYTHONSAFEPATH=1 python3 -P -m pip install \
            --isolated --no-deps --no-input --disable-pip-version-check \
            --cache-dir "$PIP_CACHE_DIR" \
            "$HOME/wheels/$WHEEL_FILENAME"
            cd "/workspace"

            echo "Wheel installation completed"
          else
            echo "Skipping wheel installation"
          fi
          export PYTHONPATH="/workspace:${PYTHONPATH:-}"
          echo "=== DEBUG: Running user commands ==="
          ${{ inputs.run_args }}
