// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/mesh_graph_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
namespace tt {
namespace tt_fabric {
namespace proto {
class Channels;
class ChannelsDefaultTypeInternal;
extern ChannelsDefaultTypeInternal _Channels_default_instance_;
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class GraphDescriptor;
class GraphDescriptorDefaultTypeInternal;
extern GraphDescriptorDefaultTypeInternal _GraphDescriptor_default_instance_;
class GraphRef;
class GraphRefDefaultTypeInternal;
extern GraphRefDefaultTypeInternal _GraphRef_default_instance_;
class GraphTopology;
class GraphTopologyDefaultTypeInternal;
extern GraphTopologyDefaultTypeInternal _GraphTopology_default_instance_;
class MeshDescriptor;
class MeshDescriptorDefaultTypeInternal;
extern MeshDescriptorDefaultTypeInternal _MeshDescriptor_default_instance_;
class MeshDescriptor_ExpressConnection;
class MeshDescriptor_ExpressConnectionDefaultTypeInternal;
extern MeshDescriptor_ExpressConnectionDefaultTypeInternal _MeshDescriptor_ExpressConnection_default_instance_;
class MeshGraphDescriptor;
class MeshGraphDescriptorDefaultTypeInternal;
extern MeshGraphDescriptorDefaultTypeInternal _MeshGraphDescriptor_default_instance_;
class MeshRef;
class MeshRefDefaultTypeInternal;
extern MeshRefDefaultTypeInternal _MeshRef_default_instance_;
class MeshTopology;
class MeshTopologyDefaultTypeInternal;
extern MeshTopologyDefaultTypeInternal _MeshTopology_default_instance_;
class NodeRef;
class NodeRefDefaultTypeInternal;
extern NodeRefDefaultTypeInternal _NodeRef_default_instance_;
class TorusTopology;
class TorusTopologyDefaultTypeInternal;
extern TorusTopologyDefaultTypeInternal _TorusTopology_default_instance_;
}  // namespace proto
}  // namespace tt_fabric
}  // namespace tt
PROTOBUF_NAMESPACE_OPEN
template<> ::tt::tt_fabric::proto::Channels* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::Channels>(Arena*);
template<> ::tt::tt_fabric::proto::Connection* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::Connection>(Arena*);
template<> ::tt::tt_fabric::proto::GraphDescriptor* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::GraphDescriptor>(Arena*);
template<> ::tt::tt_fabric::proto::GraphRef* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::GraphRef>(Arena*);
template<> ::tt::tt_fabric::proto::GraphTopology* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::GraphTopology>(Arena*);
template<> ::tt::tt_fabric::proto::MeshDescriptor* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::MeshDescriptor>(Arena*);
template<> ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection>(Arena*);
template<> ::tt::tt_fabric::proto::MeshGraphDescriptor* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::MeshGraphDescriptor>(Arena*);
template<> ::tt::tt_fabric::proto::MeshRef* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::MeshRef>(Arena*);
template<> ::tt::tt_fabric::proto::MeshTopology* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::MeshTopology>(Arena*);
template<> ::tt::tt_fabric::proto::NodeRef* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::NodeRef>(Arena*);
template<> ::tt::tt_fabric::proto::TorusTopology* Arena::CreateMaybeMessage<::tt::tt_fabric::proto::TorusTopology>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tt {
namespace tt_fabric {
namespace proto {

enum TorusTopology_Type : int {
  TorusTopology_Type_INVALID_TYPE = 0,
  TorusTopology_Type_LINE = 1,
  TorusTopology_Type_RING = 2,
  TorusTopology_Type_TorusTopology_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TorusTopology_Type_TorusTopology_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TorusTopology_Type_IsValid(int value);
constexpr TorusTopology_Type TorusTopology_Type_Type_MIN = TorusTopology_Type_INVALID_TYPE;
constexpr TorusTopology_Type TorusTopology_Type_Type_MAX = TorusTopology_Type_RING;
constexpr int TorusTopology_Type_Type_ARRAYSIZE = TorusTopology_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TorusTopology_Type_descriptor();
template<typename T>
inline const std::string& TorusTopology_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TorusTopology_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TorusTopology_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TorusTopology_Type_descriptor(), enum_t_value);
}
inline bool TorusTopology_Type_Parse(
    const std::string& name, TorusTopology_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TorusTopology_Type>(
    TorusTopology_Type_descriptor(), name, value);
}
enum GraphTopology_Type : int {
  GraphTopology_Type_INVALID_TYPE = 0,
  GraphTopology_Type_ALL_TO_ALL = 1,
  GraphTopology_Type_RING = 2,
  GraphTopology_Type_GraphTopology_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GraphTopology_Type_GraphTopology_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GraphTopology_Type_IsValid(int value);
constexpr GraphTopology_Type GraphTopology_Type_Type_MIN = GraphTopology_Type_INVALID_TYPE;
constexpr GraphTopology_Type GraphTopology_Type_Type_MAX = GraphTopology_Type_RING;
constexpr int GraphTopology_Type_Type_ARRAYSIZE = GraphTopology_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphTopology_Type_descriptor();
template<typename T>
inline const std::string& GraphTopology_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GraphTopology_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GraphTopology_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GraphTopology_Type_descriptor(), enum_t_value);
}
inline bool GraphTopology_Type_Parse(
    const std::string& name, GraphTopology_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GraphTopology_Type>(
    GraphTopology_Type_descriptor(), name, value);
}
enum Architecture : int {
  INVALID_ARCHITECTURE = 0,
  WORMHOLE_B0 = 1,
  BLACKHOLE = 2,
  Architecture_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Architecture_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Architecture_IsValid(int value);
constexpr Architecture Architecture_MIN = INVALID_ARCHITECTURE;
constexpr Architecture Architecture_MAX = BLACKHOLE;
constexpr int Architecture_ARRAYSIZE = Architecture_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Architecture_descriptor();
template<typename T>
inline const std::string& Architecture_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Architecture>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Architecture_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Architecture_descriptor(), enum_t_value);
}
inline bool Architecture_Parse(
    const std::string& name, Architecture* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Architecture>(
    Architecture_descriptor(), name, value);
}
enum Policy : int {
  INVALID_POLICY = 0,
  STRICT = 1,
  RELAXED = 2,
  Policy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Policy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Policy_IsValid(int value);
constexpr Policy Policy_MIN = INVALID_POLICY;
constexpr Policy Policy_MAX = RELAXED;
constexpr int Policy_ARRAYSIZE = Policy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Policy_descriptor();
template<typename T>
inline const std::string& Policy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Policy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Policy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Policy_descriptor(), enum_t_value);
}
inline bool Policy_Parse(
    const std::string& name, Policy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Policy>(
    Policy_descriptor(), name, value);
}
// ===================================================================

class MeshGraphDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.MeshGraphDescriptor) */ {
 public:
  inline MeshGraphDescriptor() : MeshGraphDescriptor(nullptr) {};
  virtual ~MeshGraphDescriptor();

  MeshGraphDescriptor(const MeshGraphDescriptor& from);
  MeshGraphDescriptor(MeshGraphDescriptor&& from) noexcept
    : MeshGraphDescriptor() {
    *this = ::std::move(from);
  }

  inline MeshGraphDescriptor& operator=(const MeshGraphDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshGraphDescriptor& operator=(MeshGraphDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshGraphDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshGraphDescriptor* internal_default_instance() {
    return reinterpret_cast<const MeshGraphDescriptor*>(
               &_MeshGraphDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MeshGraphDescriptor& a, MeshGraphDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshGraphDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshGraphDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshGraphDescriptor* New() const final {
    return CreateMaybeMessage<MeshGraphDescriptor>(nullptr);
  }

  MeshGraphDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshGraphDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshGraphDescriptor& from);
  void MergeFrom(const MeshGraphDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshGraphDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.MeshGraphDescriptor";
  }
  protected:
  explicit MeshGraphDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshDescriptorsFieldNumber = 1,
    kGraphDescriptorsFieldNumber = 2,
    kTopLevelInstanceFieldNumber = 3,
  };
  // repeated .tt.tt_fabric.proto.MeshDescriptor mesh_descriptors = 1;
  int mesh_descriptors_size() const;
  private:
  int _internal_mesh_descriptors_size() const;
  public:
  void clear_mesh_descriptors();
  ::tt::tt_fabric::proto::MeshDescriptor* mutable_mesh_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor >*
      mutable_mesh_descriptors();
  private:
  const ::tt::tt_fabric::proto::MeshDescriptor& _internal_mesh_descriptors(int index) const;
  ::tt::tt_fabric::proto::MeshDescriptor* _internal_add_mesh_descriptors();
  public:
  const ::tt::tt_fabric::proto::MeshDescriptor& mesh_descriptors(int index) const;
  ::tt::tt_fabric::proto::MeshDescriptor* add_mesh_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor >&
      mesh_descriptors() const;

  // repeated .tt.tt_fabric.proto.GraphDescriptor graph_descriptors = 2;
  int graph_descriptors_size() const;
  private:
  int _internal_graph_descriptors_size() const;
  public:
  void clear_graph_descriptors();
  ::tt::tt_fabric::proto::GraphDescriptor* mutable_graph_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::GraphDescriptor >*
      mutable_graph_descriptors();
  private:
  const ::tt::tt_fabric::proto::GraphDescriptor& _internal_graph_descriptors(int index) const;
  ::tt::tt_fabric::proto::GraphDescriptor* _internal_add_graph_descriptors();
  public:
  const ::tt::tt_fabric::proto::GraphDescriptor& graph_descriptors(int index) const;
  ::tt::tt_fabric::proto::GraphDescriptor* add_graph_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::GraphDescriptor >&
      graph_descriptors() const;

  // .tt.tt_fabric.proto.NodeRef top_level_instance = 3;
  bool has_top_level_instance() const;
  private:
  bool _internal_has_top_level_instance() const;
  public:
  void clear_top_level_instance();
  const ::tt::tt_fabric::proto::NodeRef& top_level_instance() const;
  ::tt::tt_fabric::proto::NodeRef* release_top_level_instance();
  ::tt::tt_fabric::proto::NodeRef* mutable_top_level_instance();
  void set_allocated_top_level_instance(::tt::tt_fabric::proto::NodeRef* top_level_instance);
  private:
  const ::tt::tt_fabric::proto::NodeRef& _internal_top_level_instance() const;
  ::tt::tt_fabric::proto::NodeRef* _internal_mutable_top_level_instance();
  public:
  void unsafe_arena_set_allocated_top_level_instance(
      ::tt::tt_fabric::proto::NodeRef* top_level_instance);
  ::tt::tt_fabric::proto::NodeRef* unsafe_arena_release_top_level_instance();

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.MeshGraphDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor > mesh_descriptors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::GraphDescriptor > graph_descriptors_;
  ::tt::tt_fabric::proto::NodeRef* top_level_instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class MeshDescriptor_ExpressConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.MeshDescriptor.ExpressConnection) */ {
 public:
  inline MeshDescriptor_ExpressConnection() : MeshDescriptor_ExpressConnection(nullptr) {};
  virtual ~MeshDescriptor_ExpressConnection();

  MeshDescriptor_ExpressConnection(const MeshDescriptor_ExpressConnection& from);
  MeshDescriptor_ExpressConnection(MeshDescriptor_ExpressConnection&& from) noexcept
    : MeshDescriptor_ExpressConnection() {
    *this = ::std::move(from);
  }

  inline MeshDescriptor_ExpressConnection& operator=(const MeshDescriptor_ExpressConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshDescriptor_ExpressConnection& operator=(MeshDescriptor_ExpressConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshDescriptor_ExpressConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshDescriptor_ExpressConnection* internal_default_instance() {
    return reinterpret_cast<const MeshDescriptor_ExpressConnection*>(
               &_MeshDescriptor_ExpressConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MeshDescriptor_ExpressConnection& a, MeshDescriptor_ExpressConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshDescriptor_ExpressConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshDescriptor_ExpressConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshDescriptor_ExpressConnection* New() const final {
    return CreateMaybeMessage<MeshDescriptor_ExpressConnection>(nullptr);
  }

  MeshDescriptor_ExpressConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshDescriptor_ExpressConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshDescriptor_ExpressConnection& from);
  void MergeFrom(const MeshDescriptor_ExpressConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshDescriptor_ExpressConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.MeshDescriptor.ExpressConnection";
  }
  protected:
  explicit MeshDescriptor_ExpressConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kDstFieldNumber = 2,
  };
  // int32 src = 1;
  void clear_src();
  ::PROTOBUF_NAMESPACE_ID::int32 src() const;
  void set_src(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_src() const;
  void _internal_set_src(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dst = 2;
  void clear_dst();
  ::PROTOBUF_NAMESPACE_ID::int32 dst() const;
  void set_dst(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dst() const;
  void _internal_set_dst(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.MeshDescriptor.ExpressConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class MeshDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.MeshDescriptor) */ {
 public:
  inline MeshDescriptor() : MeshDescriptor(nullptr) {};
  virtual ~MeshDescriptor();

  MeshDescriptor(const MeshDescriptor& from);
  MeshDescriptor(MeshDescriptor&& from) noexcept
    : MeshDescriptor() {
    *this = ::std::move(from);
  }

  inline MeshDescriptor& operator=(const MeshDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshDescriptor& operator=(MeshDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshDescriptor* internal_default_instance() {
    return reinterpret_cast<const MeshDescriptor*>(
               &_MeshDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MeshDescriptor& a, MeshDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshDescriptor* New() const final {
    return CreateMaybeMessage<MeshDescriptor>(nullptr);
  }

  MeshDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshDescriptor& from);
  void MergeFrom(const MeshDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.MeshDescriptor";
  }
  protected:
  explicit MeshDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MeshDescriptor_ExpressConnection ExpressConnection;

  // accessors -------------------------------------------------------

  enum : int {
    kExpressConnectionsFieldNumber = 7,
    kNameFieldNumber = 1,
    kDeviceTopologyFieldNumber = 3,
    kChannelsFieldNumber = 4,
    kHostTopologyFieldNumber = 5,
    kArchFieldNumber = 2,
  };
  // repeated .tt.tt_fabric.proto.MeshDescriptor.ExpressConnection express_connections = 7;
  int express_connections_size() const;
  private:
  int _internal_express_connections_size() const;
  public:
  void clear_express_connections();
  ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* mutable_express_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection >*
      mutable_express_connections();
  private:
  const ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection& _internal_express_connections(int index) const;
  ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* _internal_add_express_connections();
  public:
  const ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection& express_connections(int index) const;
  ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* add_express_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection >&
      express_connections() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .tt.tt_fabric.proto.TorusTopology device_topology = 3;
  bool has_device_topology() const;
  private:
  bool _internal_has_device_topology() const;
  public:
  void clear_device_topology();
  const ::tt::tt_fabric::proto::TorusTopology& device_topology() const;
  ::tt::tt_fabric::proto::TorusTopology* release_device_topology();
  ::tt::tt_fabric::proto::TorusTopology* mutable_device_topology();
  void set_allocated_device_topology(::tt::tt_fabric::proto::TorusTopology* device_topology);
  private:
  const ::tt::tt_fabric::proto::TorusTopology& _internal_device_topology() const;
  ::tt::tt_fabric::proto::TorusTopology* _internal_mutable_device_topology();
  public:
  void unsafe_arena_set_allocated_device_topology(
      ::tt::tt_fabric::proto::TorusTopology* device_topology);
  ::tt::tt_fabric::proto::TorusTopology* unsafe_arena_release_device_topology();

  // .tt.tt_fabric.proto.Channels channels = 4;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  const ::tt::tt_fabric::proto::Channels& channels() const;
  ::tt::tt_fabric::proto::Channels* release_channels();
  ::tt::tt_fabric::proto::Channels* mutable_channels();
  void set_allocated_channels(::tt::tt_fabric::proto::Channels* channels);
  private:
  const ::tt::tt_fabric::proto::Channels& _internal_channels() const;
  ::tt::tt_fabric::proto::Channels* _internal_mutable_channels();
  public:
  void unsafe_arena_set_allocated_channels(
      ::tt::tt_fabric::proto::Channels* channels);
  ::tt::tt_fabric::proto::Channels* unsafe_arena_release_channels();

  // .tt.tt_fabric.proto.MeshTopology host_topology = 5;
  bool has_host_topology() const;
  private:
  bool _internal_has_host_topology() const;
  public:
  void clear_host_topology();
  const ::tt::tt_fabric::proto::MeshTopology& host_topology() const;
  ::tt::tt_fabric::proto::MeshTopology* release_host_topology();
  ::tt::tt_fabric::proto::MeshTopology* mutable_host_topology();
  void set_allocated_host_topology(::tt::tt_fabric::proto::MeshTopology* host_topology);
  private:
  const ::tt::tt_fabric::proto::MeshTopology& _internal_host_topology() const;
  ::tt::tt_fabric::proto::MeshTopology* _internal_mutable_host_topology();
  public:
  void unsafe_arena_set_allocated_host_topology(
      ::tt::tt_fabric::proto::MeshTopology* host_topology);
  ::tt::tt_fabric::proto::MeshTopology* unsafe_arena_release_host_topology();

  // .tt.tt_fabric.proto.Architecture arch = 2;
  void clear_arch();
  ::tt::tt_fabric::proto::Architecture arch() const;
  void set_arch(::tt::tt_fabric::proto::Architecture value);
  private:
  ::tt::tt_fabric::proto::Architecture _internal_arch() const;
  void _internal_set_arch(::tt::tt_fabric::proto::Architecture value);
  public:

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.MeshDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection > express_connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tt::tt_fabric::proto::TorusTopology* device_topology_;
  ::tt::tt_fabric::proto::Channels* channels_;
  ::tt::tt_fabric::proto::MeshTopology* host_topology_;
  int arch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class GraphDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.GraphDescriptor) */ {
 public:
  inline GraphDescriptor() : GraphDescriptor(nullptr) {};
  virtual ~GraphDescriptor();

  GraphDescriptor(const GraphDescriptor& from);
  GraphDescriptor(GraphDescriptor&& from) noexcept
    : GraphDescriptor() {
    *this = ::std::move(from);
  }

  inline GraphDescriptor& operator=(const GraphDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDescriptor& operator=(GraphDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDescriptor* internal_default_instance() {
    return reinterpret_cast<const GraphDescriptor*>(
               &_GraphDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GraphDescriptor& a, GraphDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphDescriptor* New() const final {
    return CreateMaybeMessage<GraphDescriptor>(nullptr);
  }

  GraphDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphDescriptor& from);
  void MergeFrom(const GraphDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.GraphDescriptor";
  }
  protected:
  explicit GraphDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstancesFieldNumber = 3,
    kConnectionsFieldNumber = 5,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kGraphTopologyFieldNumber = 4,
  };
  // repeated .tt.tt_fabric.proto.NodeRef instances = 3;
  int instances_size() const;
  private:
  int _internal_instances_size() const;
  public:
  void clear_instances();
  ::tt::tt_fabric::proto::NodeRef* mutable_instances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >*
      mutable_instances();
  private:
  const ::tt::tt_fabric::proto::NodeRef& _internal_instances(int index) const;
  ::tt::tt_fabric::proto::NodeRef* _internal_add_instances();
  public:
  const ::tt::tt_fabric::proto::NodeRef& instances(int index) const;
  ::tt::tt_fabric::proto::NodeRef* add_instances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >&
      instances() const;

  // repeated .tt.tt_fabric.proto.Connection connections = 5;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::tt::tt_fabric::proto::Connection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::Connection >*
      mutable_connections();
  private:
  const ::tt::tt_fabric::proto::Connection& _internal_connections(int index) const;
  ::tt::tt_fabric::proto::Connection* _internal_add_connections();
  public:
  const ::tt::tt_fabric::proto::Connection& connections(int index) const;
  ::tt::tt_fabric::proto::Connection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::Connection >&
      connections() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .tt.tt_fabric.proto.GraphTopology graph_topology = 4;
  bool has_graph_topology() const;
  private:
  bool _internal_has_graph_topology() const;
  public:
  void clear_graph_topology();
  const ::tt::tt_fabric::proto::GraphTopology& graph_topology() const;
  ::tt::tt_fabric::proto::GraphTopology* release_graph_topology();
  ::tt::tt_fabric::proto::GraphTopology* mutable_graph_topology();
  void set_allocated_graph_topology(::tt::tt_fabric::proto::GraphTopology* graph_topology);
  private:
  const ::tt::tt_fabric::proto::GraphTopology& _internal_graph_topology() const;
  ::tt::tt_fabric::proto::GraphTopology* _internal_mutable_graph_topology();
  public:
  void unsafe_arena_set_allocated_graph_topology(
      ::tt::tt_fabric::proto::GraphTopology* graph_topology);
  ::tt::tt_fabric::proto::GraphTopology* unsafe_arena_release_graph_topology();

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.GraphDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef > instances_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::Connection > connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::tt::tt_fabric::proto::GraphTopology* graph_topology_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class NodeRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.NodeRef) */ {
 public:
  inline NodeRef() : NodeRef(nullptr) {};
  virtual ~NodeRef();

  NodeRef(const NodeRef& from);
  NodeRef(NodeRef&& from) noexcept
    : NodeRef() {
    *this = ::std::move(from);
  }

  inline NodeRef& operator=(const NodeRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeRef& operator=(NodeRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeRef& default_instance();

  enum NodeRefCase {
    kMesh = 1,
    kGraph = 2,
    NODE_REF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRef* internal_default_instance() {
    return reinterpret_cast<const NodeRef*>(
               &_NodeRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NodeRef& a, NodeRef& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeRef* New() const final {
    return CreateMaybeMessage<NodeRef>(nullptr);
  }

  NodeRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeRef& from);
  void MergeFrom(const NodeRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.NodeRef";
  }
  protected:
  explicit NodeRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshFieldNumber = 1,
    kGraphFieldNumber = 2,
  };
  // .tt.tt_fabric.proto.MeshRef mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::tt::tt_fabric::proto::MeshRef& mesh() const;
  ::tt::tt_fabric::proto::MeshRef* release_mesh();
  ::tt::tt_fabric::proto::MeshRef* mutable_mesh();
  void set_allocated_mesh(::tt::tt_fabric::proto::MeshRef* mesh);
  private:
  const ::tt::tt_fabric::proto::MeshRef& _internal_mesh() const;
  ::tt::tt_fabric::proto::MeshRef* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::tt::tt_fabric::proto::MeshRef* mesh);
  ::tt::tt_fabric::proto::MeshRef* unsafe_arena_release_mesh();

  // .tt.tt_fabric.proto.GraphRef graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::tt::tt_fabric::proto::GraphRef& graph() const;
  ::tt::tt_fabric::proto::GraphRef* release_graph();
  ::tt::tt_fabric::proto::GraphRef* mutable_graph();
  void set_allocated_graph(::tt::tt_fabric::proto::GraphRef* graph);
  private:
  const ::tt::tt_fabric::proto::GraphRef& _internal_graph() const;
  ::tt::tt_fabric::proto::GraphRef* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::tt::tt_fabric::proto::GraphRef* graph);
  ::tt::tt_fabric::proto::GraphRef* unsafe_arena_release_graph();

  void clear_node_ref();
  NodeRefCase node_ref_case() const;
  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.NodeRef)
 private:
  class _Internal;
  void set_has_mesh();
  void set_has_graph();

  inline bool has_node_ref() const;
  inline void clear_has_node_ref();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union NodeRefUnion {
    NodeRefUnion() {}
    ::tt::tt_fabric::proto::MeshRef* mesh_;
    ::tt::tt_fabric::proto::GraphRef* graph_;
  } node_ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class GraphRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.GraphRef) */ {
 public:
  inline GraphRef() : GraphRef(nullptr) {};
  virtual ~GraphRef();

  GraphRef(const GraphRef& from);
  GraphRef(GraphRef&& from) noexcept
    : GraphRef() {
    *this = ::std::move(from);
  }

  inline GraphRef& operator=(const GraphRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphRef& operator=(GraphRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphRef& default_instance();

  enum SubRefCase {
    kMesh = 3,
    kGraph = 4,
    SUB_REF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphRef* internal_default_instance() {
    return reinterpret_cast<const GraphRef*>(
               &_GraphRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GraphRef& a, GraphRef& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphRef* New() const final {
    return CreateMaybeMessage<GraphRef>(nullptr);
  }

  GraphRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphRef& from);
  void MergeFrom(const GraphRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.GraphRef";
  }
  protected:
  explicit GraphRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDescriptorFieldNumber = 1,
    kGraphIdFieldNumber = 2,
    kMeshFieldNumber = 3,
    kGraphFieldNumber = 4,
  };
  // string graph_descriptor = 1;
  void clear_graph_descriptor();
  const std::string& graph_descriptor() const;
  void set_graph_descriptor(const std::string& value);
  void set_graph_descriptor(std::string&& value);
  void set_graph_descriptor(const char* value);
  void set_graph_descriptor(const char* value, size_t size);
  std::string* mutable_graph_descriptor();
  std::string* release_graph_descriptor();
  void set_allocated_graph_descriptor(std::string* graph_descriptor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_graph_descriptor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_graph_descriptor(
      std::string* graph_descriptor);
  private:
  const std::string& _internal_graph_descriptor() const;
  void _internal_set_graph_descriptor(const std::string& value);
  std::string* _internal_mutable_graph_descriptor();
  public:

  // int32 graph_id = 2;
  void clear_graph_id();
  ::PROTOBUF_NAMESPACE_ID::int32 graph_id() const;
  void set_graph_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_graph_id() const;
  void _internal_set_graph_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .tt.tt_fabric.proto.MeshRef mesh = 3;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::tt::tt_fabric::proto::MeshRef& mesh() const;
  ::tt::tt_fabric::proto::MeshRef* release_mesh();
  ::tt::tt_fabric::proto::MeshRef* mutable_mesh();
  void set_allocated_mesh(::tt::tt_fabric::proto::MeshRef* mesh);
  private:
  const ::tt::tt_fabric::proto::MeshRef& _internal_mesh() const;
  ::tt::tt_fabric::proto::MeshRef* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::tt::tt_fabric::proto::MeshRef* mesh);
  ::tt::tt_fabric::proto::MeshRef* unsafe_arena_release_mesh();

  // .tt.tt_fabric.proto.GraphRef graph = 4;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::tt::tt_fabric::proto::GraphRef& graph() const;
  ::tt::tt_fabric::proto::GraphRef* release_graph();
  ::tt::tt_fabric::proto::GraphRef* mutable_graph();
  void set_allocated_graph(::tt::tt_fabric::proto::GraphRef* graph);
  private:
  const ::tt::tt_fabric::proto::GraphRef& _internal_graph() const;
  ::tt::tt_fabric::proto::GraphRef* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::tt::tt_fabric::proto::GraphRef* graph);
  ::tt::tt_fabric::proto::GraphRef* unsafe_arena_release_graph();

  void clear_sub_ref();
  SubRefCase sub_ref_case() const;
  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.GraphRef)
 private:
  class _Internal;
  void set_has_mesh();
  void set_has_graph();

  inline bool has_sub_ref() const;
  inline void clear_has_sub_ref();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr graph_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 graph_id_;
  union SubRefUnion {
    SubRefUnion() {}
    ::tt::tt_fabric::proto::MeshRef* mesh_;
    ::tt::tt_fabric::proto::GraphRef* graph_;
  } sub_ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class MeshRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.MeshRef) */ {
 public:
  inline MeshRef() : MeshRef(nullptr) {};
  virtual ~MeshRef();

  MeshRef(const MeshRef& from);
  MeshRef(MeshRef&& from) noexcept
    : MeshRef() {
    *this = ::std::move(from);
  }

  inline MeshRef& operator=(const MeshRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshRef& operator=(MeshRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshRef* internal_default_instance() {
    return reinterpret_cast<const MeshRef*>(
               &_MeshRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MeshRef& a, MeshRef& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshRef* New() const final {
    return CreateMaybeMessage<MeshRef>(nullptr);
  }

  MeshRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshRef& from);
  void MergeFrom(const MeshRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.MeshRef";
  }
  protected:
  explicit MeshRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshDescriptorFieldNumber = 1,
    kMeshIdFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
  };
  // string mesh_descriptor = 1;
  void clear_mesh_descriptor();
  const std::string& mesh_descriptor() const;
  void set_mesh_descriptor(const std::string& value);
  void set_mesh_descriptor(std::string&& value);
  void set_mesh_descriptor(const char* value);
  void set_mesh_descriptor(const char* value, size_t size);
  std::string* mutable_mesh_descriptor();
  std::string* release_mesh_descriptor();
  void set_allocated_mesh_descriptor(std::string* mesh_descriptor);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mesh_descriptor();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mesh_descriptor(
      std::string* mesh_descriptor);
  private:
  const std::string& _internal_mesh_descriptor() const;
  void _internal_set_mesh_descriptor(const std::string& value);
  std::string* _internal_mutable_mesh_descriptor();
  public:

  // int32 mesh_id = 2;
  void clear_mesh_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mesh_id() const;
  void set_mesh_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mesh_id() const;
  void _internal_set_mesh_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 device_id = 3;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.MeshRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 mesh_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_id_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class MeshTopology PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.MeshTopology) */ {
 public:
  inline MeshTopology() : MeshTopology(nullptr) {};
  virtual ~MeshTopology();

  MeshTopology(const MeshTopology& from);
  MeshTopology(MeshTopology&& from) noexcept
    : MeshTopology() {
    *this = ::std::move(from);
  }

  inline MeshTopology& operator=(const MeshTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshTopology& operator=(MeshTopology&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshTopology& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshTopology* internal_default_instance() {
    return reinterpret_cast<const MeshTopology*>(
               &_MeshTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MeshTopology& a, MeshTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshTopology* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshTopology* New() const final {
    return CreateMaybeMessage<MeshTopology>(nullptr);
  }

  MeshTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshTopology>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshTopology& from);
  void MergeFrom(const MeshTopology& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshTopology* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.MeshTopology";
  }
  protected:
  explicit MeshTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
  };
  // repeated int32 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dims();

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.MeshTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class TorusTopology PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.TorusTopology) */ {
 public:
  inline TorusTopology() : TorusTopology(nullptr) {};
  virtual ~TorusTopology();

  TorusTopology(const TorusTopology& from);
  TorusTopology(TorusTopology&& from) noexcept
    : TorusTopology() {
    *this = ::std::move(from);
  }

  inline TorusTopology& operator=(const TorusTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorusTopology& operator=(TorusTopology&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorusTopology& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorusTopology* internal_default_instance() {
    return reinterpret_cast<const TorusTopology*>(
               &_TorusTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TorusTopology& a, TorusTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(TorusTopology* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorusTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorusTopology* New() const final {
    return CreateMaybeMessage<TorusTopology>(nullptr);
  }

  TorusTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorusTopology>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorusTopology& from);
  void MergeFrom(const TorusTopology& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorusTopology* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.TorusTopology";
  }
  protected:
  explicit TorusTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TorusTopology_Type Type;
  static constexpr Type INVALID_TYPE =
    TorusTopology_Type_INVALID_TYPE;
  static constexpr Type LINE =
    TorusTopology_Type_LINE;
  static constexpr Type RING =
    TorusTopology_Type_RING;
  static inline bool Type_IsValid(int value) {
    return TorusTopology_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TorusTopology_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TorusTopology_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TorusTopology_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TorusTopology_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TorusTopology_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return TorusTopology_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 3,
    kDimTypesFieldNumber = 4,
  };
  // repeated int32 dims = 3;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dims();

  // repeated .tt.tt_fabric.proto.TorusTopology.Type dim_types = 4;
  int dim_types_size() const;
  private:
  int _internal_dim_types_size() const;
  public:
  void clear_dim_types();
  private:
  ::tt::tt_fabric::proto::TorusTopology_Type _internal_dim_types(int index) const;
  void _internal_add_dim_types(::tt::tt_fabric::proto::TorusTopology_Type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dim_types();
  public:
  ::tt::tt_fabric::proto::TorusTopology_Type dim_types(int index) const;
  void set_dim_types(int index, ::tt::tt_fabric::proto::TorusTopology_Type value);
  void add_dim_types(::tt::tt_fabric::proto::TorusTopology_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dim_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dim_types();

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.TorusTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dim_types_;
  mutable std::atomic<int> _dim_types_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class GraphTopology PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.GraphTopology) */ {
 public:
  inline GraphTopology() : GraphTopology(nullptr) {};
  virtual ~GraphTopology();

  GraphTopology(const GraphTopology& from);
  GraphTopology(GraphTopology&& from) noexcept
    : GraphTopology() {
    *this = ::std::move(from);
  }

  inline GraphTopology& operator=(const GraphTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphTopology& operator=(GraphTopology&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphTopology& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphTopology* internal_default_instance() {
    return reinterpret_cast<const GraphTopology*>(
               &_GraphTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GraphTopology& a, GraphTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphTopology* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphTopology* New() const final {
    return CreateMaybeMessage<GraphTopology>(nullptr);
  }

  GraphTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphTopology>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphTopology& from);
  void MergeFrom(const GraphTopology& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphTopology* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.GraphTopology";
  }
  protected:
  explicit GraphTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GraphTopology_Type Type;
  static constexpr Type INVALID_TYPE =
    GraphTopology_Type_INVALID_TYPE;
  static constexpr Type ALL_TO_ALL =
    GraphTopology_Type_ALL_TO_ALL;
  static constexpr Type RING =
    GraphTopology_Type_RING;
  static inline bool Type_IsValid(int value) {
    return GraphTopology_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GraphTopology_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GraphTopology_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GraphTopology_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GraphTopology_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GraphTopology_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GraphTopology_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kLayoutTypeFieldNumber = 1,
  };
  // .tt.tt_fabric.proto.Channels channels = 2;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  const ::tt::tt_fabric::proto::Channels& channels() const;
  ::tt::tt_fabric::proto::Channels* release_channels();
  ::tt::tt_fabric::proto::Channels* mutable_channels();
  void set_allocated_channels(::tt::tt_fabric::proto::Channels* channels);
  private:
  const ::tt::tt_fabric::proto::Channels& _internal_channels() const;
  ::tt::tt_fabric::proto::Channels* _internal_mutable_channels();
  public:
  void unsafe_arena_set_allocated_channels(
      ::tt::tt_fabric::proto::Channels* channels);
  ::tt::tt_fabric::proto::Channels* unsafe_arena_release_channels();

  // .tt.tt_fabric.proto.GraphTopology.Type layout_type = 1;
  void clear_layout_type();
  ::tt::tt_fabric::proto::GraphTopology_Type layout_type() const;
  void set_layout_type(::tt::tt_fabric::proto::GraphTopology_Type value);
  private:
  ::tt::tt_fabric::proto::GraphTopology_Type _internal_layout_type() const;
  void _internal_set_layout_type(::tt::tt_fabric::proto::GraphTopology_Type value);
  public:

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.GraphTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tt::tt_fabric::proto::Channels* channels_;
  int layout_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class Channels PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.Channels) */ {
 public:
  inline Channels() : Channels(nullptr) {};
  virtual ~Channels();

  Channels(const Channels& from);
  Channels(Channels&& from) noexcept
    : Channels() {
    *this = ::std::move(from);
  }

  inline Channels& operator=(const Channels& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channels& operator=(Channels&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Channels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Channels* internal_default_instance() {
    return reinterpret_cast<const Channels*>(
               &_Channels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Channels& a, Channels& b) {
    a.Swap(&b);
  }
  inline void Swap(Channels* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channels* New() const final {
    return CreateMaybeMessage<Channels>(nullptr);
  }

  Channels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Channels& from);
  void MergeFrom(const Channels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.Channels";
  }
  protected:
  explicit Channels(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kPolicyFieldNumber = 2,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .tt.tt_fabric.proto.Policy policy = 2;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  ::tt::tt_fabric::proto::Policy policy() const;
  void set_policy(::tt::tt_fabric::proto::Policy value);
  private:
  ::tt::tt_fabric::proto::Policy _internal_policy() const;
  void _internal_set_policy(::tt::tt_fabric::proto::Policy value);
  public:

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.Channels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  int policy_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class Connection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tt.tt_fabric.proto.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {};
  virtual ~Connection();

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const final {
    return CreateMaybeMessage<Connection>(nullptr);
  }

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tt.tt_fabric.proto.Connection";
  }
  protected:
  explicit Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto);
    return ::descriptor_table_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kDirectionalFieldNumber = 3,
  };
  // repeated .tt.tt_fabric.proto.NodeRef nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::tt::tt_fabric::proto::NodeRef* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >*
      mutable_nodes();
  private:
  const ::tt::tt_fabric::proto::NodeRef& _internal_nodes(int index) const;
  ::tt::tt_fabric::proto::NodeRef* _internal_add_nodes();
  public:
  const ::tt::tt_fabric::proto::NodeRef& nodes(int index) const;
  ::tt::tt_fabric::proto::NodeRef* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >&
      nodes() const;

  // .tt.tt_fabric.proto.Channels channels = 2;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  const ::tt::tt_fabric::proto::Channels& channels() const;
  ::tt::tt_fabric::proto::Channels* release_channels();
  ::tt::tt_fabric::proto::Channels* mutable_channels();
  void set_allocated_channels(::tt::tt_fabric::proto::Channels* channels);
  private:
  const ::tt::tt_fabric::proto::Channels& _internal_channels() const;
  ::tt::tt_fabric::proto::Channels* _internal_mutable_channels();
  public:
  void unsafe_arena_set_allocated_channels(
      ::tt::tt_fabric::proto::Channels* channels);
  ::tt::tt_fabric::proto::Channels* unsafe_arena_release_channels();

  // bool directional = 3;
  bool has_directional() const;
  private:
  bool _internal_has_directional() const;
  public:
  void clear_directional();
  bool directional() const;
  void set_directional(bool value);
  private:
  bool _internal_directional() const;
  void _internal_set_directional(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tt.tt_fabric.proto.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef > nodes_;
  ::tt::tt_fabric::proto::Channels* channels_;
  bool directional_;
  friend struct ::TableStruct_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MeshGraphDescriptor

// repeated .tt.tt_fabric.proto.MeshDescriptor mesh_descriptors = 1;
inline int MeshGraphDescriptor::_internal_mesh_descriptors_size() const {
  return mesh_descriptors_.size();
}
inline int MeshGraphDescriptor::mesh_descriptors_size() const {
  return _internal_mesh_descriptors_size();
}
inline void MeshGraphDescriptor::clear_mesh_descriptors() {
  mesh_descriptors_.Clear();
}
inline ::tt::tt_fabric::proto::MeshDescriptor* MeshGraphDescriptor::mutable_mesh_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshGraphDescriptor.mesh_descriptors)
  return mesh_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor >*
MeshGraphDescriptor::mutable_mesh_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.MeshGraphDescriptor.mesh_descriptors)
  return &mesh_descriptors_;
}
inline const ::tt::tt_fabric::proto::MeshDescriptor& MeshGraphDescriptor::_internal_mesh_descriptors(int index) const {
  return mesh_descriptors_.Get(index);
}
inline const ::tt::tt_fabric::proto::MeshDescriptor& MeshGraphDescriptor::mesh_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshGraphDescriptor.mesh_descriptors)
  return _internal_mesh_descriptors(index);
}
inline ::tt::tt_fabric::proto::MeshDescriptor* MeshGraphDescriptor::_internal_add_mesh_descriptors() {
  return mesh_descriptors_.Add();
}
inline ::tt::tt_fabric::proto::MeshDescriptor* MeshGraphDescriptor::add_mesh_descriptors() {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.MeshGraphDescriptor.mesh_descriptors)
  return _internal_add_mesh_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor >&
MeshGraphDescriptor::mesh_descriptors() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.MeshGraphDescriptor.mesh_descriptors)
  return mesh_descriptors_;
}

// repeated .tt.tt_fabric.proto.GraphDescriptor graph_descriptors = 2;
inline int MeshGraphDescriptor::_internal_graph_descriptors_size() const {
  return graph_descriptors_.size();
}
inline int MeshGraphDescriptor::graph_descriptors_size() const {
  return _internal_graph_descriptors_size();
}
inline void MeshGraphDescriptor::clear_graph_descriptors() {
  graph_descriptors_.Clear();
}
inline ::tt::tt_fabric::proto::GraphDescriptor* MeshGraphDescriptor::mutable_graph_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshGraphDescriptor.graph_descriptors)
  return graph_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::GraphDescriptor >*
MeshGraphDescriptor::mutable_graph_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.MeshGraphDescriptor.graph_descriptors)
  return &graph_descriptors_;
}
inline const ::tt::tt_fabric::proto::GraphDescriptor& MeshGraphDescriptor::_internal_graph_descriptors(int index) const {
  return graph_descriptors_.Get(index);
}
inline const ::tt::tt_fabric::proto::GraphDescriptor& MeshGraphDescriptor::graph_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshGraphDescriptor.graph_descriptors)
  return _internal_graph_descriptors(index);
}
inline ::tt::tt_fabric::proto::GraphDescriptor* MeshGraphDescriptor::_internal_add_graph_descriptors() {
  return graph_descriptors_.Add();
}
inline ::tt::tt_fabric::proto::GraphDescriptor* MeshGraphDescriptor::add_graph_descriptors() {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.MeshGraphDescriptor.graph_descriptors)
  return _internal_add_graph_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::GraphDescriptor >&
MeshGraphDescriptor::graph_descriptors() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.MeshGraphDescriptor.graph_descriptors)
  return graph_descriptors_;
}

// .tt.tt_fabric.proto.NodeRef top_level_instance = 3;
inline bool MeshGraphDescriptor::_internal_has_top_level_instance() const {
  return this != internal_default_instance() && top_level_instance_ != nullptr;
}
inline bool MeshGraphDescriptor::has_top_level_instance() const {
  return _internal_has_top_level_instance();
}
inline void MeshGraphDescriptor::clear_top_level_instance() {
  if (GetArena() == nullptr && top_level_instance_ != nullptr) {
    delete top_level_instance_;
  }
  top_level_instance_ = nullptr;
}
inline const ::tt::tt_fabric::proto::NodeRef& MeshGraphDescriptor::_internal_top_level_instance() const {
  const ::tt::tt_fabric::proto::NodeRef* p = top_level_instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::NodeRef*>(
      &::tt::tt_fabric::proto::_NodeRef_default_instance_);
}
inline const ::tt::tt_fabric::proto::NodeRef& MeshGraphDescriptor::top_level_instance() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshGraphDescriptor.top_level_instance)
  return _internal_top_level_instance();
}
inline void MeshGraphDescriptor::unsafe_arena_set_allocated_top_level_instance(
    ::tt::tt_fabric::proto::NodeRef* top_level_instance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_instance_);
  }
  top_level_instance_ = top_level_instance;
  if (top_level_instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.MeshGraphDescriptor.top_level_instance)
}
inline ::tt::tt_fabric::proto::NodeRef* MeshGraphDescriptor::release_top_level_instance() {
  auto temp = unsafe_arena_release_top_level_instance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::NodeRef* MeshGraphDescriptor::unsafe_arena_release_top_level_instance() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.MeshGraphDescriptor.top_level_instance)
  
  ::tt::tt_fabric::proto::NodeRef* temp = top_level_instance_;
  top_level_instance_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::NodeRef* MeshGraphDescriptor::_internal_mutable_top_level_instance() {
  
  if (top_level_instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::NodeRef>(GetArena());
    top_level_instance_ = p;
  }
  return top_level_instance_;
}
inline ::tt::tt_fabric::proto::NodeRef* MeshGraphDescriptor::mutable_top_level_instance() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshGraphDescriptor.top_level_instance)
  return _internal_mutable_top_level_instance();
}
inline void MeshGraphDescriptor::set_allocated_top_level_instance(::tt::tt_fabric::proto::NodeRef* top_level_instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_level_instance_;
  }
  if (top_level_instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_level_instance);
    if (message_arena != submessage_arena) {
      top_level_instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_instance, submessage_arena);
    }
    
  } else {
    
  }
  top_level_instance_ = top_level_instance;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.MeshGraphDescriptor.top_level_instance)
}

// -------------------------------------------------------------------

// MeshDescriptor_ExpressConnection

// int32 src = 1;
inline void MeshDescriptor_ExpressConnection::clear_src() {
  src_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshDescriptor_ExpressConnection::_internal_src() const {
  return src_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshDescriptor_ExpressConnection::src() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.ExpressConnection.src)
  return _internal_src();
}
inline void MeshDescriptor_ExpressConnection::_internal_set_src(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  src_ = value;
}
inline void MeshDescriptor_ExpressConnection::set_src(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshDescriptor.ExpressConnection.src)
}

// int32 dst = 2;
inline void MeshDescriptor_ExpressConnection::clear_dst() {
  dst_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshDescriptor_ExpressConnection::_internal_dst() const {
  return dst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshDescriptor_ExpressConnection::dst() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.ExpressConnection.dst)
  return _internal_dst();
}
inline void MeshDescriptor_ExpressConnection::_internal_set_dst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dst_ = value;
}
inline void MeshDescriptor_ExpressConnection::set_dst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dst(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshDescriptor.ExpressConnection.dst)
}

// -------------------------------------------------------------------

// MeshDescriptor

// string name = 1;
inline void MeshDescriptor::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshDescriptor::name() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.name)
  return _internal_name();
}
inline void MeshDescriptor::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshDescriptor.name)
}
inline std::string* MeshDescriptor::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshDescriptor.name)
  return _internal_mutable_name();
}
inline const std::string& MeshDescriptor::_internal_name() const {
  return name_.Get();
}
inline void MeshDescriptor::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshDescriptor::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tt.tt_fabric.proto.MeshDescriptor.name)
}
inline void MeshDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tt.tt_fabric.proto.MeshDescriptor.name)
}
inline void MeshDescriptor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tt.tt_fabric.proto.MeshDescriptor.name)
}
inline std::string* MeshDescriptor::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.MeshDescriptor.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.MeshDescriptor.name)
}
inline std::string* MeshDescriptor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.MeshDescriptor.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshDescriptor::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.MeshDescriptor.name)
}

// .tt.tt_fabric.proto.Architecture arch = 2;
inline void MeshDescriptor::clear_arch() {
  arch_ = 0;
}
inline ::tt::tt_fabric::proto::Architecture MeshDescriptor::_internal_arch() const {
  return static_cast< ::tt::tt_fabric::proto::Architecture >(arch_);
}
inline ::tt::tt_fabric::proto::Architecture MeshDescriptor::arch() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.arch)
  return _internal_arch();
}
inline void MeshDescriptor::_internal_set_arch(::tt::tt_fabric::proto::Architecture value) {
  
  arch_ = value;
}
inline void MeshDescriptor::set_arch(::tt::tt_fabric::proto::Architecture value) {
  _internal_set_arch(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshDescriptor.arch)
}

// .tt.tt_fabric.proto.TorusTopology device_topology = 3;
inline bool MeshDescriptor::_internal_has_device_topology() const {
  return this != internal_default_instance() && device_topology_ != nullptr;
}
inline bool MeshDescriptor::has_device_topology() const {
  return _internal_has_device_topology();
}
inline void MeshDescriptor::clear_device_topology() {
  if (GetArena() == nullptr && device_topology_ != nullptr) {
    delete device_topology_;
  }
  device_topology_ = nullptr;
}
inline const ::tt::tt_fabric::proto::TorusTopology& MeshDescriptor::_internal_device_topology() const {
  const ::tt::tt_fabric::proto::TorusTopology* p = device_topology_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::TorusTopology*>(
      &::tt::tt_fabric::proto::_TorusTopology_default_instance_);
}
inline const ::tt::tt_fabric::proto::TorusTopology& MeshDescriptor::device_topology() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.device_topology)
  return _internal_device_topology();
}
inline void MeshDescriptor::unsafe_arena_set_allocated_device_topology(
    ::tt::tt_fabric::proto::TorusTopology* device_topology) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_topology_);
  }
  device_topology_ = device_topology;
  if (device_topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.MeshDescriptor.device_topology)
}
inline ::tt::tt_fabric::proto::TorusTopology* MeshDescriptor::release_device_topology() {
  auto temp = unsafe_arena_release_device_topology();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::TorusTopology* MeshDescriptor::unsafe_arena_release_device_topology() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.MeshDescriptor.device_topology)
  
  ::tt::tt_fabric::proto::TorusTopology* temp = device_topology_;
  device_topology_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::TorusTopology* MeshDescriptor::_internal_mutable_device_topology() {
  
  if (device_topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::TorusTopology>(GetArena());
    device_topology_ = p;
  }
  return device_topology_;
}
inline ::tt::tt_fabric::proto::TorusTopology* MeshDescriptor::mutable_device_topology() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshDescriptor.device_topology)
  return _internal_mutable_device_topology();
}
inline void MeshDescriptor::set_allocated_device_topology(::tt::tt_fabric::proto::TorusTopology* device_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_topology_;
  }
  if (device_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device_topology);
    if (message_arena != submessage_arena) {
      device_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_topology, submessage_arena);
    }
    
  } else {
    
  }
  device_topology_ = device_topology;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.MeshDescriptor.device_topology)
}

// .tt.tt_fabric.proto.Channels channels = 4;
inline bool MeshDescriptor::_internal_has_channels() const {
  return this != internal_default_instance() && channels_ != nullptr;
}
inline bool MeshDescriptor::has_channels() const {
  return _internal_has_channels();
}
inline void MeshDescriptor::clear_channels() {
  if (GetArena() == nullptr && channels_ != nullptr) {
    delete channels_;
  }
  channels_ = nullptr;
}
inline const ::tt::tt_fabric::proto::Channels& MeshDescriptor::_internal_channels() const {
  const ::tt::tt_fabric::proto::Channels* p = channels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::Channels*>(
      &::tt::tt_fabric::proto::_Channels_default_instance_);
}
inline const ::tt::tt_fabric::proto::Channels& MeshDescriptor::channels() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.channels)
  return _internal_channels();
}
inline void MeshDescriptor::unsafe_arena_set_allocated_channels(
    ::tt::tt_fabric::proto::Channels* channels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channels_);
  }
  channels_ = channels;
  if (channels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.MeshDescriptor.channels)
}
inline ::tt::tt_fabric::proto::Channels* MeshDescriptor::release_channels() {
  auto temp = unsafe_arena_release_channels();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::Channels* MeshDescriptor::unsafe_arena_release_channels() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.MeshDescriptor.channels)
  
  ::tt::tt_fabric::proto::Channels* temp = channels_;
  channels_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::Channels* MeshDescriptor::_internal_mutable_channels() {
  
  if (channels_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::Channels>(GetArena());
    channels_ = p;
  }
  return channels_;
}
inline ::tt::tt_fabric::proto::Channels* MeshDescriptor::mutable_channels() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshDescriptor.channels)
  return _internal_mutable_channels();
}
inline void MeshDescriptor::set_allocated_channels(::tt::tt_fabric::proto::Channels* channels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channels_;
  }
  if (channels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channels);
    if (message_arena != submessage_arena) {
      channels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channels, submessage_arena);
    }
    
  } else {
    
  }
  channels_ = channels;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.MeshDescriptor.channels)
}

// .tt.tt_fabric.proto.MeshTopology host_topology = 5;
inline bool MeshDescriptor::_internal_has_host_topology() const {
  return this != internal_default_instance() && host_topology_ != nullptr;
}
inline bool MeshDescriptor::has_host_topology() const {
  return _internal_has_host_topology();
}
inline void MeshDescriptor::clear_host_topology() {
  if (GetArena() == nullptr && host_topology_ != nullptr) {
    delete host_topology_;
  }
  host_topology_ = nullptr;
}
inline const ::tt::tt_fabric::proto::MeshTopology& MeshDescriptor::_internal_host_topology() const {
  const ::tt::tt_fabric::proto::MeshTopology* p = host_topology_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::MeshTopology*>(
      &::tt::tt_fabric::proto::_MeshTopology_default_instance_);
}
inline const ::tt::tt_fabric::proto::MeshTopology& MeshDescriptor::host_topology() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.host_topology)
  return _internal_host_topology();
}
inline void MeshDescriptor::unsafe_arena_set_allocated_host_topology(
    ::tt::tt_fabric::proto::MeshTopology* host_topology) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_topology_);
  }
  host_topology_ = host_topology;
  if (host_topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.MeshDescriptor.host_topology)
}
inline ::tt::tt_fabric::proto::MeshTopology* MeshDescriptor::release_host_topology() {
  auto temp = unsafe_arena_release_host_topology();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::MeshTopology* MeshDescriptor::unsafe_arena_release_host_topology() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.MeshDescriptor.host_topology)
  
  ::tt::tt_fabric::proto::MeshTopology* temp = host_topology_;
  host_topology_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::MeshTopology* MeshDescriptor::_internal_mutable_host_topology() {
  
  if (host_topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::MeshTopology>(GetArena());
    host_topology_ = p;
  }
  return host_topology_;
}
inline ::tt::tt_fabric::proto::MeshTopology* MeshDescriptor::mutable_host_topology() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshDescriptor.host_topology)
  return _internal_mutable_host_topology();
}
inline void MeshDescriptor::set_allocated_host_topology(::tt::tt_fabric::proto::MeshTopology* host_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete host_topology_;
  }
  if (host_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(host_topology);
    if (message_arena != submessage_arena) {
      host_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_topology, submessage_arena);
    }
    
  } else {
    
  }
  host_topology_ = host_topology;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.MeshDescriptor.host_topology)
}

// repeated .tt.tt_fabric.proto.MeshDescriptor.ExpressConnection express_connections = 7;
inline int MeshDescriptor::_internal_express_connections_size() const {
  return express_connections_.size();
}
inline int MeshDescriptor::express_connections_size() const {
  return _internal_express_connections_size();
}
inline void MeshDescriptor::clear_express_connections() {
  express_connections_.Clear();
}
inline ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* MeshDescriptor::mutable_express_connections(int index) {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshDescriptor.express_connections)
  return express_connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection >*
MeshDescriptor::mutable_express_connections() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.MeshDescriptor.express_connections)
  return &express_connections_;
}
inline const ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection& MeshDescriptor::_internal_express_connections(int index) const {
  return express_connections_.Get(index);
}
inline const ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection& MeshDescriptor::express_connections(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshDescriptor.express_connections)
  return _internal_express_connections(index);
}
inline ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* MeshDescriptor::_internal_add_express_connections() {
  return express_connections_.Add();
}
inline ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection* MeshDescriptor::add_express_connections() {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.MeshDescriptor.express_connections)
  return _internal_add_express_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::MeshDescriptor_ExpressConnection >&
MeshDescriptor::express_connections() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.MeshDescriptor.express_connections)
  return express_connections_;
}

// -------------------------------------------------------------------

// GraphDescriptor

// string name = 1;
inline void GraphDescriptor::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDescriptor::name() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphDescriptor.name)
  return _internal_name();
}
inline void GraphDescriptor::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.GraphDescriptor.name)
}
inline std::string* GraphDescriptor::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphDescriptor.name)
  return _internal_mutable_name();
}
inline const std::string& GraphDescriptor::_internal_name() const {
  return name_.Get();
}
inline void GraphDescriptor::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDescriptor::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tt.tt_fabric.proto.GraphDescriptor.name)
}
inline void GraphDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tt.tt_fabric.proto.GraphDescriptor.name)
}
inline void GraphDescriptor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tt.tt_fabric.proto.GraphDescriptor.name)
}
inline std::string* GraphDescriptor::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphDescriptor.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.GraphDescriptor.name)
}
inline std::string* GraphDescriptor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.GraphDescriptor.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GraphDescriptor::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphDescriptor.name)
}

// string type = 2;
inline void GraphDescriptor::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDescriptor::type() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphDescriptor.type)
  return _internal_type();
}
inline void GraphDescriptor::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.GraphDescriptor.type)
}
inline std::string* GraphDescriptor::mutable_type() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphDescriptor.type)
  return _internal_mutable_type();
}
inline const std::string& GraphDescriptor::_internal_type() const {
  return type_.Get();
}
inline void GraphDescriptor::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDescriptor::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tt.tt_fabric.proto.GraphDescriptor.type)
}
inline void GraphDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tt.tt_fabric.proto.GraphDescriptor.type)
}
inline void GraphDescriptor::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tt.tt_fabric.proto.GraphDescriptor.type)
}
inline std::string* GraphDescriptor::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphDescriptor.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.GraphDescriptor.type)
}
inline std::string* GraphDescriptor::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.GraphDescriptor.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GraphDescriptor::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphDescriptor.type)
}

// repeated .tt.tt_fabric.proto.NodeRef instances = 3;
inline int GraphDescriptor::_internal_instances_size() const {
  return instances_.size();
}
inline int GraphDescriptor::instances_size() const {
  return _internal_instances_size();
}
inline void GraphDescriptor::clear_instances() {
  instances_.Clear();
}
inline ::tt::tt_fabric::proto::NodeRef* GraphDescriptor::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphDescriptor.instances)
  return instances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >*
GraphDescriptor::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.GraphDescriptor.instances)
  return &instances_;
}
inline const ::tt::tt_fabric::proto::NodeRef& GraphDescriptor::_internal_instances(int index) const {
  return instances_.Get(index);
}
inline const ::tt::tt_fabric::proto::NodeRef& GraphDescriptor::instances(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphDescriptor.instances)
  return _internal_instances(index);
}
inline ::tt::tt_fabric::proto::NodeRef* GraphDescriptor::_internal_add_instances() {
  return instances_.Add();
}
inline ::tt::tt_fabric::proto::NodeRef* GraphDescriptor::add_instances() {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.GraphDescriptor.instances)
  return _internal_add_instances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >&
GraphDescriptor::instances() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.GraphDescriptor.instances)
  return instances_;
}

// .tt.tt_fabric.proto.GraphTopology graph_topology = 4;
inline bool GraphDescriptor::_internal_has_graph_topology() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || graph_topology_ != nullptr);
  return value;
}
inline bool GraphDescriptor::has_graph_topology() const {
  return _internal_has_graph_topology();
}
inline void GraphDescriptor::clear_graph_topology() {
  if (GetArena() == nullptr && graph_topology_ != nullptr) {
    delete graph_topology_;
  }
  graph_topology_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tt::tt_fabric::proto::GraphTopology& GraphDescriptor::_internal_graph_topology() const {
  const ::tt::tt_fabric::proto::GraphTopology* p = graph_topology_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::GraphTopology*>(
      &::tt::tt_fabric::proto::_GraphTopology_default_instance_);
}
inline const ::tt::tt_fabric::proto::GraphTopology& GraphDescriptor::graph_topology() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphDescriptor.graph_topology)
  return _internal_graph_topology();
}
inline void GraphDescriptor::unsafe_arena_set_allocated_graph_topology(
    ::tt::tt_fabric::proto::GraphTopology* graph_topology) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_topology_);
  }
  graph_topology_ = graph_topology;
  if (graph_topology) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphDescriptor.graph_topology)
}
inline ::tt::tt_fabric::proto::GraphTopology* GraphDescriptor::release_graph_topology() {
  auto temp = unsafe_arena_release_graph_topology();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::GraphTopology* GraphDescriptor::unsafe_arena_release_graph_topology() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphDescriptor.graph_topology)
  _has_bits_[0] &= ~0x00000001u;
  ::tt::tt_fabric::proto::GraphTopology* temp = graph_topology_;
  graph_topology_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::GraphTopology* GraphDescriptor::_internal_mutable_graph_topology() {
  _has_bits_[0] |= 0x00000001u;
  if (graph_topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::GraphTopology>(GetArena());
    graph_topology_ = p;
  }
  return graph_topology_;
}
inline ::tt::tt_fabric::proto::GraphTopology* GraphDescriptor::mutable_graph_topology() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphDescriptor.graph_topology)
  return _internal_mutable_graph_topology();
}
inline void GraphDescriptor::set_allocated_graph_topology(::tt::tt_fabric::proto::GraphTopology* graph_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_topology_;
  }
  if (graph_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph_topology);
    if (message_arena != submessage_arena) {
      graph_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_topology, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  graph_topology_ = graph_topology;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.GraphDescriptor.graph_topology)
}

// repeated .tt.tt_fabric.proto.Connection connections = 5;
inline int GraphDescriptor::_internal_connections_size() const {
  return connections_.size();
}
inline int GraphDescriptor::connections_size() const {
  return _internal_connections_size();
}
inline void GraphDescriptor::clear_connections() {
  connections_.Clear();
}
inline ::tt::tt_fabric::proto::Connection* GraphDescriptor::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphDescriptor.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::Connection >*
GraphDescriptor::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.GraphDescriptor.connections)
  return &connections_;
}
inline const ::tt::tt_fabric::proto::Connection& GraphDescriptor::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::tt::tt_fabric::proto::Connection& GraphDescriptor::connections(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphDescriptor.connections)
  return _internal_connections(index);
}
inline ::tt::tt_fabric::proto::Connection* GraphDescriptor::_internal_add_connections() {
  return connections_.Add();
}
inline ::tt::tt_fabric::proto::Connection* GraphDescriptor::add_connections() {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.GraphDescriptor.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::Connection >&
GraphDescriptor::connections() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.GraphDescriptor.connections)
  return connections_;
}

// -------------------------------------------------------------------

// NodeRef

// .tt.tt_fabric.proto.MeshRef mesh = 1;
inline bool NodeRef::_internal_has_mesh() const {
  return node_ref_case() == kMesh;
}
inline bool NodeRef::has_mesh() const {
  return _internal_has_mesh();
}
inline void NodeRef::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline void NodeRef::clear_mesh() {
  if (_internal_has_mesh()) {
    if (GetArena() == nullptr) {
      delete node_ref_.mesh_;
    }
    clear_has_node_ref();
  }
}
inline ::tt::tt_fabric::proto::MeshRef* NodeRef::release_mesh() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.NodeRef.mesh)
  if (_internal_has_mesh()) {
    clear_has_node_ref();
      ::tt::tt_fabric::proto::MeshRef* temp = node_ref_.mesh_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    node_ref_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tt::tt_fabric::proto::MeshRef& NodeRef::_internal_mesh() const {
  return _internal_has_mesh()
      ? *node_ref_.mesh_
      : *reinterpret_cast< ::tt::tt_fabric::proto::MeshRef*>(&::tt::tt_fabric::proto::_MeshRef_default_instance_);
}
inline const ::tt::tt_fabric::proto::MeshRef& NodeRef::mesh() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.NodeRef.mesh)
  return _internal_mesh();
}
inline ::tt::tt_fabric::proto::MeshRef* NodeRef::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.NodeRef.mesh)
  if (_internal_has_mesh()) {
    clear_has_node_ref();
    ::tt::tt_fabric::proto::MeshRef* temp = node_ref_.mesh_;
    node_ref_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NodeRef::unsafe_arena_set_allocated_mesh(::tt::tt_fabric::proto::MeshRef* mesh) {
  clear_node_ref();
  if (mesh) {
    set_has_mesh();
    node_ref_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.NodeRef.mesh)
}
inline ::tt::tt_fabric::proto::MeshRef* NodeRef::_internal_mutable_mesh() {
  if (!_internal_has_mesh()) {
    clear_node_ref();
    set_has_mesh();
    node_ref_.mesh_ = CreateMaybeMessage< ::tt::tt_fabric::proto::MeshRef >(GetArena());
  }
  return node_ref_.mesh_;
}
inline ::tt::tt_fabric::proto::MeshRef* NodeRef::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.NodeRef.mesh)
  return _internal_mutable_mesh();
}

// .tt.tt_fabric.proto.GraphRef graph = 2;
inline bool NodeRef::_internal_has_graph() const {
  return node_ref_case() == kGraph;
}
inline bool NodeRef::has_graph() const {
  return _internal_has_graph();
}
inline void NodeRef::set_has_graph() {
  _oneof_case_[0] = kGraph;
}
inline void NodeRef::clear_graph() {
  if (_internal_has_graph()) {
    if (GetArena() == nullptr) {
      delete node_ref_.graph_;
    }
    clear_has_node_ref();
  }
}
inline ::tt::tt_fabric::proto::GraphRef* NodeRef::release_graph() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.NodeRef.graph)
  if (_internal_has_graph()) {
    clear_has_node_ref();
      ::tt::tt_fabric::proto::GraphRef* temp = node_ref_.graph_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    node_ref_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tt::tt_fabric::proto::GraphRef& NodeRef::_internal_graph() const {
  return _internal_has_graph()
      ? *node_ref_.graph_
      : *reinterpret_cast< ::tt::tt_fabric::proto::GraphRef*>(&::tt::tt_fabric::proto::_GraphRef_default_instance_);
}
inline const ::tt::tt_fabric::proto::GraphRef& NodeRef::graph() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.NodeRef.graph)
  return _internal_graph();
}
inline ::tt::tt_fabric::proto::GraphRef* NodeRef::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.NodeRef.graph)
  if (_internal_has_graph()) {
    clear_has_node_ref();
    ::tt::tt_fabric::proto::GraphRef* temp = node_ref_.graph_;
    node_ref_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NodeRef::unsafe_arena_set_allocated_graph(::tt::tt_fabric::proto::GraphRef* graph) {
  clear_node_ref();
  if (graph) {
    set_has_graph();
    node_ref_.graph_ = graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.NodeRef.graph)
}
inline ::tt::tt_fabric::proto::GraphRef* NodeRef::_internal_mutable_graph() {
  if (!_internal_has_graph()) {
    clear_node_ref();
    set_has_graph();
    node_ref_.graph_ = CreateMaybeMessage< ::tt::tt_fabric::proto::GraphRef >(GetArena());
  }
  return node_ref_.graph_;
}
inline ::tt::tt_fabric::proto::GraphRef* NodeRef::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.NodeRef.graph)
  return _internal_mutable_graph();
}

inline bool NodeRef::has_node_ref() const {
  return node_ref_case() != NODE_REF_NOT_SET;
}
inline void NodeRef::clear_has_node_ref() {
  _oneof_case_[0] = NODE_REF_NOT_SET;
}
inline NodeRef::NodeRefCase NodeRef::node_ref_case() const {
  return NodeRef::NodeRefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GraphRef

// string graph_descriptor = 1;
inline void GraphRef::clear_graph_descriptor() {
  graph_descriptor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphRef::graph_descriptor() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphRef.graph_descriptor)
  return _internal_graph_descriptor();
}
inline void GraphRef::set_graph_descriptor(const std::string& value) {
  _internal_set_graph_descriptor(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.GraphRef.graph_descriptor)
}
inline std::string* GraphRef::mutable_graph_descriptor() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphRef.graph_descriptor)
  return _internal_mutable_graph_descriptor();
}
inline const std::string& GraphRef::_internal_graph_descriptor() const {
  return graph_descriptor_.Get();
}
inline void GraphRef::_internal_set_graph_descriptor(const std::string& value) {
  
  graph_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphRef::set_graph_descriptor(std::string&& value) {
  
  graph_descriptor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tt.tt_fabric.proto.GraphRef.graph_descriptor)
}
inline void GraphRef::set_graph_descriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  graph_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tt.tt_fabric.proto.GraphRef.graph_descriptor)
}
inline void GraphRef::set_graph_descriptor(const char* value,
    size_t size) {
  
  graph_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tt.tt_fabric.proto.GraphRef.graph_descriptor)
}
inline std::string* GraphRef::_internal_mutable_graph_descriptor() {
  
  return graph_descriptor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphRef::release_graph_descriptor() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphRef.graph_descriptor)
  return graph_descriptor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphRef::set_allocated_graph_descriptor(std::string* graph_descriptor) {
  if (graph_descriptor != nullptr) {
    
  } else {
    
  }
  graph_descriptor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), graph_descriptor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.GraphRef.graph_descriptor)
}
inline std::string* GraphRef::unsafe_arena_release_graph_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.GraphRef.graph_descriptor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return graph_descriptor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GraphRef::unsafe_arena_set_allocated_graph_descriptor(
    std::string* graph_descriptor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (graph_descriptor != nullptr) {
    
  } else {
    
  }
  graph_descriptor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      graph_descriptor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphRef.graph_descriptor)
}

// int32 graph_id = 2;
inline void GraphRef::clear_graph_id() {
  graph_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphRef::_internal_graph_id() const {
  return graph_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphRef::graph_id() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphRef.graph_id)
  return _internal_graph_id();
}
inline void GraphRef::_internal_set_graph_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  graph_id_ = value;
}
inline void GraphRef::set_graph_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_graph_id(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.GraphRef.graph_id)
}

// .tt.tt_fabric.proto.MeshRef mesh = 3;
inline bool GraphRef::_internal_has_mesh() const {
  return sub_ref_case() == kMesh;
}
inline bool GraphRef::has_mesh() const {
  return _internal_has_mesh();
}
inline void GraphRef::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline void GraphRef::clear_mesh() {
  if (_internal_has_mesh()) {
    if (GetArena() == nullptr) {
      delete sub_ref_.mesh_;
    }
    clear_has_sub_ref();
  }
}
inline ::tt::tt_fabric::proto::MeshRef* GraphRef::release_mesh() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphRef.mesh)
  if (_internal_has_mesh()) {
    clear_has_sub_ref();
      ::tt::tt_fabric::proto::MeshRef* temp = sub_ref_.mesh_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_ref_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tt::tt_fabric::proto::MeshRef& GraphRef::_internal_mesh() const {
  return _internal_has_mesh()
      ? *sub_ref_.mesh_
      : *reinterpret_cast< ::tt::tt_fabric::proto::MeshRef*>(&::tt::tt_fabric::proto::_MeshRef_default_instance_);
}
inline const ::tt::tt_fabric::proto::MeshRef& GraphRef::mesh() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphRef.mesh)
  return _internal_mesh();
}
inline ::tt::tt_fabric::proto::MeshRef* GraphRef::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.GraphRef.mesh)
  if (_internal_has_mesh()) {
    clear_has_sub_ref();
    ::tt::tt_fabric::proto::MeshRef* temp = sub_ref_.mesh_;
    sub_ref_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GraphRef::unsafe_arena_set_allocated_mesh(::tt::tt_fabric::proto::MeshRef* mesh) {
  clear_sub_ref();
  if (mesh) {
    set_has_mesh();
    sub_ref_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphRef.mesh)
}
inline ::tt::tt_fabric::proto::MeshRef* GraphRef::_internal_mutable_mesh() {
  if (!_internal_has_mesh()) {
    clear_sub_ref();
    set_has_mesh();
    sub_ref_.mesh_ = CreateMaybeMessage< ::tt::tt_fabric::proto::MeshRef >(GetArena());
  }
  return sub_ref_.mesh_;
}
inline ::tt::tt_fabric::proto::MeshRef* GraphRef::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphRef.mesh)
  return _internal_mutable_mesh();
}

// .tt.tt_fabric.proto.GraphRef graph = 4;
inline bool GraphRef::_internal_has_graph() const {
  return sub_ref_case() == kGraph;
}
inline bool GraphRef::has_graph() const {
  return _internal_has_graph();
}
inline void GraphRef::set_has_graph() {
  _oneof_case_[0] = kGraph;
}
inline void GraphRef::clear_graph() {
  if (_internal_has_graph()) {
    if (GetArena() == nullptr) {
      delete sub_ref_.graph_;
    }
    clear_has_sub_ref();
  }
}
inline ::tt::tt_fabric::proto::GraphRef* GraphRef::release_graph() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphRef.graph)
  if (_internal_has_graph()) {
    clear_has_sub_ref();
      ::tt::tt_fabric::proto::GraphRef* temp = sub_ref_.graph_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sub_ref_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tt::tt_fabric::proto::GraphRef& GraphRef::_internal_graph() const {
  return _internal_has_graph()
      ? *sub_ref_.graph_
      : *reinterpret_cast< ::tt::tt_fabric::proto::GraphRef*>(&::tt::tt_fabric::proto::_GraphRef_default_instance_);
}
inline const ::tt::tt_fabric::proto::GraphRef& GraphRef::graph() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphRef.graph)
  return _internal_graph();
}
inline ::tt::tt_fabric::proto::GraphRef* GraphRef::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.GraphRef.graph)
  if (_internal_has_graph()) {
    clear_has_sub_ref();
    ::tt::tt_fabric::proto::GraphRef* temp = sub_ref_.graph_;
    sub_ref_.graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GraphRef::unsafe_arena_set_allocated_graph(::tt::tt_fabric::proto::GraphRef* graph) {
  clear_sub_ref();
  if (graph) {
    set_has_graph();
    sub_ref_.graph_ = graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphRef.graph)
}
inline ::tt::tt_fabric::proto::GraphRef* GraphRef::_internal_mutable_graph() {
  if (!_internal_has_graph()) {
    clear_sub_ref();
    set_has_graph();
    sub_ref_.graph_ = CreateMaybeMessage< ::tt::tt_fabric::proto::GraphRef >(GetArena());
  }
  return sub_ref_.graph_;
}
inline ::tt::tt_fabric::proto::GraphRef* GraphRef::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphRef.graph)
  return _internal_mutable_graph();
}

inline bool GraphRef::has_sub_ref() const {
  return sub_ref_case() != SUB_REF_NOT_SET;
}
inline void GraphRef::clear_has_sub_ref() {
  _oneof_case_[0] = SUB_REF_NOT_SET;
}
inline GraphRef::SubRefCase GraphRef::sub_ref_case() const {
  return GraphRef::SubRefCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MeshRef

// string mesh_descriptor = 1;
inline void MeshRef::clear_mesh_descriptor() {
  mesh_descriptor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshRef::mesh_descriptor() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
  return _internal_mesh_descriptor();
}
inline void MeshRef::set_mesh_descriptor(const std::string& value) {
  _internal_set_mesh_descriptor(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
}
inline std::string* MeshRef::mutable_mesh_descriptor() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
  return _internal_mutable_mesh_descriptor();
}
inline const std::string& MeshRef::_internal_mesh_descriptor() const {
  return mesh_descriptor_.Get();
}
inline void MeshRef::_internal_set_mesh_descriptor(const std::string& value) {
  
  mesh_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshRef::set_mesh_descriptor(std::string&& value) {
  
  mesh_descriptor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
}
inline void MeshRef::set_mesh_descriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mesh_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
}
inline void MeshRef::set_mesh_descriptor(const char* value,
    size_t size) {
  
  mesh_descriptor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
}
inline std::string* MeshRef::_internal_mutable_mesh_descriptor() {
  
  return mesh_descriptor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshRef::release_mesh_descriptor() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
  return mesh_descriptor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshRef::set_allocated_mesh_descriptor(std::string* mesh_descriptor) {
  if (mesh_descriptor != nullptr) {
    
  } else {
    
  }
  mesh_descriptor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh_descriptor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
}
inline std::string* MeshRef::unsafe_arena_release_mesh_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mesh_descriptor_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshRef::unsafe_arena_set_allocated_mesh_descriptor(
    std::string* mesh_descriptor) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mesh_descriptor != nullptr) {
    
  } else {
    
  }
  mesh_descriptor_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mesh_descriptor, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.MeshRef.mesh_descriptor)
}

// int32 mesh_id = 2;
inline void MeshRef::clear_mesh_id() {
  mesh_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshRef::_internal_mesh_id() const {
  return mesh_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshRef::mesh_id() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshRef.mesh_id)
  return _internal_mesh_id();
}
inline void MeshRef::_internal_set_mesh_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mesh_id_ = value;
}
inline void MeshRef::set_mesh_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mesh_id(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshRef.mesh_id)
}

// int32 device_id = 3;
inline bool MeshRef::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MeshRef::has_device_id() const {
  return _internal_has_device_id();
}
inline void MeshRef::clear_device_id() {
  device_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshRef::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshRef::device_id() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshRef.device_id)
  return _internal_device_id();
}
inline void MeshRef::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  device_id_ = value;
}
inline void MeshRef::set_device_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshRef.device_id)
}

// -------------------------------------------------------------------

// MeshTopology

// repeated int32 dims = 1;
inline int MeshTopology::_internal_dims_size() const {
  return dims_.size();
}
inline int MeshTopology::dims_size() const {
  return _internal_dims_size();
}
inline void MeshTopology::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshTopology::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshTopology::dims(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.MeshTopology.dims)
  return _internal_dims(index);
}
inline void MeshTopology::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.MeshTopology.dims)
}
inline void MeshTopology::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Add(value);
}
inline void MeshTopology::add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.MeshTopology.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MeshTopology::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MeshTopology::dims() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.MeshTopology.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MeshTopology::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MeshTopology::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.MeshTopology.dims)
  return _internal_mutable_dims();
}

// -------------------------------------------------------------------

// TorusTopology

// repeated int32 dims = 3;
inline int TorusTopology::_internal_dims_size() const {
  return dims_.size();
}
inline int TorusTopology::dims_size() const {
  return _internal_dims_size();
}
inline void TorusTopology::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorusTopology::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorusTopology::dims(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.TorusTopology.dims)
  return _internal_dims(index);
}
inline void TorusTopology::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.TorusTopology.dims)
}
inline void TorusTopology::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Add(value);
}
inline void TorusTopology::add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.TorusTopology.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorusTopology::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorusTopology::dims() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.TorusTopology.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorusTopology::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorusTopology::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.TorusTopology.dims)
  return _internal_mutable_dims();
}

// repeated .tt.tt_fabric.proto.TorusTopology.Type dim_types = 4;
inline int TorusTopology::_internal_dim_types_size() const {
  return dim_types_.size();
}
inline int TorusTopology::dim_types_size() const {
  return _internal_dim_types_size();
}
inline void TorusTopology::clear_dim_types() {
  dim_types_.Clear();
}
inline ::tt::tt_fabric::proto::TorusTopology_Type TorusTopology::_internal_dim_types(int index) const {
  return static_cast< ::tt::tt_fabric::proto::TorusTopology_Type >(dim_types_.Get(index));
}
inline ::tt::tt_fabric::proto::TorusTopology_Type TorusTopology::dim_types(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.TorusTopology.dim_types)
  return _internal_dim_types(index);
}
inline void TorusTopology::set_dim_types(int index, ::tt::tt_fabric::proto::TorusTopology_Type value) {
  dim_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.TorusTopology.dim_types)
}
inline void TorusTopology::_internal_add_dim_types(::tt::tt_fabric::proto::TorusTopology_Type value) {
  dim_types_.Add(value);
}
inline void TorusTopology::add_dim_types(::tt::tt_fabric::proto::TorusTopology_Type value) {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.TorusTopology.dim_types)
  _internal_add_dim_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TorusTopology::dim_types() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.TorusTopology.dim_types)
  return dim_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TorusTopology::_internal_mutable_dim_types() {
  return &dim_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TorusTopology::mutable_dim_types() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.TorusTopology.dim_types)
  return _internal_mutable_dim_types();
}

// -------------------------------------------------------------------

// GraphTopology

// .tt.tt_fabric.proto.GraphTopology.Type layout_type = 1;
inline void GraphTopology::clear_layout_type() {
  layout_type_ = 0;
}
inline ::tt::tt_fabric::proto::GraphTopology_Type GraphTopology::_internal_layout_type() const {
  return static_cast< ::tt::tt_fabric::proto::GraphTopology_Type >(layout_type_);
}
inline ::tt::tt_fabric::proto::GraphTopology_Type GraphTopology::layout_type() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphTopology.layout_type)
  return _internal_layout_type();
}
inline void GraphTopology::_internal_set_layout_type(::tt::tt_fabric::proto::GraphTopology_Type value) {
  
  layout_type_ = value;
}
inline void GraphTopology::set_layout_type(::tt::tt_fabric::proto::GraphTopology_Type value) {
  _internal_set_layout_type(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.GraphTopology.layout_type)
}

// .tt.tt_fabric.proto.Channels channels = 2;
inline bool GraphTopology::_internal_has_channels() const {
  return this != internal_default_instance() && channels_ != nullptr;
}
inline bool GraphTopology::has_channels() const {
  return _internal_has_channels();
}
inline void GraphTopology::clear_channels() {
  if (GetArena() == nullptr && channels_ != nullptr) {
    delete channels_;
  }
  channels_ = nullptr;
}
inline const ::tt::tt_fabric::proto::Channels& GraphTopology::_internal_channels() const {
  const ::tt::tt_fabric::proto::Channels* p = channels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::Channels*>(
      &::tt::tt_fabric::proto::_Channels_default_instance_);
}
inline const ::tt::tt_fabric::proto::Channels& GraphTopology::channels() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.GraphTopology.channels)
  return _internal_channels();
}
inline void GraphTopology::unsafe_arena_set_allocated_channels(
    ::tt::tt_fabric::proto::Channels* channels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channels_);
  }
  channels_ = channels;
  if (channels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.GraphTopology.channels)
}
inline ::tt::tt_fabric::proto::Channels* GraphTopology::release_channels() {
  auto temp = unsafe_arena_release_channels();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::Channels* GraphTopology::unsafe_arena_release_channels() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.GraphTopology.channels)
  
  ::tt::tt_fabric::proto::Channels* temp = channels_;
  channels_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::Channels* GraphTopology::_internal_mutable_channels() {
  
  if (channels_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::Channels>(GetArena());
    channels_ = p;
  }
  return channels_;
}
inline ::tt::tt_fabric::proto::Channels* GraphTopology::mutable_channels() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.GraphTopology.channels)
  return _internal_mutable_channels();
}
inline void GraphTopology::set_allocated_channels(::tt::tt_fabric::proto::Channels* channels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channels_;
  }
  if (channels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channels);
    if (message_arena != submessage_arena) {
      channels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channels, submessage_arena);
    }
    
  } else {
    
  }
  channels_ = channels;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.GraphTopology.channels)
}

// -------------------------------------------------------------------

// Channels

// int32 count = 1;
inline void Channels::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Channels::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Channels::count() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.Channels.count)
  return _internal_count();
}
inline void Channels::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Channels::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.Channels.count)
}

// .tt.tt_fabric.proto.Policy policy = 2;
inline bool Channels::_internal_has_policy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Channels::has_policy() const {
  return _internal_has_policy();
}
inline void Channels::clear_policy() {
  policy_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::tt::tt_fabric::proto::Policy Channels::_internal_policy() const {
  return static_cast< ::tt::tt_fabric::proto::Policy >(policy_);
}
inline ::tt::tt_fabric::proto::Policy Channels::policy() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.Channels.policy)
  return _internal_policy();
}
inline void Channels::_internal_set_policy(::tt::tt_fabric::proto::Policy value) {
  _has_bits_[0] |= 0x00000001u;
  policy_ = value;
}
inline void Channels::set_policy(::tt::tt_fabric::proto::Policy value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.Channels.policy)
}

// -------------------------------------------------------------------

// Connection

// repeated .tt.tt_fabric.proto.NodeRef nodes = 1;
inline int Connection::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Connection::nodes_size() const {
  return _internal_nodes_size();
}
inline void Connection::clear_nodes() {
  nodes_.Clear();
}
inline ::tt::tt_fabric::proto::NodeRef* Connection::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.Connection.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >*
Connection::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tt.tt_fabric.proto.Connection.nodes)
  return &nodes_;
}
inline const ::tt::tt_fabric::proto::NodeRef& Connection::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::tt::tt_fabric::proto::NodeRef& Connection::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.Connection.nodes)
  return _internal_nodes(index);
}
inline ::tt::tt_fabric::proto::NodeRef* Connection::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::tt::tt_fabric::proto::NodeRef* Connection::add_nodes() {
  // @@protoc_insertion_point(field_add:tt.tt_fabric.proto.Connection.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tt::tt_fabric::proto::NodeRef >&
Connection::nodes() const {
  // @@protoc_insertion_point(field_list:tt.tt_fabric.proto.Connection.nodes)
  return nodes_;
}

// .tt.tt_fabric.proto.Channels channels = 2;
inline bool Connection::_internal_has_channels() const {
  return this != internal_default_instance() && channels_ != nullptr;
}
inline bool Connection::has_channels() const {
  return _internal_has_channels();
}
inline void Connection::clear_channels() {
  if (GetArena() == nullptr && channels_ != nullptr) {
    delete channels_;
  }
  channels_ = nullptr;
}
inline const ::tt::tt_fabric::proto::Channels& Connection::_internal_channels() const {
  const ::tt::tt_fabric::proto::Channels* p = channels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tt::tt_fabric::proto::Channels*>(
      &::tt::tt_fabric::proto::_Channels_default_instance_);
}
inline const ::tt::tt_fabric::proto::Channels& Connection::channels() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.Connection.channels)
  return _internal_channels();
}
inline void Connection::unsafe_arena_set_allocated_channels(
    ::tt::tt_fabric::proto::Channels* channels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channels_);
  }
  channels_ = channels;
  if (channels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tt.tt_fabric.proto.Connection.channels)
}
inline ::tt::tt_fabric::proto::Channels* Connection::release_channels() {
  auto temp = unsafe_arena_release_channels();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tt::tt_fabric::proto::Channels* Connection::unsafe_arena_release_channels() {
  // @@protoc_insertion_point(field_release:tt.tt_fabric.proto.Connection.channels)
  
  ::tt::tt_fabric::proto::Channels* temp = channels_;
  channels_ = nullptr;
  return temp;
}
inline ::tt::tt_fabric::proto::Channels* Connection::_internal_mutable_channels() {
  
  if (channels_ == nullptr) {
    auto* p = CreateMaybeMessage<::tt::tt_fabric::proto::Channels>(GetArena());
    channels_ = p;
  }
  return channels_;
}
inline ::tt::tt_fabric::proto::Channels* Connection::mutable_channels() {
  // @@protoc_insertion_point(field_mutable:tt.tt_fabric.proto.Connection.channels)
  return _internal_mutable_channels();
}
inline void Connection::set_allocated_channels(::tt::tt_fabric::proto::Channels* channels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channels_;
  }
  if (channels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channels);
    if (message_arena != submessage_arena) {
      channels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channels, submessage_arena);
    }
    
  } else {
    
  }
  channels_ = channels;
  // @@protoc_insertion_point(field_set_allocated:tt.tt_fabric.proto.Connection.channels)
}

// bool directional = 3;
inline bool Connection::_internal_has_directional() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Connection::has_directional() const {
  return _internal_has_directional();
}
inline void Connection::clear_directional() {
  directional_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Connection::_internal_directional() const {
  return directional_;
}
inline bool Connection::directional() const {
  // @@protoc_insertion_point(field_get:tt.tt_fabric.proto.Connection.directional)
  return _internal_directional();
}
inline void Connection::_internal_set_directional(bool value) {
  _has_bits_[0] |= 0x00000001u;
  directional_ = value;
}
inline void Connection::set_directional(bool value) {
  _internal_set_directional(value);
  // @@protoc_insertion_point(field_set:tt.tt_fabric.proto.Connection.directional)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tt_fabric
}  // namespace tt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tt::tt_fabric::proto::TorusTopology_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tt::tt_fabric::proto::TorusTopology_Type>() {
  return ::tt::tt_fabric::proto::TorusTopology_Type_descriptor();
}
template <> struct is_proto_enum< ::tt::tt_fabric::proto::GraphTopology_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tt::tt_fabric::proto::GraphTopology_Type>() {
  return ::tt::tt_fabric::proto::GraphTopology_Type_descriptor();
}
template <> struct is_proto_enum< ::tt::tt_fabric::proto::Architecture> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tt::tt_fabric::proto::Architecture>() {
  return ::tt::tt_fabric::proto::Architecture_descriptor();
}
template <> struct is_proto_enum< ::tt::tt_fabric::proto::Policy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tt::tt_fabric::proto::Policy>() {
  return ::tt::tt_fabric::proto::Policy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fmesh_5fgraph_5fdescriptor_2eproto
