namespace tt.tt_fabric.flatbuffer;

// Ethernet Connection
table EthConnection {
    src_chan: uint64;  // tt_fabric::chan_id_t
    dst_chan: uint64;  // tt_fabric::chan_id_t
    is_local: bool;    // Indicates if the connection is local (true) or remote (false)
}
table AsicConnectionEdge {
    dst_asic_id: uint64;                    // Target ASIC ID
    eth_connections: [EthConnection];       // Vector of ethernet connections to this ASIC
}

table AsicConnnections {
    asic_connections: [AsicConnectionEdge]; // All connections from this ASIC
}

table AsicGraph {
    asic_id: uint64;                       // The ASIC ID (key)
    topology: AsicConnnections;                // The topology for this ASIC
}

table HostAsicConnectivity {
    host_name: string;                     // Host identifier
    asic_topologies: [AsicGraph];  // Map of asic_id -> AsicTopology
}

table ExitNodeConnection {
    src_exit_node: uint64;  // asic_id_t
    dst_exit_node: uint64;  // asic_id_t
    eth_conn: EthConnection;
}

table HostConnectionEdge {
    dst_host_name: string;                      // Target host name
    exit_node_connections: [ExitNodeConnection]; // Vector of exit node connections to this host
}

table HostConnections {
    src_host_name: string;                 // Source host name (key)
    host_connections: [HostConnectionEdge]; // All connections from this host
}

table PhysicalConnectivityGraph {
    asic_connectivity_graph: [HostAsicConnectivity]; // Map of host_name -> AsicTopology map
    host_connectivity_graph: [HostConnections];    // Map of host_name -> HostConnectionEdge vector
}

table AsicDescriptor {
    tray_id: uint32;     // tray_id_t
    n_id: uint32;        // n_id_t
    board_type: uint32;  // BoardType as uint32_t
    unique_id: uint64;   // asic_id_t (unique identifier for this ASIC)
    host_name: string;
}

table AsicDescriptorMap {
    asic_id: uint64;            // asic_id_t (key)
    descriptor: AsicDescriptor; // The descriptor for this ASIC
}

table HostToMoboMap {
    host_name: string;    // Host name (key)
    mobo_name: string;    // Motherboard name (value)
}

table ExitNodeConnectionTable {
    host_name: string;                        // Host name (key)
    exit_connections: [ExitNodeConnection];   // Vector of exit node connections for this host
}

table PhysicalSystemDescriptor {
    system_graph: PhysicalConnectivityGraph;
    asic_descriptors: [AsicDescriptorMap];           // Map of asic_id -> ASICDescriptor
    host_to_mobo_name: [HostToMoboMap];             // Map of host_name -> mobo_name
    exit_node_connection_table: [ExitNodeConnectionTable]; // Map of host_name -> ExitNodeConnection vector
}

root_type PhysicalSystemDescriptor;
