// SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC
//
// SPDX-License-Identifier: Apache-2.0

#include <string>
#include <unordered_map>
#include <vector>

namespace tt::jit_build {

using ParsedDependencies = std::unordered_map<std::string, std::vector<std::string>>;

// Parses a Makefile-style dependency file (generated by gcc -MMD)
ParsedDependencies parse_dependency_file(std::istream& file);

// Writes the hashes of the dependencies of `obj` to `hash_file`.
// Sets badbit on `hash_file` on any failure.
void write_dependency_hashes(
    const ParsedDependencies& dependencies,
    const std::string& out_dir,
    const std::string& obj,
    std::ostream& hash_file);

// Reads dependencies from .d file and writes their hashes to .hash file.
// Deletes the .hash file on any failure.
void write_dependency_hashes(const std::string& out_dir, const std::string& obj);

// Returns true if all dependencies' hashes match those stored in `hash_file`.
bool dependencies_up_to_date(std::istream& hash_file);

// Returns true if all dependencies' hashes match those stored in the .hash file.
bool dependencies_up_to_date(const std::string& out_dir, const std::string& obj);

}  // namespace tt::jit_build
