// SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC.
//
// SPDX-License-Identifier: Apache-2.0

// DO NOT EDIT THIS FILE!  It is generated from tt_metal/hw/inc/dev_msgs.h
// by tt_metal/llrt/hal/codegen/codegen.sh.
// This file is to be embedded as part of arch-specifc code in HAL, wrapped in a namespace.
// It should not be used anywhere else.
namespace offsets {

static const uintptr_t ncrisc_halt_msg_t[] = {
    // 2 fields
    sizeof(::ncrisc_halt_msg_t),
    offsetof(::ncrisc_halt_msg_t, stack_save),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 2 + 0 + 0 = 2
static_assert(sizeof(offsets::ncrisc_halt_msg_t) == 2 * sizeof(uintptr_t));

static const uintptr_t rta_offset_t[] = {
    // 2 fields
    sizeof(::rta_offset_t),
    offsetof(::rta_offset_t, crta_offset),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 2 + 0 + 0 = 2
static_assert(sizeof(offsets::rta_offset_t) == 2 * sizeof(uintptr_t));

static const uintptr_t kernel_config_msg_t[] = {
    // 19 fields
    sizeof(::kernel_config_msg_t),
    offsetof(::kernel_config_msg_t, ncrisc_kernel_size16),
    offsetof(::kernel_config_msg_t, kernel_config_base),
    offsetof(::kernel_config_msg_t, sem_offset),
    offsetof(::kernel_config_msg_t, local_cb_offset),
    offsetof(::kernel_config_msg_t, remote_cb_offset),
    offsetof(::kernel_config_msg_t, rta_offset),
    offsetof(::kernel_config_msg_t, mode),
    offsetof(::kernel_config_msg_t, kernel_text_offset),
    offsetof(::kernel_config_msg_t, local_cb_mask),
    offsetof(::kernel_config_msg_t, brisc_noc_id),
    offsetof(::kernel_config_msg_t, brisc_noc_mode),
    offsetof(::kernel_config_msg_t, min_remote_cb_start_index),
    offsetof(::kernel_config_msg_t, exit_erisc_kernel),
    offsetof(::kernel_config_msg_t, host_assigned_id),
    offsetof(::kernel_config_msg_t, sub_device_origin_x),
    offsetof(::kernel_config_msg_t, sub_device_origin_y),
    offsetof(::kernel_config_msg_t, enables),
    offsetof(::kernel_config_msg_t, preload),
    // 3 array sizes
    DISPATCH_CLASS_MAX,
    NUM_PROGRAMMABLE_CORE_TYPES,
    NUM_PROCESSORS_PER_CORE_TYPE,
    // 1 referenced structs
    reinterpret_cast<uintptr_t>(offsets::rta_offset_t),
};
// Total = 19 + 3 + 1 = 23
static_assert(sizeof(offsets::kernel_config_msg_t) == 23 * sizeof(uintptr_t));

static const uintptr_t go_msg_t[] = {
    // 5 fields
    sizeof(::go_msg_t),
    offsetof(::go_msg_t, dispatch_message_offset),
    offsetof(::go_msg_t, master_x),
    offsetof(::go_msg_t, master_y),
    offsetof(::go_msg_t, signal),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 5 + 0 + 0 = 5
static_assert(sizeof(offsets::go_msg_t) == 5 * sizeof(uintptr_t));

static const uintptr_t launch_msg_t[] = {
    // 1 fields
    sizeof(::launch_msg_t),
    // 0 array sizes
    // 1 referenced structs
    reinterpret_cast<uintptr_t>(offsets::kernel_config_msg_t),
};
// Total = 1 + 0 + 1 = 2
static_assert(sizeof(offsets::launch_msg_t) == 2 * sizeof(uintptr_t));

static const uintptr_t subordinate_sync_msg_t[] = {
    // 5 fields
    sizeof(::subordinate_sync_msg_t),
    offsetof(::subordinate_sync_msg_t, dm1),
    offsetof(::subordinate_sync_msg_t, trisc0),
    offsetof(::subordinate_sync_msg_t, trisc1),
    offsetof(::subordinate_sync_msg_t, trisc2),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 5 + 0 + 0 = 5
static_assert(sizeof(offsets::subordinate_sync_msg_t) == 5 * sizeof(uintptr_t));

static const uintptr_t debug_waypoint_msg_t[] = {
    // 1 fields
    sizeof(::debug_waypoint_msg_t),
    // 1 array sizes
    num_waypoint_bytes_per_riscv,
    // 0 referenced structs
};
// Total = 1 + 1 + 0 = 2
static_assert(sizeof(offsets::debug_waypoint_msg_t) == 2 * sizeof(uintptr_t));

static const uintptr_t debug_sanitize_noc_addr_msg_t[] = {
    // 8 fields
    sizeof(::debug_sanitize_noc_addr_msg_t),
    offsetof(::debug_sanitize_noc_addr_msg_t, l1_addr),
    offsetof(::debug_sanitize_noc_addr_msg_t, len),
    offsetof(::debug_sanitize_noc_addr_msg_t, which_risc),
    offsetof(::debug_sanitize_noc_addr_msg_t, return_code),
    offsetof(::debug_sanitize_noc_addr_msg_t, is_multicast),
    offsetof(::debug_sanitize_noc_addr_msg_t, is_write),
    offsetof(::debug_sanitize_noc_addr_msg_t, is_target),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 8 + 0 + 0 = 8
static_assert(sizeof(offsets::debug_sanitize_noc_addr_msg_t) == 8 * sizeof(uintptr_t));

static const uintptr_t debug_insert_delays_msg_t[] = {
    // 4 fields
    sizeof(::debug_insert_delays_msg_t),
    offsetof(::debug_insert_delays_msg_t, write_delay_riscv_mask),
    offsetof(::debug_insert_delays_msg_t, atomic_delay_riscv_mask),
    offsetof(::debug_insert_delays_msg_t, feedback),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 4 + 0 + 0 = 4
static_assert(sizeof(offsets::debug_insert_delays_msg_t) == 4 * sizeof(uintptr_t));

static const uintptr_t debug_assert_msg_t[] = {
    // 3 fields
    sizeof(::debug_assert_msg_t),
    offsetof(::debug_assert_msg_t, tripped),
    offsetof(::debug_assert_msg_t, which),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 3 + 0 + 0 = 3
static_assert(sizeof(offsets::debug_assert_msg_t) == 3 * sizeof(uintptr_t));

static const uintptr_t debug_pause_msg_t[] = {
    // 1 fields
    sizeof(::debug_pause_msg_t),
    // 1 array sizes
    DebugDebugMaxRiscvId,
    // 0 referenced structs
};
// Total = 1 + 1 + 0 = 2
static_assert(sizeof(offsets::debug_pause_msg_t) == 2 * sizeof(uintptr_t));

static const uintptr_t debug_ring_buf_msg_t[] = {
    // 3 fields
    sizeof(::debug_ring_buf_msg_t),
    offsetof(::debug_ring_buf_msg_t, wrapped),
    offsetof(::debug_ring_buf_msg_t, data),
    // 1 array sizes
    DEBUG_RING_BUFFER_ELEMENTS,
    // 0 referenced structs
};
// Total = 3 + 1 + 0 = 4
static_assert(sizeof(offsets::debug_ring_buf_msg_t) == 4 * sizeof(uintptr_t));

static const uintptr_t debug_stack_usage_per_cpu_t[] = {
    // 2 fields
    sizeof(::debug_stack_usage_per_cpu_t),
    offsetof(::debug_stack_usage_per_cpu_t, watcher_kernel_id),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 2 + 0 + 0 = 2
static_assert(sizeof(offsets::debug_stack_usage_per_cpu_t) == 2 * sizeof(uintptr_t));

static const uintptr_t debug_stack_usage_t[] = {
    // 1 fields
    sizeof(::debug_stack_usage_t),
    // 1 array sizes
    DebugDebugMaxRiscvId,
    // 1 referenced structs
    reinterpret_cast<uintptr_t>(offsets::debug_stack_usage_per_cpu_t),
};
// Total = 1 + 1 + 1 = 3
static_assert(sizeof(offsets::debug_stack_usage_t) == 3 * sizeof(uintptr_t));

static const uintptr_t debug_eth_link_t[] = {
    // 1 fields
    sizeof(::debug_eth_link_t),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 1 + 0 + 0 = 1
static_assert(sizeof(offsets::debug_eth_link_t) == 1 * sizeof(uintptr_t));

static const uintptr_t watcher_msg_t[] = {
    // 10 fields
    sizeof(::watcher_msg_t),
    offsetof(::watcher_msg_t, debug_waypoint),
    offsetof(::watcher_msg_t, sanitize_noc),
    offsetof(::watcher_msg_t, noc_linked_status),
    offsetof(::watcher_msg_t, eth_status),
    offsetof(::watcher_msg_t, assert_status),
    offsetof(::watcher_msg_t, pause_status),
    offsetof(::watcher_msg_t, stack_usage),
    offsetof(::watcher_msg_t, debug_insert_delays),
    offsetof(::watcher_msg_t, debug_ring_buf),
    // 2 array sizes
    MAX_RISCV_PER_CORE,
    MAX_NUM_NOCS_PER_CORE,
    // 8 referenced structs
    reinterpret_cast<uintptr_t>(offsets::debug_waypoint_msg_t),
    reinterpret_cast<uintptr_t>(offsets::debug_sanitize_noc_addr_msg_t),
    reinterpret_cast<uintptr_t>(offsets::debug_eth_link_t),
    reinterpret_cast<uintptr_t>(offsets::debug_assert_msg_t),
    reinterpret_cast<uintptr_t>(offsets::debug_pause_msg_t),
    reinterpret_cast<uintptr_t>(offsets::debug_stack_usage_t),
    reinterpret_cast<uintptr_t>(offsets::debug_insert_delays_msg_t),
    reinterpret_cast<uintptr_t>(offsets::debug_ring_buf_msg_t),
};
// Total = 10 + 2 + 8 = 20
static_assert(sizeof(offsets::watcher_msg_t) == 20 * sizeof(uintptr_t));

static const uintptr_t addressable_core_t[] = {
    // 3 fields
    sizeof(::addressable_core_t),
    offsetof(::addressable_core_t, y),
    offsetof(::addressable_core_t, type),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 3 + 0 + 0 = 3
static_assert(sizeof(offsets::addressable_core_t) == 3 * sizeof(uintptr_t));

static const uintptr_t core_info_msg_t[] = {
    // 15 fields
    sizeof(::core_info_msg_t),
    offsetof(::core_info_msg_t, noc_pcie_addr_end),
    offsetof(::core_info_msg_t, noc_dram_addr_base),
    offsetof(::core_info_msg_t, noc_dram_addr_end),
    offsetof(::core_info_msg_t, non_worker_cores),
    offsetof(::core_info_msg_t, virtual_non_worker_cores),
    offsetof(::core_info_msg_t, harvested_coords),
    offsetof(::core_info_msg_t, virtual_harvested_coords),
    offsetof(::core_info_msg_t, noc_size_x),
    offsetof(::core_info_msg_t, noc_size_y),
    offsetof(::core_info_msg_t, worker_grid_size_x),
    offsetof(::core_info_msg_t, worker_grid_size_y),
    offsetof(::core_info_msg_t, absolute_logical_x),
    offsetof(::core_info_msg_t, absolute_logical_y),
    offsetof(::core_info_msg_t, l1_unreserved_start),
    // 3 array sizes
    MAX_PHYSICAL_NON_WORKER_CORES,
    MAX_VIRTUAL_NON_WORKER_CORES,
    MAX_HARVESTED_ON_AXIS,
    // 1 referenced structs
    reinterpret_cast<uintptr_t>(offsets::addressable_core_t),
};
// Total = 15 + 3 + 1 = 19
static_assert(sizeof(offsets::core_info_msg_t) == 19 * sizeof(uintptr_t));

static const uintptr_t mailboxes_t[] = {
    // 8 fields
    sizeof(::mailboxes_t),
    offsetof(::mailboxes_t, subordinate_sync),
    offsetof(::mailboxes_t, launch_msg_rd_ptr),
    offsetof(::mailboxes_t, launch),
    offsetof(::mailboxes_t, go_messages),
    offsetof(::mailboxes_t, go_message_index),
    offsetof(::mailboxes_t, watcher),
    offsetof(::mailboxes_t, core_info),
    // 2 array sizes
    launch_msg_buffer_num_entries,
    go_message_num_entries,
    // 6 referenced structs
    reinterpret_cast<uintptr_t>(offsets::ncrisc_halt_msg_t),
    reinterpret_cast<uintptr_t>(offsets::subordinate_sync_msg_t),
    reinterpret_cast<uintptr_t>(offsets::launch_msg_t),
    reinterpret_cast<uintptr_t>(offsets::go_msg_t),
    reinterpret_cast<uintptr_t>(offsets::watcher_msg_t),
    reinterpret_cast<uintptr_t>(offsets::core_info_msg_t),
};
// Total = 8 + 2 + 6 = 16
static_assert(sizeof(offsets::mailboxes_t) == 16 * sizeof(uintptr_t));

static const uintptr_t eth_word_t[] = {
    // 4 fields
    sizeof(::eth_word_t),
    offsetof(::eth_word_t, dst_cmd_valid),
    offsetof(::eth_word_t, reserved_0),
    offsetof(::eth_word_t, reserved_1),
    // 0 array sizes
    // 0 referenced structs
};
// Total = 4 + 0 + 0 = 4
static_assert(sizeof(offsets::eth_word_t) == 4 * sizeof(uintptr_t));

static const uintptr_t routing_info_t[] = {
    // 5 fields
    sizeof(::routing_info_t),
    offsetof(::routing_info_t, src_sent_valid_cmd),
    offsetof(::routing_info_t, dst_acked_valid_cmd),
    offsetof(::routing_info_t, unused_arg0),
    offsetof(::routing_info_t, fd_buffer_msgs),
    // 1 array sizes
    2,
    // 1 referenced structs
    reinterpret_cast<uintptr_t>(offsets::eth_word_t),
};
// Total = 5 + 1 + 1 = 7
static_assert(sizeof(offsets::routing_info_t) == 7 * sizeof(uintptr_t));

}  // namespace offsets
tt::tt_metal::dev_msgs::Factory create_factory() {
    static const tt::tt_metal::dev_msgs::Factory::Impl impl_{
        offsets::ncrisc_halt_msg_t,
        offsets::rta_offset_t,
        offsets::kernel_config_msg_t,
        offsets::go_msg_t,
        offsets::launch_msg_t,
        offsets::subordinate_sync_msg_t,
        offsets::debug_waypoint_msg_t,
        offsets::debug_sanitize_noc_addr_msg_t,
        offsets::debug_insert_delays_msg_t,
        offsets::debug_assert_msg_t,
        offsets::debug_pause_msg_t,
        offsets::debug_ring_buf_msg_t,
        offsets::debug_stack_usage_per_cpu_t,
        offsets::debug_stack_usage_t,
        offsets::debug_eth_link_t,
        offsets::watcher_msg_t,
        offsets::addressable_core_t,
        offsets::core_info_msg_t,
        offsets::mailboxes_t,
        offsets::eth_word_t,
        offsets::routing_info_t,
    };
    return {impl_};
}
