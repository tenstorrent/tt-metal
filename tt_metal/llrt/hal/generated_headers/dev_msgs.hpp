// SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC.
//
// SPDX-License-Identifier: Apache-2.0

// DO NOT EDIT THIS FILE!  It is generated from tt_metal/hw/inc/dev_msgs.h
// by tt_metal/llrt/hal/codegen/codegen.sh.
// This file provides arch- and core- independent accessors to dev msgs.
// You should use HAL to create a Factory object with programmable core
// as the argument (arch as implicit argument, handled by HAL), and then
// use the Factory to create views and/or memory-owning objects for
// different structs.
#pragma once
#include <array>
#include <cstddef>
#include <cstdint>
#include "llrt/struct_view_driver.hpp"
#include <atomic>
#include "hostdevcommon/profiler_common.h"
#include "hostdevcommon/dprint_common.h"
namespace tt::tt_metal::dev_msgs {
namespace types {
enum dispatch_mode {
    DISPATCH_MODE_DEV,
    DISPATCH_MODE_HOST,
};
enum dispatch_core_processor_classes {
    DISPATCH_CLASS_TENSIX_DM0 = 0,
    DISPATCH_CLASS_TENSIX_DM1 = 1,
    DISPATCH_CLASS_TENSIX_COMPUTE = 2,
    DISPATCH_CLASS_ETH_DM0 = 0,
    DISPATCH_CLASS_ETH_DM1 = 1,
    DISPATCH_CLASS_MAX = 3,
};
enum dispatch_core_processor_masks {
    DISPATCH_CLASS_MASK_TENSIX_ENABLE_DM0 = 1 << DISPATCH_CLASS_TENSIX_DM0,
    DISPATCH_CLASS_MASK_TENSIX_ENABLE_DM1 = 1 << DISPATCH_CLASS_TENSIX_DM1,
    DISPATCH_CLASS_MASK_TENSIX_ENABLE_COMPUTE = 1 << DISPATCH_CLASS_TENSIX_COMPUTE,
    DISPATCH_CLASS_MASK_ETH_DM0 = 1 << DISPATCH_CLASS_ETH_DM0,
    DISPATCH_CLASS_MASK_ETH_DM1 = 1 << DISPATCH_CLASS_ETH_DM1,
};
enum noc_index {
    NOC_0 = 0,
    NOC_1 = 1,
};
enum noc_mode : uint8_t {
    DM_DEDICATED_NOC = 0,
    DM_DYNAMIC_NOC = 1,
    DM_INVALID_NOC = 2,
};
enum dispatch_enable_flags : uint8_t {
    DISPATCH_ENABLE_FLAG_PRELOAD = 1 << 7,
};
enum debug_sanitize_noc_return_code_enum {
    DebugSanitizeNocOK = 2,
    DebugSanitizeNocAddrUnderflow = 3,
    DebugSanitizeNocAddrOverflow = 4,
    DebugSanitizeNocAddrZeroLength = 5,
    DebugSanitizeNocTargetInvalidXY = 6,
    DebugSanitizeNocMulticastNonWorker = 7,
    DebugSanitizeNocMulticastInvalidRange = 8,
    DebugSanitizeNocAlignment = 9,
    DebugSanitizeNocMixedVirtualandPhysical = 10,
    DebugSanitizeInlineWriteDramUnsupported = 11,
    DebugSanitizeNocAddrMailbox = 12,
    DebugSanitizeNocLinkedTransactionViolation = 13,
};
enum debug_assert_type_t {
    DebugAssertOK = 2,
    DebugAssertTripped = 3,
    DebugAssertNCriscNOCReadsFlushedTripped = 4,
    DebugAssertNCriscNOCNonpostedWritesSentTripped = 5,
    DebugAssertNCriscNOCNonpostedAtomicsFlushedTripped = 6,
    DebugAssertNCriscNOCPostedWritesSentTripped = 7
};
enum riscv_id_t {
    DebugBrisc = 0,
    DebugNCrisc = 1,
    DebugTrisc0 = 2,
    DebugTrisc1 = 3,
    DebugTrisc2 = 4,
    DebugErisc = 5,
    DebugSubordinateErisc = 6,
    DebugIErisc = 7,
    DebugSubordinateIErisc = 8,
    DebugNumUniqueRiscs = 9,
    DebugDebugMaxRiscvId = 15,
};
enum debug_transaction_type_t { TransactionRead = 0, TransactionWrite = 1, TransactionAtomic = 2, TransactionNumTypes };
enum watcher_enable_msg_t {
    WatcherDisabled = 2,
    WatcherEnabled = 3,
};
enum class AddressableCoreType : uint8_t {
    TENSIX = 0,
    ETH = 1,
    PCIE = 2,
    DRAM = 3,
    HARVESTED = 4,
    UNKNOWN = 5,
    COUNT = 6,
};
enum class SyncCBConfigRegion : uint8_t {
    DB_TENSIX = 0,
    TENSIX = 1,
    ROUTER_ISSUE = 2,
    ROUTER_COMPLETION = 3,
};
struct ncrisc_halt_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<ncrisc_halt_msg_t> {
    enum class Field { resume_addr, stack_save };
    static constexpr size_t fields_count = 2;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, ncrisc_halt_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, ncrisc_halt_msg_t>::BaseStructView;
        decltype(auto) resume_addr() const { return this->template get<ncrisc_halt_msg_t::Field::resume_addr>(); }
        decltype(auto) stack_save() const { return this->template get<ncrisc_halt_msg_t::Field::stack_save>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct rta_offset_t : ::tt::tt_metal::hal_structs::StructBuffer<rta_offset_t> {
    enum class Field { rta_offset, crta_offset };
    static constexpr size_t fields_count = 2;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, rta_offset_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, rta_offset_t>::BaseStructView;
        decltype(auto) rta_offset() const { return this->template get<rta_offset_t::Field::rta_offset>(); }
        decltype(auto) crta_offset() const { return this->template get<rta_offset_t::Field::crta_offset>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct kernel_config_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<kernel_config_msg_t> {
    enum class Field {
        watcher_kernel_ids,
        ncrisc_kernel_size16,
        kernel_config_base,
        sem_offset,
        local_cb_offset,
        remote_cb_offset,
        rta_offset,
        mode,
        kernel_text_offset,
        local_cb_mask,
        brisc_noc_id,
        brisc_noc_mode,
        min_remote_cb_start_index,
        exit_erisc_kernel,
        host_assigned_id,
        sub_device_origin_x,
        sub_device_origin_y,
        enables,
        preload
    };
    static constexpr size_t fields_count = 19;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::BaseStructView;
        decltype(auto) watcher_kernel_ids() const {
            return this->template get<kernel_config_msg_t::Field::watcher_kernel_ids>();
        }
        decltype(auto) ncrisc_kernel_size16() const {
            return this->template get<kernel_config_msg_t::Field::ncrisc_kernel_size16>();
        }
        decltype(auto) kernel_config_base() const {
            return this->template get<kernel_config_msg_t::Field::kernel_config_base>();
        }
        decltype(auto) sem_offset() const { return this->template get<kernel_config_msg_t::Field::sem_offset>(); }
        decltype(auto) local_cb_offset() const {
            return this->template get<kernel_config_msg_t::Field::local_cb_offset>();
        }
        decltype(auto) remote_cb_offset() const {
            return this->template get<kernel_config_msg_t::Field::remote_cb_offset>();
        }
        decltype(auto) rta_offset() const { return this->template get<kernel_config_msg_t::Field::rta_offset>(); }
        decltype(auto) mode() const { return this->template get<kernel_config_msg_t::Field::mode>(); }
        decltype(auto) kernel_text_offset() const {
            return this->template get<kernel_config_msg_t::Field::kernel_text_offset>();
        }
        decltype(auto) local_cb_mask() const { return this->template get<kernel_config_msg_t::Field::local_cb_mask>(); }
        decltype(auto) brisc_noc_id() const { return this->template get<kernel_config_msg_t::Field::brisc_noc_id>(); }
        decltype(auto) brisc_noc_mode() const {
            return this->template get<kernel_config_msg_t::Field::brisc_noc_mode>();
        }
        decltype(auto) min_remote_cb_start_index() const {
            return this->template get<kernel_config_msg_t::Field::min_remote_cb_start_index>();
        }
        decltype(auto) exit_erisc_kernel() const {
            return this->template get<kernel_config_msg_t::Field::exit_erisc_kernel>();
        }
        decltype(auto) host_assigned_id() const {
            return this->template get<kernel_config_msg_t::Field::host_assigned_id>();
        }
        decltype(auto) sub_device_origin_x() const {
            return this->template get<kernel_config_msg_t::Field::sub_device_origin_x>();
        }
        decltype(auto) sub_device_origin_y() const {
            return this->template get<kernel_config_msg_t::Field::sub_device_origin_y>();
        }
        decltype(auto) enables() const { return this->template get<kernel_config_msg_t::Field::enables>(); }
        decltype(auto) preload() const { return this->template get<kernel_config_msg_t::Field::preload>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct go_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<go_msg_t> {
    enum class Field { all, dispatch_message_offset, master_x, master_y, signal };
    static constexpr size_t fields_count = 5;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t>::BaseStructView;
        decltype(auto) all() const { return this->template get<go_msg_t::Field::all>(); }
        decltype(auto) dispatch_message_offset() const {
            return this->template get<go_msg_t::Field::dispatch_message_offset>();
        }
        decltype(auto) master_x() const { return this->template get<go_msg_t::Field::master_x>(); }
        decltype(auto) master_y() const { return this->template get<go_msg_t::Field::master_y>(); }
        decltype(auto) signal() const { return this->template get<go_msg_t::Field::signal>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct launch_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<launch_msg_t> {
    enum class Field { kernel_config };
    static constexpr size_t fields_count = 1;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, launch_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, launch_msg_t>::BaseStructView;
        decltype(auto) kernel_config() const { return this->template get<launch_msg_t::Field::kernel_config>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct subordinate_sync_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<subordinate_sync_msg_t> {
    enum class Field { all, dm1, trisc0, trisc1, trisc2 };
    static constexpr size_t fields_count = 5;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t>::BaseStructView;
        decltype(auto) all() const { return this->template get<subordinate_sync_msg_t::Field::all>(); }
        decltype(auto) dm1() const { return this->template get<subordinate_sync_msg_t::Field::dm1>(); }
        decltype(auto) trisc0() const { return this->template get<subordinate_sync_msg_t::Field::trisc0>(); }
        decltype(auto) trisc1() const { return this->template get<subordinate_sync_msg_t::Field::trisc1>(); }
        decltype(auto) trisc2() const { return this->template get<subordinate_sync_msg_t::Field::trisc2>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_waypoint_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_waypoint_msg_t> {
    enum class Field { waypoint };
    static constexpr size_t fields_count = 1;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_waypoint_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_waypoint_msg_t>::BaseStructView;
        decltype(auto) waypoint() const { return this->template get<debug_waypoint_msg_t::Field::waypoint>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_sanitize_noc_addr_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_sanitize_noc_addr_msg_t> {
    enum class Field { noc_addr, l1_addr, len, which_risc, return_code, is_multicast, is_write, is_target };
    static constexpr size_t fields_count = 8;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::BaseStructView;
        decltype(auto) noc_addr() const { return this->template get<debug_sanitize_noc_addr_msg_t::Field::noc_addr>(); }
        decltype(auto) l1_addr() const { return this->template get<debug_sanitize_noc_addr_msg_t::Field::l1_addr>(); }
        decltype(auto) len() const { return this->template get<debug_sanitize_noc_addr_msg_t::Field::len>(); }
        decltype(auto) which_risc() const {
            return this->template get<debug_sanitize_noc_addr_msg_t::Field::which_risc>();
        }
        decltype(auto) return_code() const {
            return this->template get<debug_sanitize_noc_addr_msg_t::Field::return_code>();
        }
        decltype(auto) is_multicast() const {
            return this->template get<debug_sanitize_noc_addr_msg_t::Field::is_multicast>();
        }
        decltype(auto) is_write() const { return this->template get<debug_sanitize_noc_addr_msg_t::Field::is_write>(); }
        decltype(auto) is_target() const {
            return this->template get<debug_sanitize_noc_addr_msg_t::Field::is_target>();
        }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_insert_delays_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_insert_delays_msg_t> {
    enum class Field { read_delay_riscv_mask, write_delay_riscv_mask, atomic_delay_riscv_mask, feedback };
    static constexpr size_t fields_count = 4;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_insert_delays_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_insert_delays_msg_t>::BaseStructView;
        decltype(auto) read_delay_riscv_mask() const {
            return this->template get<debug_insert_delays_msg_t::Field::read_delay_riscv_mask>();
        }
        decltype(auto) write_delay_riscv_mask() const {
            return this->template get<debug_insert_delays_msg_t::Field::write_delay_riscv_mask>();
        }
        decltype(auto) atomic_delay_riscv_mask() const {
            return this->template get<debug_insert_delays_msg_t::Field::atomic_delay_riscv_mask>();
        }
        decltype(auto) feedback() const { return this->template get<debug_insert_delays_msg_t::Field::feedback>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_assert_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_assert_msg_t> {
    enum class Field { line_num, tripped, which };
    static constexpr size_t fields_count = 3;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_assert_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_assert_msg_t>::BaseStructView;
        decltype(auto) line_num() const { return this->template get<debug_assert_msg_t::Field::line_num>(); }
        decltype(auto) tripped() const { return this->template get<debug_assert_msg_t::Field::tripped>(); }
        decltype(auto) which() const { return this->template get<debug_assert_msg_t::Field::which>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_pause_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_pause_msg_t> {
    enum class Field { flags };
    static constexpr size_t fields_count = 1;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_pause_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_pause_msg_t>::BaseStructView;
        decltype(auto) flags() const { return this->template get<debug_pause_msg_t::Field::flags>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_ring_buf_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_ring_buf_msg_t> {
    enum class Field { current_ptr, wrapped, data };
    static constexpr size_t fields_count = 3;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_ring_buf_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_ring_buf_msg_t>::BaseStructView;
        decltype(auto) current_ptr() const { return this->template get<debug_ring_buf_msg_t::Field::current_ptr>(); }
        decltype(auto) wrapped() const { return this->template get<debug_ring_buf_msg_t::Field::wrapped>(); }
        decltype(auto) data() const { return this->template get<debug_ring_buf_msg_t::Field::data>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_stack_usage_per_cpu_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_stack_usage_per_cpu_t> {
    enum class Field { min_free, watcher_kernel_id };
    static constexpr size_t fields_count = 2;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_per_cpu_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_per_cpu_t>::BaseStructView;
        decltype(auto) min_free() const { return this->template get<debug_stack_usage_per_cpu_t::Field::min_free>(); }
        decltype(auto) watcher_kernel_id() const {
            return this->template get<debug_stack_usage_per_cpu_t::Field::watcher_kernel_id>();
        }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_stack_usage_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_stack_usage_t> {
    enum class Field { cpu };
    static constexpr size_t fields_count = 1;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_t>::BaseStructView;
        decltype(auto) cpu() const { return this->template get<debug_stack_usage_t::Field::cpu>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct debug_eth_link_t : ::tt::tt_metal::hal_structs::StructBuffer<debug_eth_link_t> {
    enum class Field { link_down };
    static constexpr size_t fields_count = 1;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_eth_link_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_eth_link_t>::BaseStructView;
        decltype(auto) link_down() const { return this->template get<debug_eth_link_t::Field::link_down>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct watcher_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<watcher_msg_t> {
    enum class Field {
        enable,
        debug_waypoint,
        sanitize_noc,
        noc_linked_status,
        eth_status,
        assert_status,
        pause_status,
        stack_usage,
        debug_insert_delays,
        debug_ring_buf
    };
    static constexpr size_t fields_count = 10;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::BaseStructView;
        decltype(auto) enable() const { return this->template get<watcher_msg_t::Field::enable>(); }
        decltype(auto) debug_waypoint() const { return this->template get<watcher_msg_t::Field::debug_waypoint>(); }
        decltype(auto) sanitize_noc() const { return this->template get<watcher_msg_t::Field::sanitize_noc>(); }
        decltype(auto) noc_linked_status() const {
            return this->template get<watcher_msg_t::Field::noc_linked_status>();
        }
        decltype(auto) eth_status() const { return this->template get<watcher_msg_t::Field::eth_status>(); }
        decltype(auto) assert_status() const { return this->template get<watcher_msg_t::Field::assert_status>(); }
        decltype(auto) pause_status() const { return this->template get<watcher_msg_t::Field::pause_status>(); }
        decltype(auto) stack_usage() const { return this->template get<watcher_msg_t::Field::stack_usage>(); }
        decltype(auto) debug_insert_delays() const {
            return this->template get<watcher_msg_t::Field::debug_insert_delays>();
        }
        decltype(auto) debug_ring_buf() const { return this->template get<watcher_msg_t::Field::debug_ring_buf>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct addressable_core_t : ::tt::tt_metal::hal_structs::StructBuffer<addressable_core_t> {
    enum class Field { x, y, type };
    static constexpr size_t fields_count = 3;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, addressable_core_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, addressable_core_t>::BaseStructView;
        decltype(auto) x() const { return this->template get<addressable_core_t::Field::x>(); }
        decltype(auto) y() const { return this->template get<addressable_core_t::Field::y>(); }
        decltype(auto) type() const { return this->template get<addressable_core_t::Field::type>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct core_info_msg_t : ::tt::tt_metal::hal_structs::StructBuffer<core_info_msg_t> {
    enum class Field {
        noc_pcie_addr_base,
        noc_pcie_addr_end,
        noc_dram_addr_base,
        noc_dram_addr_end,
        non_worker_cores,
        virtual_non_worker_cores,
        harvested_coords,
        virtual_harvested_coords,
        noc_size_x,
        noc_size_y,
        worker_grid_size_x,
        worker_grid_size_y,
        absolute_logical_x,
        absolute_logical_y,
        l1_unreserved_start
    };
    static constexpr size_t fields_count = 15;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::BaseStructView;
        decltype(auto) noc_pcie_addr_base() const {
            return this->template get<core_info_msg_t::Field::noc_pcie_addr_base>();
        }
        decltype(auto) noc_pcie_addr_end() const {
            return this->template get<core_info_msg_t::Field::noc_pcie_addr_end>();
        }
        decltype(auto) noc_dram_addr_base() const {
            return this->template get<core_info_msg_t::Field::noc_dram_addr_base>();
        }
        decltype(auto) noc_dram_addr_end() const {
            return this->template get<core_info_msg_t::Field::noc_dram_addr_end>();
        }
        decltype(auto) non_worker_cores() const {
            return this->template get<core_info_msg_t::Field::non_worker_cores>();
        }
        decltype(auto) virtual_non_worker_cores() const {
            return this->template get<core_info_msg_t::Field::virtual_non_worker_cores>();
        }
        decltype(auto) harvested_coords() const {
            return this->template get<core_info_msg_t::Field::harvested_coords>();
        }
        decltype(auto) virtual_harvested_coords() const {
            return this->template get<core_info_msg_t::Field::virtual_harvested_coords>();
        }
        decltype(auto) noc_size_x() const { return this->template get<core_info_msg_t::Field::noc_size_x>(); }
        decltype(auto) noc_size_y() const { return this->template get<core_info_msg_t::Field::noc_size_y>(); }
        decltype(auto) worker_grid_size_x() const {
            return this->template get<core_info_msg_t::Field::worker_grid_size_x>();
        }
        decltype(auto) worker_grid_size_y() const {
            return this->template get<core_info_msg_t::Field::worker_grid_size_y>();
        }
        decltype(auto) absolute_logical_x() const {
            return this->template get<core_info_msg_t::Field::absolute_logical_x>();
        }
        decltype(auto) absolute_logical_y() const {
            return this->template get<core_info_msg_t::Field::absolute_logical_y>();
        }
        decltype(auto) l1_unreserved_start() const {
            return this->template get<core_info_msg_t::Field::l1_unreserved_start>();
        }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct mailboxes_t : ::tt::tt_metal::hal_structs::StructBuffer<mailboxes_t> {
    enum class Field {
        ncrisc_halt,
        subordinate_sync,
        launch_msg_rd_ptr,
        launch,
        go_messages,
        go_message_index,
        watcher,
        core_info
    };
    static constexpr size_t fields_count = 8;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::BaseStructView;
        decltype(auto) ncrisc_halt() const { return this->template get<mailboxes_t::Field::ncrisc_halt>(); }
        decltype(auto) subordinate_sync() const { return this->template get<mailboxes_t::Field::subordinate_sync>(); }
        decltype(auto) launch_msg_rd_ptr() const { return this->template get<mailboxes_t::Field::launch_msg_rd_ptr>(); }
        decltype(auto) launch() const { return this->template get<mailboxes_t::Field::launch>(); }
        decltype(auto) go_messages() const { return this->template get<mailboxes_t::Field::go_messages>(); }
        decltype(auto) go_message_index() const { return this->template get<mailboxes_t::Field::go_message_index>(); }
        decltype(auto) watcher() const { return this->template get<mailboxes_t::Field::watcher>(); }
        decltype(auto) core_info() const { return this->template get<mailboxes_t::Field::core_info>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct eth_word_t : ::tt::tt_metal::hal_structs::StructBuffer<eth_word_t> {
    enum class Field { bytes_sent, dst_cmd_valid, reserved_0, reserved_1 };
    static constexpr size_t fields_count = 4;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, eth_word_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, eth_word_t>::BaseStructView;
        decltype(auto) bytes_sent() const { return this->template get<eth_word_t::Field::bytes_sent>(); }
        decltype(auto) dst_cmd_valid() const { return this->template get<eth_word_t::Field::dst_cmd_valid>(); }
        decltype(auto) reserved_0() const { return this->template get<eth_word_t::Field::reserved_0>(); }
        decltype(auto) reserved_1() const { return this->template get<eth_word_t::Field::reserved_1>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

struct routing_info_t : ::tt::tt_metal::hal_structs::StructBuffer<routing_info_t> {
    enum class Field { routing_enabled, src_sent_valid_cmd, dst_acked_valid_cmd, unused_arg0, fd_buffer_msgs };
    static constexpr size_t fields_count = 5;
    template <bool Const, Field F>
    struct FieldTraits;
    template <bool Const>
    struct BasicView : public ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t> {
        using ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t>::BaseStructView;
        decltype(auto) routing_enabled() const { return this->template get<routing_info_t::Field::routing_enabled>(); }
        decltype(auto) src_sent_valid_cmd() const {
            return this->template get<routing_info_t::Field::src_sent_valid_cmd>();
        }
        decltype(auto) dst_acked_valid_cmd() const {
            return this->template get<routing_info_t::Field::dst_acked_valid_cmd>();
        }
        decltype(auto) unused_arg0() const { return this->template get<routing_info_t::Field::unused_arg0>(); }
        decltype(auto) fd_buffer_msgs() const { return this->template get<routing_info_t::Field::fd_buffer_msgs>(); }
    };
    using View = BasicView<false>;
    using ConstView = BasicView<true>;
};

// Magic numbers are generated by code generator.
// They will match the positions in the offsets array in the
// (also generated) implementation file.
template <bool Const>
struct ncrisc_halt_msg_t::FieldTraits<Const, ncrisc_halt_msg_t::Field::resume_addr>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, ncrisc_halt_msg_t>::template ScalarField<uint32_t, 0> {};
template <bool Const>
struct ncrisc_halt_msg_t::FieldTraits<Const, ncrisc_halt_msg_t::Field::stack_save>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, ncrisc_halt_msg_t>::template ScalarField<uint32_t, 1> {};
template <bool Const>
struct rta_offset_t::FieldTraits<Const, rta_offset_t::Field::rta_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, rta_offset_t>::template ScalarField<uint16_t, 0> {};
template <bool Const>
struct rta_offset_t::FieldTraits<Const, rta_offset_t::Field::crta_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, rta_offset_t>::template ScalarField<uint16_t, 1> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::watcher_kernel_ids>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarArray<uint16_t, 0, 19> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::ncrisc_kernel_size16>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint16_t, 1> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::kernel_config_base>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarArray<uint32_t, 2, 20> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::sem_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarArray<uint16_t, 3, 20> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::local_cb_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint16_t, 4> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::remote_cb_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint16_t, 5> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::rta_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::
          template StructArray<rta_offset_t, 6, 22, 19> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::mode>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 7> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::kernel_text_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarArray<uint32_t, 8, 21> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::local_cb_mask>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint32_t, 9> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::brisc_noc_id>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 10> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::brisc_noc_mode>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 11> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::min_remote_cb_start_index>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 12> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::exit_erisc_kernel>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 13> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::host_assigned_id>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint32_t, 14> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::sub_device_origin_x>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 15> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::sub_device_origin_y>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 16> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::enables>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 17> {};
template <bool Const>
struct kernel_config_msg_t::FieldTraits<Const, kernel_config_msg_t::Field::preload>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, kernel_config_msg_t>::template ScalarField<uint8_t, 18> {};
template <bool Const>
struct go_msg_t::FieldTraits<Const, go_msg_t::Field::all>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t>::template ScalarField<uint32_t, 0> {};
template <bool Const>
struct go_msg_t::FieldTraits<Const, go_msg_t::Field::dispatch_message_offset>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t>::template ScalarField<uint8_t, 1> {};
template <bool Const>
struct go_msg_t::FieldTraits<Const, go_msg_t::Field::master_x>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t>::template ScalarField<uint8_t, 2> {};
template <bool Const>
struct go_msg_t::FieldTraits<Const, go_msg_t::Field::master_y>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t>::template ScalarField<uint8_t, 3> {};
template <bool Const>
struct go_msg_t::FieldTraits<Const, go_msg_t::Field::signal>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, go_msg_t>::template ScalarField<uint8_t, 4> {};
template <bool Const>
struct launch_msg_t::FieldTraits<Const, launch_msg_t::Field::kernel_config>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, launch_msg_t>::
          template StructField<kernel_config_msg_t, 0, 1> {};
template <bool Const>
struct subordinate_sync_msg_t::FieldTraits<Const, subordinate_sync_msg_t::Field::all>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t>::template ScalarField<uint32_t, 0> {};
template <bool Const>
struct subordinate_sync_msg_t::FieldTraits<Const, subordinate_sync_msg_t::Field::dm1>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t>::template ScalarField<uint8_t, 1> {};
template <bool Const>
struct subordinate_sync_msg_t::FieldTraits<Const, subordinate_sync_msg_t::Field::trisc0>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t>::template ScalarField<uint8_t, 2> {};
template <bool Const>
struct subordinate_sync_msg_t::FieldTraits<Const, subordinate_sync_msg_t::Field::trisc1>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t>::template ScalarField<uint8_t, 3> {};
template <bool Const>
struct subordinate_sync_msg_t::FieldTraits<Const, subordinate_sync_msg_t::Field::trisc2>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, subordinate_sync_msg_t>::template ScalarField<uint8_t, 4> {};
template <bool Const>
struct debug_waypoint_msg_t::FieldTraits<Const, debug_waypoint_msg_t::Field::waypoint>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_waypoint_msg_t>::template ScalarArray<uint8_t, 0, 1> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::noc_addr>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint64_t, 0> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::l1_addr>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint32_t, 1> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::len>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint32_t, 2> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::which_risc>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint16_t, 3> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::return_code>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint16_t, 4> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::is_multicast>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint8_t, 5> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::is_write>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint8_t, 6> {};
template <bool Const>
struct debug_sanitize_noc_addr_msg_t::FieldTraits<Const, debug_sanitize_noc_addr_msg_t::Field::is_target>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_sanitize_noc_addr_msg_t>::
          template ScalarField<uint8_t, 7> {};
template <bool Const>
struct debug_insert_delays_msg_t::FieldTraits<Const, debug_insert_delays_msg_t::Field::read_delay_riscv_mask>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_insert_delays_msg_t>::template ScalarField<uint8_t, 0> {
};
template <bool Const>
struct debug_insert_delays_msg_t::FieldTraits<Const, debug_insert_delays_msg_t::Field::write_delay_riscv_mask>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_insert_delays_msg_t>::template ScalarField<uint8_t, 1> {
};
template <bool Const>
struct debug_insert_delays_msg_t::FieldTraits<Const, debug_insert_delays_msg_t::Field::atomic_delay_riscv_mask>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_insert_delays_msg_t>::template ScalarField<uint8_t, 2> {
};
template <bool Const>
struct debug_insert_delays_msg_t::FieldTraits<Const, debug_insert_delays_msg_t::Field::feedback>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_insert_delays_msg_t>::template ScalarField<uint8_t, 3> {
};
template <bool Const>
struct debug_assert_msg_t::FieldTraits<Const, debug_assert_msg_t::Field::line_num>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_assert_msg_t>::template ScalarField<uint16_t, 0> {};
template <bool Const>
struct debug_assert_msg_t::FieldTraits<Const, debug_assert_msg_t::Field::tripped>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_assert_msg_t>::template ScalarField<uint8_t, 1> {};
template <bool Const>
struct debug_assert_msg_t::FieldTraits<Const, debug_assert_msg_t::Field::which>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_assert_msg_t>::template ScalarField<uint8_t, 2> {};
template <bool Const>
struct debug_pause_msg_t::FieldTraits<Const, debug_pause_msg_t::Field::flags>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_pause_msg_t>::template ScalarArray<uint8_t, 0, 1> {};
template <bool Const>
struct debug_ring_buf_msg_t::FieldTraits<Const, debug_ring_buf_msg_t::Field::current_ptr>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_ring_buf_msg_t>::template ScalarField<int16_t, 0> {};
template <bool Const>
struct debug_ring_buf_msg_t::FieldTraits<Const, debug_ring_buf_msg_t::Field::wrapped>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_ring_buf_msg_t>::template ScalarField<uint16_t, 1> {};
template <bool Const>
struct debug_ring_buf_msg_t::FieldTraits<Const, debug_ring_buf_msg_t::Field::data>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_ring_buf_msg_t>::template ScalarArray<uint32_t, 2, 3> {};
template <bool Const>
struct debug_stack_usage_per_cpu_t::FieldTraits<Const, debug_stack_usage_per_cpu_t::Field::min_free>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_per_cpu_t>::
          template ScalarField<uint16_t, 0> {};
template <bool Const>
struct debug_stack_usage_per_cpu_t::FieldTraits<Const, debug_stack_usage_per_cpu_t::Field::watcher_kernel_id>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_per_cpu_t>::
          template ScalarField<uint16_t, 1> {};
template <bool Const>
struct debug_stack_usage_t::FieldTraits<Const, debug_stack_usage_t::Field::cpu>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_stack_usage_t>::
          template StructArray<debug_stack_usage_per_cpu_t, 0, 2, 1> {};
template <bool Const>
struct debug_eth_link_t::FieldTraits<Const, debug_eth_link_t::Field::link_down>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, debug_eth_link_t>::template ScalarField<uint8_t, 0> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::enable>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::template ScalarField<uint32_t, 0> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::debug_waypoint>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructArray<debug_waypoint_msg_t, 1, 12, 10> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::sanitize_noc>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructArray<debug_sanitize_noc_addr_msg_t, 2, 13, 11> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::noc_linked_status>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template ScalarArray<std::atomic<bool>, 3, 11> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::eth_status>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::template StructField<debug_eth_link_t, 4, 14> {
};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::assert_status>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructField<debug_assert_msg_t, 5, 15> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::pause_status>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructField<debug_pause_msg_t, 6, 16> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::stack_usage>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructField<debug_stack_usage_t, 7, 17> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::debug_insert_delays>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructField<debug_insert_delays_msg_t, 8, 18> {};
template <bool Const>
struct watcher_msg_t::FieldTraits<Const, watcher_msg_t::Field::debug_ring_buf>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, watcher_msg_t>::
          template StructField<debug_ring_buf_msg_t, 9, 19> {};
template <bool Const>
struct addressable_core_t::FieldTraits<Const, addressable_core_t::Field::x>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, addressable_core_t>::template ScalarField<uint8_t, 0> {};
template <bool Const>
struct addressable_core_t::FieldTraits<Const, addressable_core_t::Field::y>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, addressable_core_t>::template ScalarField<uint8_t, 1> {};
template <bool Const>
struct addressable_core_t::FieldTraits<Const, addressable_core_t::Field::type>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, addressable_core_t>::
          template ScalarField<AddressableCoreType, 2> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::noc_pcie_addr_base>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint64_t, 0> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::noc_pcie_addr_end>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint64_t, 1> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::noc_dram_addr_base>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint64_t, 2> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::noc_dram_addr_end>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint64_t, 3> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::non_worker_cores>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::
          template StructArray<addressable_core_t, 4, 18, 15> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::virtual_non_worker_cores>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::
          template StructArray<addressable_core_t, 5, 18, 16> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::harvested_coords>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarArray<uint8_t, 6, 17> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::virtual_harvested_coords>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarArray<uint8_t, 7, 17> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::noc_size_x>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint8_t, 8> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::noc_size_y>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint8_t, 9> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::worker_grid_size_x>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint8_t, 10> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::worker_grid_size_y>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint8_t, 11> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::absolute_logical_x>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint8_t, 12> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::absolute_logical_y>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint8_t, 13> {};
template <bool Const>
struct core_info_msg_t::FieldTraits<Const, core_info_msg_t::Field::l1_unreserved_start>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, core_info_msg_t>::template ScalarField<uint32_t, 14> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::ncrisc_halt>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template StructField<ncrisc_halt_msg_t, 0, 10> {
};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::subordinate_sync>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::
          template StructField<subordinate_sync_msg_t, 1, 11> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::launch_msg_rd_ptr>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template ScalarField<uint32_t, 2> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::launch>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template StructArray<launch_msg_t, 3, 12, 8> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::go_messages>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template StructArray<go_msg_t, 4, 13, 9> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::go_message_index>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template ScalarField<uint32_t, 5> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::watcher>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template StructField<watcher_msg_t, 6, 14> {};
template <bool Const>
struct mailboxes_t::FieldTraits<Const, mailboxes_t::Field::core_info>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, mailboxes_t>::template StructField<core_info_msg_t, 7, 15> {};
template <bool Const>
struct eth_word_t::FieldTraits<Const, eth_word_t::Field::bytes_sent>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, eth_word_t>::template ScalarField<uint32_t, 0> {};
template <bool Const>
struct eth_word_t::FieldTraits<Const, eth_word_t::Field::dst_cmd_valid>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, eth_word_t>::template ScalarField<uint32_t, 1> {};
template <bool Const>
struct eth_word_t::FieldTraits<Const, eth_word_t::Field::reserved_0>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, eth_word_t>::template ScalarField<uint32_t, 2> {};
template <bool Const>
struct eth_word_t::FieldTraits<Const, eth_word_t::Field::reserved_1>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, eth_word_t>::template ScalarField<uint32_t, 3> {};
template <bool Const>
struct routing_info_t::FieldTraits<Const, routing_info_t::Field::routing_enabled>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t>::template ScalarField<uint32_t, 0> {};
template <bool Const>
struct routing_info_t::FieldTraits<Const, routing_info_t::Field::src_sent_valid_cmd>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t>::template ScalarField<uint32_t, 1> {};
template <bool Const>
struct routing_info_t::FieldTraits<Const, routing_info_t::Field::dst_acked_valid_cmd>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t>::template ScalarField<uint32_t, 2> {};
template <bool Const>
struct routing_info_t::FieldTraits<Const, routing_info_t::Field::unused_arg0>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t>::template ScalarField<uint32_t, 3> {};
template <bool Const>
struct routing_info_t::FieldTraits<Const, routing_info_t::Field::fd_buffer_msgs>
    : ::tt::tt_metal::hal_structs::BaseStructView<Const, routing_info_t>::template StructArray<eth_word_t, 4, 6, 5> {};
}  // namespace types

class Factory {
public:
    using Impl = std::array<::tt::tt_metal::hal_structs::StructInfo, 21>;

private:
    template <typename Struct>
    struct StructTraits;
    template <typename Struct>
    const auto& info() const {
        return (*impl_)[StructTraits<Struct>::index];
    }

public:
    Factory(const Impl& impl) : impl_(&impl) {}
    // Create a memory-owning object
    template <typename Struct>
    Struct create() const {
        return {info<Struct>()};
    };
    // Create a view from arbitrary buffers - caller must guarantee the buffer has appropriate size
    template <typename Struct>
    Struct::View create_view(std::byte* base) const {
        return {info<Struct>(), base};
    }
    // Create a const view from arbitrary buffers - caller must guarantee the buffer has appropriate size
    template <typename Struct>
    Struct::ConstView create_view(const std::byte* base) const {
        return {info<Struct>(), base};
    }
    // Query the size of a struct
    template <typename Struct>
    size_t size_of() const {
        return info<Struct>().get_size();
    }
    // Query the offset of a struct field
    template <typename Struct>
    size_t offset_of(Struct::Field f) const {
        return info<Struct>().offset_of(static_cast<size_t>(f));
    }

private:
    const Impl* impl_;
};
template <>
struct Factory::StructTraits<types::ncrisc_halt_msg_t> {
    static constexpr size_t index = 0;
};
template <>
struct Factory::StructTraits<types::rta_offset_t> {
    static constexpr size_t index = 1;
};
template <>
struct Factory::StructTraits<types::kernel_config_msg_t> {
    static constexpr size_t index = 2;
};
template <>
struct Factory::StructTraits<types::go_msg_t> {
    static constexpr size_t index = 3;
};
template <>
struct Factory::StructTraits<types::launch_msg_t> {
    static constexpr size_t index = 4;
};
template <>
struct Factory::StructTraits<types::subordinate_sync_msg_t> {
    static constexpr size_t index = 5;
};
template <>
struct Factory::StructTraits<types::debug_waypoint_msg_t> {
    static constexpr size_t index = 6;
};
template <>
struct Factory::StructTraits<types::debug_sanitize_noc_addr_msg_t> {
    static constexpr size_t index = 7;
};
template <>
struct Factory::StructTraits<types::debug_insert_delays_msg_t> {
    static constexpr size_t index = 8;
};
template <>
struct Factory::StructTraits<types::debug_assert_msg_t> {
    static constexpr size_t index = 9;
};
template <>
struct Factory::StructTraits<types::debug_pause_msg_t> {
    static constexpr size_t index = 10;
};
template <>
struct Factory::StructTraits<types::debug_ring_buf_msg_t> {
    static constexpr size_t index = 11;
};
template <>
struct Factory::StructTraits<types::debug_stack_usage_per_cpu_t> {
    static constexpr size_t index = 12;
};
template <>
struct Factory::StructTraits<types::debug_stack_usage_t> {
    static constexpr size_t index = 13;
};
template <>
struct Factory::StructTraits<types::debug_eth_link_t> {
    static constexpr size_t index = 14;
};
template <>
struct Factory::StructTraits<types::watcher_msg_t> {
    static constexpr size_t index = 15;
};
template <>
struct Factory::StructTraits<types::addressable_core_t> {
    static constexpr size_t index = 16;
};
template <>
struct Factory::StructTraits<types::core_info_msg_t> {
    static constexpr size_t index = 17;
};
template <>
struct Factory::StructTraits<types::mailboxes_t> {
    static constexpr size_t index = 18;
};
template <>
struct Factory::StructTraits<types::eth_word_t> {
    static constexpr size_t index = 19;
};
template <>
struct Factory::StructTraits<types::routing_info_t> {
    static constexpr size_t index = 20;
};
using namespace types;

}  // namespace tt::tt_metal::dev_msgs
