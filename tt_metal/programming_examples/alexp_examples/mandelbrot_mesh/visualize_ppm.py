#!/usr/bin/env python3
# SPDX-FileCopyrightText: ¬© 2025 Tenstorrent
# SPDX-License-Identifier: Apache-2.0

"""
PPM Visualization Tool for Mandelbrot Results

This script provides multiple ways to visualize PPM files generated
by the Mandelbrot mesh implementation.
"""

import os
import sys
import argparse
from pathlib import Path


def convert_ppm_to_png(ppm_file, png_file=None):
    """Convert PPM file to PNG using PIL"""
    try:
        from PIL import Image

        if png_file is None:
            png_file = ppm_file.replace(".ppm", ".png")

        print(f"Converting {ppm_file} to {png_file}...")

        # Open and convert
        with Image.open(ppm_file) as img:
            img.save(png_file, "PNG")

        print(f"‚úÖ Successfully converted to {png_file}")
        return png_file

    except ImportError:
        print("‚ùå PIL (Pillow) not available. Install with: pip install Pillow")
        return None
    except Exception as e:
        print(f"‚ùå Error converting {ppm_file}: {e}")
        return None


def display_with_matplotlib(ppm_file):
    """Display PPM file using matplotlib"""
    try:
        import matplotlib.pyplot as plt
        import matplotlib.image as mpimg

        print(f"Displaying {ppm_file} with matplotlib...")

        # Read and display
        img = mpimg.imread(ppm_file)

        plt.figure(figsize=(12, 10))
        plt.imshow(img)
        plt.title(f"Mandelbrot Set - {Path(ppm_file).name}", fontsize=16, fontweight="bold")
        plt.axis("off")

        # Add info text
        height, width = img.shape[:2]
        plt.figtext(
            0.02,
            0.02,
            f"Resolution: {width}√ó{height} | Generated by TT Mesh Device",
            fontsize=10,
            bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
        )

        plt.tight_layout()
        plt.show()

        # Also save as PNG
        png_file = ppm_file.replace(".ppm", "_matplotlib.png")
        plt.savefig(png_file, dpi=150, bbox_inches="tight")
        print(f"‚úÖ Also saved as {png_file}")

        return True

    except ImportError:
        print("‚ùå Matplotlib not available. Install with: pip install matplotlib")
        return False
    except Exception as e:
        print(f"‚ùå Error displaying {ppm_file}: {e}")
        return False


def create_html_viewer(ppm_files):
    """Create an HTML viewer for multiple PPM files"""
    try:
        from PIL import Image

        html_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mandelbrot Set - TT Mesh Device Results</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f0f0f0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
        }
        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .image-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: 1px solid #ddd;
        }
        .image-card img {
            width: 100%;
            height: auto;
            border-radius: 5px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        .image-card img:hover {
            transform: scale(1.05);
        }
        .image-title {
            font-size: 18px;
            font-weight: bold;
            margin: 10px 0 5px 0;
            color: #333;
        }
        .image-info {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        .specs {
            background: #f8f9fa;
            border-left: 4px solid #007bff;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
        }
        .modal-content {
            margin: auto;
            display: block;
            width: 90%;
            max-width: 1000px;
            max-height: 90%;
            margin-top: 2%;
        }
        .close {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé® Mandelbrot Set Visualization</h1>
            <h2>Computed on Tenstorrent 2√ó4 Mesh Device</h2>
            <p>8√ó Parallel Processing ‚Ä¢ Perfect Load Balancing ‚Ä¢ Distributed Computing</p>
        </div>

        <div class="specs">
            <h3>üöÄ Parallelization Details</h3>
            <ul>
                <li><strong>Mesh Configuration:</strong> 2√ó4 = 8 devices</li>
                <li><strong>Per Device:</strong> ~32,768 pixels</li>
                <li><strong>Speedup:</strong> 8√ó theoretical (embarrassingly parallel)</li>
                <li><strong>Memory:</strong> Distributed DRAM shards</li>
                <li><strong>Communication:</strong> Zero during computation</li>
            </ul>
        </div>

        <div class="image-grid">
"""

        # Convert PPM files to PNG and add to HTML
        for ppm_file in ppm_files:
            if not os.path.exists(ppm_file):
                continue

            png_file = ppm_file.replace(".ppm", ".png")
            convert_ppm_to_png(ppm_file, png_file)

            if os.path.exists(png_file):
                # Get image info
                with Image.open(png_file) as img:
                    width, height = img.size

                file_size = os.path.getsize(ppm_file)
                file_size_mb = file_size / (1024 * 1024)

                kernel_type = "Unknown"
                if "simple" in ppm_file:
                    kernel_type = "Simple Kernel (Educational)"
                elif "fixed" in ppm_file or "mesh" in ppm_file:
                    kernel_type = "Fixed-Point Kernel (Production)"

                html_content += f"""
            <div class="image-card">
                <div class="image-title">{Path(ppm_file).name}</div>
                <div class="image-info">
                    {kernel_type}<br>
                    Resolution: {width} √ó {height}<br>
                    File size: {file_size_mb:.1f} MB
                </div>
                <img src="{Path(png_file).name}" alt="{Path(ppm_file).name}" onclick="openModal(this.src)">
            </div>
"""

        html_content += """
        </div>

        <div class="specs">
            <h3>üìä Implementation Comparison</h3>
            <table style="width: 100%; border-collapse: collapse;">
                <tr style="background: #f8f9fa;">
                    <th style="padding: 10px; border: 1px solid #ddd;">Kernel</th>
                    <th style="padding: 10px; border: 1px solid #ddd;">Approach</th>
                    <th style="padding: 10px; border: 1px solid #ddd;">Best For</th>
                </tr>
                <tr>
                    <td style="padding: 10px; border: 1px solid #ddd;"><strong>Fixed-Point</strong></td>
                    <td style="padding: 10px; border: 1px solid #ddd;">16.16 integer arithmetic</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">Production deployment</td>
                </tr>
                <tr>
                    <td style="padding: 10px; border: 1px solid #ddd;"><strong>Simple</strong></td>
                    <td style="padding: 10px; border: 1px solid #ddd;">Detailed comments</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">Learning/teaching</td>
                </tr>
            </table>
        </div>
    </div>

    <!-- Modal for full-size viewing -->
    <div id="imageModal" class="modal" onclick="closeModal()">
        <span class="close" onclick="closeModal()">&times;</span>
        <img class="modal-content" id="modalImage">
    </div>

    <script>
        function openModal(src) {
            document.getElementById('imageModal').style.display = 'block';
            document.getElementById('modalImage').src = src;
        }

        function closeModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        // Close modal on Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
            }
        });
    </script>
</body>
</html>"""

        html_file = "mandelbrot_viewer.html"
        with open(html_file, "w") as f:
            f.write(html_content)

        print(f"‚úÖ Created HTML viewer: {html_file}")
        print(f"   Open in browser: file://{os.path.abspath(html_file)}")

        return html_file

    except ImportError:
        print("‚ùå PIL (Pillow) not available for HTML viewer. Install with: pip install Pillow")
        return None
    except Exception as e:
        print(f"‚ùå Error creating HTML viewer: {e}")
        return None


def find_ppm_files(directory="."):
    """Find all PPM files in directory"""
    ppm_files = []
    for file in Path(directory).glob("*.ppm"):
        ppm_files.append(str(file))
    return sorted(ppm_files)


def main():
    parser = argparse.ArgumentParser(description="Visualize PPM files from Mandelbrot mesh computation")
    parser.add_argument("files", nargs="*", help="PPM files to visualize (default: find all *.ppm)")
    parser.add_argument("--convert", "-c", action="store_true", help="Convert to PNG only")
    parser.add_argument("--display", "-d", action="store_true", help="Display with matplotlib")
    parser.add_argument("--html", "-w", action="store_true", help="Create HTML web viewer")
    parser.add_argument("--all", "-a", action="store_true", help="Do everything: convert, display, and create HTML")

    args = parser.parse_args()

    # Find PPM files
    if args.files:
        ppm_files = args.files
    else:
        ppm_files = find_ppm_files()

    if not ppm_files:
        print("‚ùå No PPM files found!")
        print("   Run the Mandelbrot mesh computation first:")
        print("   ./build_and_run.sh")
        return 1

    print(f"Found {len(ppm_files)} PPM file(s):")
    for f in ppm_files:
        if os.path.exists(f):
            size = os.path.getsize(f)
            print(f"  ‚úÖ {f} ({size:,} bytes)")
        else:
            print(f"  ‚ùå {f} (not found)")
    print()

    success = False

    # Convert to PNG
    if args.convert or args.all or not any([args.display, args.html]):
        print("=== Converting PPM to PNG ===")
        for ppm_file in ppm_files:
            if os.path.exists(ppm_file):
                png_file = convert_ppm_to_png(ppm_file)
                if png_file:
                    success = True
        print()

    # Display with matplotlib
    if args.display or args.all:
        print("=== Displaying with Matplotlib ===")
        for ppm_file in ppm_files:
            if os.path.exists(ppm_file):
                if display_with_matplotlib(ppm_file):
                    success = True
        print()

    # Create HTML viewer
    if args.html or args.all:
        print("=== Creating HTML Viewer ===")
        html_file = create_html_viewer(ppm_files)
        if html_file:
            success = True
        print()

    if success:
        print("üéâ Visualization complete!")
        if args.html or args.all:
            print(f"   Open mandelbrot_viewer.html in your browser to view results")
    else:
        print("‚ùå No visualizations were created successfully")
        print("   Try installing required packages:")
        print("   pip install Pillow matplotlib")

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
