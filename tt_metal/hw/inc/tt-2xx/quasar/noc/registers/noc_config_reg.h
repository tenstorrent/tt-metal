// SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC
//
// SPDX-License-Identifier: Apache-2.0

/*******************************************************************************
 * Header file for register addresses and fields
 *
 * This file was AUTO-GENERATED from SystemRDL input.
 * RDL File: (Provided in prompt)
 * Address Map: noc_config
 *
 * It includes address definitions, struct/union typedefs for registers,
 * and bit field mask/shift definitions.
 *
 ******************************************************************************/

#ifndef NOC_CONFIG_REG_H
#define NOC_CONFIG_REG_H

#include <stdint.h>

//==============================================================================
// Addresses for Address Map: noc_config
//==============================================================================

#define NOC_CONFIG_REG_MAP_BASE_ADDR (0x00000100)  // Base address matching C example provided
#define NOC_CONFIG_REG_MAP_SIZE (0x000000F7)       // Size covering up to last register @ offset 0xF8

// Offsets and Addresses (Offset from RDL, Address = BASE_ADDR + Offset)
#define NOC_CONFIG_NIU_CONFIG_REG_OFFSET (0x00000000)
#define NOC_CONFIG_NIU_CONFIG_REG_ADDR (0x00000100)
#define NOC_CONFIG_ROUTER_CONFIG_REG_OFFSET (0x00000004)
#define NOC_CONFIG_ROUTER_CONFIG_REG_ADDR (0x00000104)
#define NOC_CONFIG_BROADCAST_ROW_DISABLE_0__REG_OFFSET (0x00000008)
#define NOC_CONFIG_BROADCAST_ROW_DISABLE_0__REG_ADDR (0x00000108)
#define NOC_CONFIG_BROADCAST_ROW_DISABLE_1__REG_OFFSET (0x0000000C)
#define NOC_CONFIG_BROADCAST_ROW_DISABLE_1__REG_ADDR (0x0000010C)
#define NOC_CONFIG_BROADCAST_COL_DISABLE_0__REG_OFFSET (0x00000010)
#define NOC_CONFIG_BROADCAST_COL_DISABLE_0__REG_ADDR (0x00000110)
#define NOC_CONFIG_BROADCAST_COL_DISABLE_1__REG_OFFSET (0x00000014)
#define NOC_CONFIG_BROADCAST_COL_DISABLE_1__REG_ADDR (0x00000114)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_REG_OFFSET (0x00000018)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_REG_ADDR (0x00000118)
#define NOC_CONFIG_DEBUG_COUNTER_RESET_REG_OFFSET (0x0000001C)
#define NOC_CONFIG_DEBUG_COUNTER_RESET_REG_ADDR (0x0000011C)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_REG_OFFSET (0x00000020)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_REG_ADDR (0x00000120)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_REG_OFFSET (0x00000024)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_REG_ADDR (0x00000124)
#define NOC_CONFIG_VC_DIM_ORDER_REG_OFFSET (0x00000028)
#define NOC_CONFIG_VC_DIM_ORDER_REG_ADDR (0x00000128)
#define NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_REG_OFFSET (0x0000002C)
#define NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_REG_ADDR (0x0000012C)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_NIU_REG_OFFSET (0x00000030)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_NIU_REG_ADDR (0x00000130)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_NORTH_REG_OFFSET (0x00000034)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_NORTH_REG_ADDR (0x00000134)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_EAST_REG_OFFSET (0x00000038)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_EAST_REG_ADDR (0x00000138)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_SOUTH_REG_OFFSET (0x0000003C)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_SOUTH_REG_ADDR (0x0000013C)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_WEST_REG_OFFSET (0x00000040)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_WEST_REG_ADDR (0x00000140)
#define NOC_CONFIG_NIU_TIMEOUT_DETECTED_REG_OFFSET (0x00000044)
#define NOC_CONFIG_NIU_TIMEOUT_DETECTED_REG_ADDR (0x00000144)
#define NOC_CONFIG_NIU_TIMEOUT_VALUE_0__REG_OFFSET (0x00000048)
#define NOC_CONFIG_NIU_TIMEOUT_VALUE_0__REG_ADDR (0x00000148)
#define NOC_CONFIG_NIU_TIMEOUT_VALUE_1__REG_OFFSET (0x0000004C)
#define NOC_CONFIG_NIU_TIMEOUT_VALUE_1__REG_ADDR (0x0000014C)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_0_REG_OFFSET (0x00000050)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_0_REG_ADDR (0x00000150)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_0_REG_OFFSET (0x00000054)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_0_REG_ADDR (0x00000154)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_0_REG_OFFSET (0x00000058)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_0_REG_ADDR (0x00000158)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_0_REG_OFFSET (0x0000005C)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_0_REG_ADDR (0x0000015C)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_1_REG_OFFSET (0x00000060)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_1_REG_ADDR (0x00000160)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_1_REG_OFFSET (0x00000064)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_1_REG_ADDR (0x00000164)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_1_REG_OFFSET (0x00000068)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_1_REG_ADDR (0x00000168)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_1_REG_OFFSET (0x0000006C)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_1_REG_ADDR (0x0000016C)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_2_REG_OFFSET (0x00000070)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_2_REG_ADDR (0x00000170)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_2_REG_OFFSET (0x00000074)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_2_REG_ADDR (0x00000174)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_2_REG_OFFSET (0x00000078)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_2_REG_ADDR (0x00000178)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_2_REG_OFFSET (0x0000007C)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_2_REG_ADDR (0x0000017C)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_3_REG_OFFSET (0x00000080)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_LO_3_REG_ADDR (0x00000180)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_3_REG_OFFSET (0x00000084)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_HI_3_REG_ADDR (0x00000184)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_3_REG_OFFSET (0x00000088)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_LO_3_REG_ADDR (0x00000188)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_3_REG_OFFSET (0x0000008C)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_HI_3_REG_ADDR (0x0000018C)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_4_REG_OFFSET (0x00000090)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_4_REG_ADDR (0x00000190)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_5_REG_OFFSET (0x00000094)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_5_REG_ADDR (0x00000194)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_6_REG_OFFSET (0x00000098)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_6_REG_ADDR (0x00000198)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_7_REG_OFFSET (0x0000009C)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_7_REG_ADDR (0x0000019C)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_8_REG_OFFSET (0x000000A0)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_8_REG_ADDR (0x000001A0)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_9_REG_OFFSET (0x000000A4)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_9_REG_ADDR (0x000001A4)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_10_REG_OFFSET (0x000000A8)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_10_REG_ADDR (0x000001A8)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_11_REG_OFFSET (0x000000AC)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_11_REG_ADDR (0x000001AC)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_0__REG_OFFSET (0x000000B0)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_0__REG_ADDR (0x000001B0)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_1__REG_OFFSET (0x000000B4)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_1__REG_ADDR (0x000001B4)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_2__REG_OFFSET (0x000000B8)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_2__REG_ADDR (0x000001B8)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_3__REG_OFFSET (0x000000BC)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_3__REG_ADDR (0x000001BC)
#define NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_REG_OFFSET (0x000000C0)
#define NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_REG_ADDR (0x000001C0)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_4_REG_OFFSET (0x000000C4)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_4_REG_ADDR (0x000001C4)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_5_REG_OFFSET (0x000000C8)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_5_REG_ADDR (0x000001C8)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_6_REG_OFFSET (0x000000CC)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_6_REG_ADDR (0x000001CC)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_7_REG_OFFSET (0x000000D0)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_7_REG_ADDR (0x000001D0)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_8_REG_OFFSET (0x000000D4)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_8_REG_ADDR (0x000001D4)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_9_REG_OFFSET (0x000000D8)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_9_REG_ADDR (0x000001D8)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_10_REG_OFFSET (0x000000DC)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_10_REG_ADDR (0x000001DC)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_11_REG_OFFSET (0x000000E0)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_11_REG_ADDR (0x000001E0)
#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_REG_OFFSET (0x000000E4)
#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_REG_ADDR (0x000001E4)
#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_REG_OFFSET (0x000000E8)
#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_REG_ADDR (0x000001E8)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_REG_OFFSET (0x000000EC)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_REG_ADDR (0x000001EC)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_REG_OFFSET (0x000000F0)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_REG_ADDR (0x000001F0)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_REG_OFFSET (0x000000F4)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_REG_ADDR (0x000001F4)

//==============================================================================
// Structs & Unions Typedefs for Registers
//==============================================================================

// Register Type: NIU_CONFIG
typedef struct {
    uint32_t clk_gating_enable : 1;            // [0:0]
    uint32_t clk_gating_hyst_val : 7;          // [7:1]
    uint32_t mem_parity_enable : 1;            // [8:8]
    uint32_t ecc_interrupt_enable : 3;         // [11:9]
    uint32_t tile_clk_disable : 1;             // [12:12]
    uint32_t noc2axi_double_store_enable : 1;  // [13:13]
    uint32_t niu_timeout_irq_en : 1;           // [14:14]
    uint32_t axi_enable : 1;                   // [15:15]
    uint32_t cmd_buf_enable : 1;               // [16:16]
    uint32_t autoinline_disable : 1;           // [17:17]
    uint32_t always_flush : 1;                 // [18:18]
    uint32_t reserved_19_31 : 13;              // [31:19]
} NOC_CONFIG_NIU_CONFIG_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_NIU_CONFIG_reg_t f;
} NOC_CONFIG_NIU_CONFIG_reg_u;

#define NOC_CONFIG_NIU_CONFIG_REG_DEFAULT (0x00000004)

// Register Type: ROUTER_CONFIG
typedef struct {
    uint32_t clk_gating_enable : 1;             // [0:0]
    uint32_t clk_gating_hyst_val : 7;           // [7:1]
    uint32_t max_backoff_exp : 4;               // [11:8]
    uint32_t log2_basic_timeout_delay : 4;      // [15:12]
    uint32_t mem_parity_enable : 1;             // [16:16]
    uint32_t header_chk_bits_enable : 1;        // [17:17]
    uint32_t header_secded_correct_enable : 1;  // [18:18]
    uint32_t reserved_19_31 : 13;               // [31:19]
} NOC_CONFIG_ROUTER_CONFIG_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_ROUTER_CONFIG_reg_t f;
} NOC_CONFIG_ROUTER_CONFIG_reg_u;

#define NOC_CONFIG_ROUTER_CONFIG_REG_DEFAULT (0x00005804)

// Register Type: BROADCAST_DISABLE (Used by BROADCAST_ROW_DISABLE, BROADCAST_COL_DISABLE)
typedef struct {
    uint32_t broadcast_disable : 32;  // [31:0]
} NOC_CONFIG_BROADCAST_DISABLE_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_BROADCAST_DISABLE_reg_t f;
} NOC_CONFIG_BROADCAST_DISABLE_reg_u;

#define NOC_CONFIG_BROADCAST_DISABLE_REG_DEFAULT (0x00000000)

// Register Type: MEM_SHUTDOWN_CONTROL
typedef struct {
    uint32_t tsmc_sd : 1;         // [0:0]
    uint32_t tsmc_dslp : 1;       // [1:1]
    uint32_t tsmc_dslplv : 1;     // [2:2]
    uint32_t reserved_3_31 : 29;  // [31:3]
} NOC_CONFIG_MEM_SHUTDOWN_CONTROL_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_MEM_SHUTDOWN_CONTROL_reg_t f;
} NOC_CONFIG_MEM_SHUTDOWN_CONTROL_reg_u;

#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_REG_DEFAULT (0x00000000)

// Register Type: DEBUG_COUNTER_RESET
typedef struct {
    uint32_t router_outgoing_flit_counter_reset : 1;  // [0:0]
    uint32_t reserved_1_3 : 3;                        // [3:1]
    uint32_t cmd_buf_ovfl_clear : 1;                  // [4:4]
    uint32_t reserved_5_31 : 27;                      // [31:5]
} NOC_CONFIG_DEBUG_COUNTER_RESET_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_DEBUG_COUNTER_RESET_reg_t f;
} NOC_CONFIG_DEBUG_COUNTER_RESET_reg_u;

#define NOC_CONFIG_DEBUG_COUNTER_RESET_REG_DEFAULT (0x00000000)

// Register Type: MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG
typedef struct {
    uint32_t interrupt_enable : 16;      // [15:0]
    uint32_t reserved_16_27 : 12;        // [27:16]
    uint32_t clear_on_read_disable : 1;  // [28:28]
    uint32_t reserved_29_31 : 3;         // [31:29]
} NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_reg_t f;
} NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_reg_u;

#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_REG_DEFAULT (0x00000000)

// Register Type: MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR
typedef struct {
    uint32_t bit_0_clear : 1;      // [0:0]
    uint32_t bit_1_clear : 1;      // [1:1]
    uint32_t bit_2_clear : 1;      // [2:2]
    uint32_t bit_3_clear : 1;      // [3:3]
    uint32_t bit_4_clear : 1;      // [4:4]
    uint32_t bit_5_clear : 1;      // [5:5]
    uint32_t bit_6_clear : 1;      // [6:6]
    uint32_t bit_7_clear : 1;      // [7:7]
    uint32_t bit_8_clear : 1;      // [8:8]
    uint32_t bit_9_clear : 1;      // [9:9]
    uint32_t bit_10_clear : 1;     // [10:10]
    uint32_t bit_11_clear : 1;     // [11:11]
    uint32_t bit_12_clear : 1;     // [12:12]
    uint32_t bit_13_clear : 1;     // [13:13]
    uint32_t bit_14_clear : 1;     // [14:14]
    uint32_t bit_15_clear : 1;     // [15:15]
    uint32_t reserved_16_31 : 16;  // [31:16]
} NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_reg_t f;
} NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_reg_u;

#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_REG_DEFAULT (0x00000000)

// Register Type: VC_DIM_ORDER
typedef struct {
    uint32_t data : 32;  // [31:0]
} NOC_CONFIG_VC_DIM_ORDER_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_VC_DIM_ORDER_reg_t f;
} NOC_CONFIG_VC_DIM_ORDER_reg_u;

#define NOC_CONFIG_VC_DIM_ORDER_REG_DEFAULT (0xAAAAAAAA)

// Register Type: THROTTLER_CYCLES_PER_WINDOW (Instance @ 0x12C)
typedef struct {
    uint32_t data : 32;  // [31:0]
} NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_reg_t f;
} NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_reg_u;

#define NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_REG_DEFAULT (0x00000000)

// Register Type: THROTTLER_HANDSHAKES_PER_WINDOW (Used by NIU, NORTH, EAST, SOUTH, WEST instances)
typedef struct {
    uint32_t data : 32;  // [31:0]
} NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_t f;
} NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u;

#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_REG_DEFAULT (0x00000000)

// Register Type: NIU_TIMEOUT_DETECTED
typedef struct {
    uint32_t data : 1;            // [0:0]
    uint32_t reserved_1_31 : 31;  // [31:1]
} NOC_CONFIG_NIU_TIMEOUT_DETECTED_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_NIU_TIMEOUT_DETECTED_reg_t f;
} NOC_CONFIG_NIU_TIMEOUT_DETECTED_reg_u;

#define NOC_CONFIG_NIU_TIMEOUT_DETECTED_REG_DEFAULT (0x00000000)

// Register Type: NIU_TIMEOUT_VALUE (Used by instances 0, 1)
typedef struct {
    uint32_t data : 32;  // [31:0]
} NOC_CONFIG_NIU_TIMEOUT_VALUE_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_NIU_TIMEOUT_VALUE_reg_t f;
} NOC_CONFIG_NIU_TIMEOUT_VALUE_reg_u;

#define NOC_CONFIG_NIU_TIMEOUT_VALUE_REG_DEFAULT (0x00000000)

// Register Type: INVALID_FENCE_START_ADDR (Used by LO/HI instances 0-3)
typedef struct {
    uint32_t start_addr : 32;  // [31:0]
} NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_t f;
} NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u;

#define NOC_CONFIG_INVALID_FENCE_START_ADDR_REG_DEFAULT (0xFFFFFFFF)

// Register Type: INVALID_FENCE_END_ADDR (Used by LO/HI instances 0-3)
typedef struct {
    uint32_t end_addr : 32;  // [31:0]
} NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_t f;
} NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u;

#define NOC_CONFIG_INVALID_FENCE_END_ADDR_REG_DEFAULT (0x00000000)

// Register Type: FLEX_PORT_ADDR_HASH_FN0 (Base type for FN0_4 through FN0_11)
typedef struct {
    uint32_t data : 18;            // [17:0]
    uint32_t reserved_18_31 : 14;  // [31:18]
} NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_t f;
} NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u;

// Default is based on the RDL defaults for instances 4-11 (0x1, 0x2, 0x4 ... 0x80)
// Using the default of the first instance (FN0_4) as the base default.
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_REG_DEFAULT (0x00000001)

// Register Type: VC_THROTTLER_HANDSHAKES_PER_WINDOW (Instance @ 0x1B0-0x1BC)
typedef struct {
    uint32_t vc0 : 8;  // [7:0]
    uint32_t vc1 : 8;  // [15:8]
    uint32_t vc2 : 8;  // [23:16]
    uint32_t vc3 : 8;  // [31:24]
} NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_reg_t f;
} NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u;

#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_REG_DEFAULT (0x00000000)

// Register Type: VC_THROTTLER_CYCLES_PER_WINDOW (Instance @ 0x1C0)
typedef struct {
    uint32_t data : 8;            // [7:0]
    uint32_t reserved_8_31 : 24;  // [31:8]
} NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_reg_t f;
} NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_reg_u;

#define NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_REG_DEFAULT (0x00000000)

// Register Type: FLEX_PORT_ADDR_HASH_FN1 (Base type for FN1_4 through FN1_11)
typedef struct {
    uint32_t data : 18;            // [17:0]
    uint32_t reserved_18_31 : 14;  // [31:18]
} NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_t f;
} NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u;

// Using the default of the first instance (FN1_4) as the base default.
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_REG_DEFAULT (0x00000001)

// Register Type: FLEX_PORT_FN0_MASK_MATCH
typedef struct {
    uint32_t mask : 10;           // [9:0]
    uint32_t reserved_10_15 : 6;  // [15:10]
    uint32_t match : 10;          // [25:16]
    uint32_t reserved_26_31 : 6;  // [31:26]
} NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_reg_t f;
} NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_reg_u;

#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_REG_DEFAULT (0x00000000)

// Register Type: FLEX_PORT_FN1_MASK_MATCH
typedef struct {
    uint32_t mask : 10;           // [9:0]
    uint32_t reserved_10_15 : 6;  // [15:10]
    uint32_t match : 10;          // [25:16]
    uint32_t reserved_26_31 : 6;  // [31:26]
} NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_reg_t f;
} NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_reg_u;

#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_REG_DEFAULT (0x00000000)

// Register Type: FLEX_PORT_RD_PORT_IN_ORDER_MASK
typedef struct {
    uint32_t data : 18;            // [17:0]
    uint32_t reserved_18_31 : 14;  // [31:18]
} NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_reg_t f;
} NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_reg_u;

#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_REG_DEFAULT (0x00000000)

// Register Type: FLEX_PORT_RD_PORT_IN_ORDER_MATCH
typedef struct {
    uint32_t data : 18;            // [17:0]
    uint32_t reserved_18_31 : 14;  // [31:18]
} NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_reg_t f;
} NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_reg_u;

#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_REG_DEFAULT (0x00000000)

// Register Type: FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES
typedef struct {
    uint32_t rd_port_write_in_order : 1;    // [0:0]
    uint32_t rd_port_all_in_order : 1;      // [1:1]
    uint32_t rd_port_rw_barrier_order : 1;  // [2:2]
    uint32_t rd_port_perf_cnt_enable : 1;   // [3:3]
    uint32_t reserved_4_15 : 12;            // [15:4]
    uint32_t wr_port_write_in_order : 1;    // [16:16]
    uint32_t wr_port_all_in_order : 1;      // [17:17]
    uint32_t wr_port_rw_barrier_order : 1;  // [18:18]
    uint32_t wr_port_perf_cnt_enable : 1;   // [19:19]
    uint32_t reserved_20_31 : 12;           // [31:20]
} NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_reg_t;

typedef union {
    uint32_t val;
    NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_reg_t f;
} NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_reg_u;

#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_REG_DEFAULT (0x00000000)

//==============================================================================
// Register Map Structure
//==============================================================================

typedef struct {
    NOC_CONFIG_NIU_CONFIG_reg_u niu_config;                       // 0x100
    NOC_CONFIG_ROUTER_CONFIG_reg_u router_config;                 // 0x104
    NOC_CONFIG_BROADCAST_DISABLE_reg_u broadcast_row_disable[2];  // 0x108 /* Instances 0-1 */
    NOC_CONFIG_BROADCAST_DISABLE_reg_u broadcast_col_disable[2];  // 0x110 /* Instances 0-1 */
    NOC_CONFIG_MEM_SHUTDOWN_CONTROL_reg_u mem_shutdown_control;   // 0x118
    NOC_CONFIG_DEBUG_COUNTER_RESET_reg_u debug_counter_reset;     // 0x11C
    NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_reg_u mst_if_id_transaction_count_rtz_cfg;  // 0x120
    NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_reg_u mst_if_id_transaction_count_rtz_clr;  // 0x124
    NOC_CONFIG_VC_DIM_ORDER_reg_u vc_dim_order;                                                // 0x128
    NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_reg_u throttler_cycles_per_window;                  // 0x12C
    NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u throttler_handshakes_per_window_niu;      // 0x130
    NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u throttler_handshakes_per_window_north;    // 0x134
    NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u throttler_handshakes_per_window_east;     // 0x138
    NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u throttler_handshakes_per_window_south;    // 0x13C
    NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u throttler_handshakes_per_window_west;     // 0x140
    NOC_CONFIG_NIU_TIMEOUT_DETECTED_reg_u niu_timeout_detected;                                // 0x144
    NOC_CONFIG_NIU_TIMEOUT_VALUE_reg_u niu_timeout_value[2];                  // 0x148 /* Instances 0-1 */
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_lo_0;  // 0x150
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_hi_0;  // 0x154
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_lo_0;      // 0x158
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_hi_0;      // 0x15C
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_lo_1;  // 0x160
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_hi_1;  // 0x164
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_lo_1;      // 0x168
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_hi_1;      // 0x16C
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_lo_2;  // 0x170
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_hi_2;  // 0x174
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_lo_2;      // 0x178
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_hi_2;      // 0x17C
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_lo_3;  // 0x180
    NOC_CONFIG_INVALID_FENCE_START_ADDR_reg_u invalid_fence_start_addr_hi_3;  // 0x184
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_lo_3;      // 0x188
    NOC_CONFIG_INVALID_FENCE_END_ADDR_reg_u invalid_fence_end_addr_hi_3;      // 0x18C
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_4;       // 0x190
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_5;       // 0x194
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_6;       // 0x198
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_7;       // 0x19C
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_8;       // 0x1A0
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_9;       // 0x1A4
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_10;      // 0x1A8
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_reg_u flex_port_addr_hash_fn0_11;      // 0x1AC
    NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_reg_u
        vc_throttler_handshakes_per_window[4];                                           // 0x1B0 /* Instances 0-3 */
    NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_reg_u vc_throttler_cycles_per_window;      // 0x1C0
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_4;                  // 0x1C4
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_5;                  // 0x1C8
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_6;                  // 0x1CC
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_7;                  // 0x1D0
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_8;                  // 0x1D4
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_9;                  // 0x1D8
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_10;                 // 0x1DC
    NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_reg_u flex_port_addr_hash_fn1_11;                 // 0x1E0
    NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_reg_u flex_port_fn0_mask_match;                  // 0x1E4
    NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_reg_u flex_port_fn1_mask_match;                  // 0x1E8
    NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_reg_u flex_port_rd_port_in_order_mask;    // 0x1EC
    NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_reg_u flex_port_rd_port_in_order_match;  // 0x1F0
    NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_reg_u flex_port_rd_port_rd_wr_global_enables;  // 0x1F4
} noc_config_regmap_t;

//==============================================================================
// Bit Fields Masks and Shifts
//==============================================================================

// Register Type: NIU_CONFIG
#define NOC_CONFIG_NIU_CONFIG_CLK_GATING_ENABLE_MASK (0x00000001)
#define NOC_CONFIG_NIU_CONFIG_CLK_GATING_ENABLE_SHIFT (0)
#define NOC_CONFIG_NIU_CONFIG_CLK_GATING_HYST_VAL_MASK (0x000000FE)
#define NOC_CONFIG_NIU_CONFIG_CLK_GATING_HYST_VAL_SHIFT (1)
#define NOC_CONFIG_NIU_CONFIG_MEM_PARITY_ENABLE_MASK (0x00000100)
#define NOC_CONFIG_NIU_CONFIG_MEM_PARITY_ENABLE_SHIFT (8)
#define NOC_CONFIG_NIU_CONFIG_ECC_INTERRUPT_ENABLE_MASK (0x00000E00)
#define NOC_CONFIG_NIU_CONFIG_ECC_INTERRUPT_ENABLE_SHIFT (9)
#define NOC_CONFIG_NIU_CONFIG_TILE_CLK_DISABLE_MASK (0x00001000)
#define NOC_CONFIG_NIU_CONFIG_TILE_CLK_DISABLE_SHIFT (12)
#define NOC_CONFIG_NIU_CONFIG_NOC2AXI_DOUBLE_STORE_ENABLE_MASK (0x00002000)
#define NOC_CONFIG_NIU_CONFIG_NOC2AXI_DOUBLE_STORE_ENABLE_SHIFT (13)
#define NOC_CONFIG_NIU_CONFIG_NIU_TIMEOUT_IRQ_EN_MASK (0x00004000)
#define NOC_CONFIG_NIU_CONFIG_NIU_TIMEOUT_IRQ_EN_SHIFT (14)
#define NOC_CONFIG_NIU_CONFIG_AXI_ENABLE_MASK (0x00008000)
#define NOC_CONFIG_NIU_CONFIG_AXI_ENABLE_SHIFT (15)
#define NOC_CONFIG_NIU_CONFIG_CMD_BUF_ENABLE_MASK (0x00010000)
#define NOC_CONFIG_NIU_CONFIG_CMD_BUF_ENABLE_SHIFT (16)
#define NOC_CONFIG_NIU_CONFIG_AUTOINLINE_DISABLE_MASK (0x00020000)
#define NOC_CONFIG_NIU_CONFIG_AUTOINLINE_DISABLE_SHIFT (17)
#define NOC_CONFIG_NIU_CONFIG_ALWAYS_FLUSH_MASK (0x00040000)
#define NOC_CONFIG_NIU_CONFIG_ALWAYS_FLUSH_SHIFT (18)

// Register Type: ROUTER_CONFIG
#define NOC_CONFIG_ROUTER_CONFIG_CLK_GATING_ENABLE_MASK (0x00000001)
#define NOC_CONFIG_ROUTER_CONFIG_CLK_GATING_ENABLE_SHIFT (0)
#define NOC_CONFIG_ROUTER_CONFIG_CLK_GATING_HYST_VAL_MASK (0x000000FE)
#define NOC_CONFIG_ROUTER_CONFIG_CLK_GATING_HYST_VAL_SHIFT (1)
#define NOC_CONFIG_ROUTER_CONFIG_MAX_BACKOFF_EXP_MASK (0x00000F00)
#define NOC_CONFIG_ROUTER_CONFIG_MAX_BACKOFF_EXP_SHIFT (8)
#define NOC_CONFIG_ROUTER_CONFIG_LOG2_BASIC_TIMEOUT_DELAY_MASK (0x0000F000)
#define NOC_CONFIG_ROUTER_CONFIG_LOG2_BASIC_TIMEOUT_DELAY_SHIFT (12)
#define NOC_CONFIG_ROUTER_CONFIG_MEM_PARITY_ENABLE_MASK (0x00010000)
#define NOC_CONFIG_ROUTER_CONFIG_MEM_PARITY_ENABLE_SHIFT (16)
#define NOC_CONFIG_ROUTER_CONFIG_HEADER_CHK_BITS_ENABLE_MASK (0x00020000)
#define NOC_CONFIG_ROUTER_CONFIG_HEADER_CHK_BITS_ENABLE_SHIFT (17)
#define NOC_CONFIG_ROUTER_CONFIG_HEADER_SECDED_CORRECT_ENABLE_MASK (0x00040000)
#define NOC_CONFIG_ROUTER_CONFIG_HEADER_SECDED_CORRECT_ENABLE_SHIFT (18)

// Register Type: BROADCAST_DISABLE
#define NOC_CONFIG_BROADCAST_DISABLE_BROADCAST_DISABLE_MASK (0xFFFFFFFF)
#define NOC_CONFIG_BROADCAST_DISABLE_BROADCAST_DISABLE_SHIFT (0)

// Register Type: MEM_SHUTDOWN_CONTROL
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_TSMC_SD_MASK (0x00000001)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_TSMC_SD_SHIFT (0)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_TSMC_DSLP_MASK (0x00000002)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_TSMC_DSLP_SHIFT (1)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_TSMC_DSLPLV_MASK (0x00000004)
#define NOC_CONFIG_MEM_SHUTDOWN_CONTROL_TSMC_DSLPLV_SHIFT (2)

// Register Type: DEBUG_COUNTER_RESET
#define NOC_CONFIG_DEBUG_COUNTER_RESET_ROUTER_OUTGOING_FLIT_COUNTER_RESET_MASK (0x00000001)
#define NOC_CONFIG_DEBUG_COUNTER_RESET_ROUTER_OUTGOING_FLIT_COUNTER_RESET_SHIFT (0)
#define NOC_CONFIG_DEBUG_COUNTER_RESET_CMD_BUF_OVFL_CLEAR_MASK (0x00000010)
#define NOC_CONFIG_DEBUG_COUNTER_RESET_CMD_BUF_OVFL_CLEAR_SHIFT (4)

// Register Type: MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_INTERRUPT_ENABLE_MASK (0x0000FFFF)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_INTERRUPT_ENABLE_SHIFT (0)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_CLEAR_ON_READ_DISABLE_MASK (0x10000000)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CFG_CLEAR_ON_READ_DISABLE_SHIFT (28)

// Register Type: MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_0_CLEAR_MASK (0x00000001)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_0_CLEAR_SHIFT (0)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_1_CLEAR_MASK (0x00000002)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_1_CLEAR_SHIFT (1)
// ... (Defines for bits 2-13 omitted for brevity - they follow the pattern) ...
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_14_CLEAR_MASK (0x00004000)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_14_CLEAR_SHIFT (14)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_15_CLEAR_MASK (0x00008000)
#define NOC_CONFIG_MST_IF_ID_TRANSACTION_COUNT_RTZ_CLR_BIT_15_CLEAR_SHIFT (15)

// Register Type: VC_DIM_ORDER
#define NOC_CONFIG_VC_DIM_ORDER_DATA_MASK (0xFFFFFFFF)
#define NOC_CONFIG_VC_DIM_ORDER_DATA_SHIFT (0)

// Register Type: THROTTLER_CYCLES_PER_WINDOW (Instance @ 0x12C)
#define NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_DATA_MASK (0xFFFFFFFF)
#define NOC_CONFIG_THROTTLER_CYCLES_PER_WINDOW_DATA_SHIFT (0)

// Register Type: THROTTLER_HANDSHAKES_PER_WINDOW (Instances NIU, N, E, S, W)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_DATA_MASK (0xFFFFFFFF)
#define NOC_CONFIG_THROTTLER_HANDSHAKES_PER_WINDOW_DATA_SHIFT (0)

// Register Type: NIU_TIMEOUT_DETECTED
#define NOC_CONFIG_NIU_TIMEOUT_DETECTED_DATA_MASK (0x00000001)
#define NOC_CONFIG_NIU_TIMEOUT_DETECTED_DATA_SHIFT (0)

// Register Type: NIU_TIMEOUT_VALUE (Instances 0, 1)
#define NOC_CONFIG_NIU_TIMEOUT_VALUE_DATA_MASK (0xFFFFFFFF)
#define NOC_CONFIG_NIU_TIMEOUT_VALUE_DATA_SHIFT (0)

// Register Type: INVALID_FENCE_START_ADDR
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_START_ADDR_MASK (0xFFFFFFFF)
#define NOC_CONFIG_INVALID_FENCE_START_ADDR_START_ADDR_SHIFT (0)

// Register Type: INVALID_FENCE_END_ADDR
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_END_ADDR_MASK (0xFFFFFFFF)
#define NOC_CONFIG_INVALID_FENCE_END_ADDR_END_ADDR_SHIFT (0)

// Register Type: FLEX_PORT_ADDR_HASH_FN0 (Base type for FN0_4 through FN0_11)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_DATA_MASK (0x0003FFFF)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN0_DATA_SHIFT (0)

// Register Type: VC_THROTTLER_HANDSHAKES_PER_WINDOW
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC0_MASK (0x000000FF)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC0_SHIFT (0)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC1_MASK (0x0000FF00)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC1_SHIFT (8)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC2_MASK (0x00FF0000)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC2_SHIFT (16)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC3_MASK (0xFF000000)
#define NOC_CONFIG_VC_THROTTLER_HANDSHAKES_PER_WINDOW_VC3_SHIFT (24)

// Register Type: VC_THROTTLER_CYCLES_PER_WINDOW
#define NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_DATA_MASK (0x000000FF)
#define NOC_CONFIG_VC_THROTTLER_CYCLES_PER_WINDOW_DATA_SHIFT (0)

// Register Type: FLEX_PORT_ADDR_HASH_FN1 (Base type for FN1_4 through FN1_11)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_DATA_MASK (0x0003FFFF)
#define NOC_CONFIG_FLEX_PORT_ADDR_HASH_FN1_DATA_SHIFT (0)

// Register Type: FLEX_PORT_FN0_MASK_MATCH
#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_MASK_MASK (0x000003FF)
#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_MASK_SHIFT (0)
#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_MATCH_MASK (0x03FF0000)
#define NOC_CONFIG_FLEX_PORT_FN0_MASK_MATCH_MATCH_SHIFT (16)

// Register Type: FLEX_PORT_FN1_MASK_MATCH
#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_MASK_MASK (0x000003FF)
#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_MASK_SHIFT (0)
#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_MATCH_MASK (0x03FF0000)
#define NOC_CONFIG_FLEX_PORT_FN1_MASK_MATCH_MATCH_SHIFT (16)

// Register Type: FLEX_PORT_RD_PORT_IN_ORDER_MASK
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_DATA_MASK (0x0003FFFF)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MASK_DATA_SHIFT (0)

// Register Type: FLEX_PORT_RD_PORT_IN_ORDER_MATCH
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_DATA_MASK (0x0003FFFF)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_IN_ORDER_MATCH_DATA_SHIFT (0)

// Register Type: FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_WRITE_IN_ORDER_MASK (0x00000001)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_WRITE_IN_ORDER_SHIFT (0)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_ALL_IN_ORDER_MASK (0x00000002)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_ALL_IN_ORDER_SHIFT (1)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_RW_BARRIER_ORDER_MASK (0x00000004)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_RW_BARRIER_ORDER_SHIFT (2)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_PERF_CNT_ENABLE_MASK (0x00000008)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_RD_PORT_PERF_CNT_ENABLE_SHIFT (3)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_WRITE_IN_ORDER_MASK (0x00010000)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_WRITE_IN_ORDER_SHIFT (16)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_ALL_IN_ORDER_MASK (0x00020000)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_ALL_IN_ORDER_SHIFT (17)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_RW_BARRIER_ORDER_MASK (0x00040000)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_RW_BARRIER_ORDER_SHIFT (18)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_PERF_CNT_ENABLE_MASK (0x00080000)
#define NOC_CONFIG_FLEX_PORT_RD_PORT_RD_WR_GLOBAL_ENABLES_WR_PORT_PERF_CNT_ENABLE_SHIFT (19)

#endif  // NOC_CONFIG_REG_H
