diff --git a/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_pack.h b/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_pack.h
index 700b4937c5..8c695b900d 100644
--- a/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_pack.h
+++ b/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_pack.h
@@ -18,7 +18,7 @@ using namespace ckernel;
 template <bool skip_sync = false, bool wait_for_blocks = false, bool brisc_pack = false>
 inline void llk_wait_for_free_tiles(const std::int32_t operand, const std::int32_t num_tiles) {
     // TODO(MO): Manually uncomment until issue #6619 is resolved
-    // DeviceZoneScopedSumN2("CB-COMPUTE-RESERVE-BACK");
+    DeviceZoneScopedSumN2("CB-COMPUTE-RESERVE-BACK");
     std::uint32_t output = operand;

     volatile tt_reg_ptr std::uint32_t* tiles_acked_ptr = get_cb_tiles_acked_ptr(operand);
@@ -34,6 +34,7 @@ inline void llk_wait_for_free_tiles(const std::int32_t operand, const std::int32

     std::int32_t free_tiles;
     do {
+        zone.inc_counter();
         std::uint16_t tiles_acked = (std::uint16_t)reg_read((std::uint32_t)tiles_acked_ptr);
         std::uint32_t free_tiles_wrap = get_local_cb_interface(output).fifo_num_pages - (tiles_received - tiles_acked);
         free_tiles = (std::int32_t)free_tiles_wrap;
diff --git a/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_unpack.h b/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_unpack.h
index df31e6f049..6a8f156d16 100644
--- a/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_unpack.h
+++ b/tt_metal/hw/ckernels/blackhole/metal/llk_io/llk_io_unpack.h
@@ -16,7 +16,7 @@ using namespace ckernel;
 // Wait for N tiles available in the incoming stream
 inline void llk_wait_tiles(int operand, std::int32_t num_tiles) {
     // TODO(MO): Manually uncomment until issue #6619 is resolved
-    // DeviceZoneScopedSumN1("CB-COMPUTE-WAIT-FRONT");
+    DeviceZoneScopedSumN1("CB-COMPUTE-WAIT-FRONT");
     std::uint32_t input = operand;
     volatile tt_l1_ptr std::uint32_t* tiles_received_ptr = get_cb_tiles_received_ptr(operand);
     std::uint16_t num_tiles_u = (std::uint16_t)num_tiles;
@@ -25,6 +25,7 @@ inline void llk_wait_tiles(int operand, std::int32_t num_tiles) {

     uint16_t num_tiles_recv;
     do {
+        zone.inc_counter();
         tiles_received = (std::uint16_t)reg_read((std::uint32_t)tiles_received_ptr);
         num_tiles_recv = tiles_received - get_local_cb_interface(input).tiles_acked;
     } while (num_tiles_recv < num_tiles_u);
diff --git a/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_pack.h b/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_pack.h
index 5b2109c0bf..4c9f2d33c1 100644
--- a/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_pack.h
+++ b/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_pack.h
@@ -18,7 +18,7 @@ using namespace ckernel;
 template <bool skip_sync = false, bool wait_for_blocks = false, bool brisc_pack = false>
 inline void llk_wait_for_free_tiles(const std::int32_t operand, const std::int32_t num_tiles) {
     // TODO(MO): Manually uncomment until issue #6619 is resolved
-    // DeviceZoneScopedSumN2("CB-COMPUTE-RESERVE-BACK");
+    DeviceZoneScopedSumN2("CB-COMPUTE-RESERVE-BACK");
     std::uint32_t output = operand;

     volatile tt_reg_ptr std::uint32_t* tiles_acked_ptr = get_cb_tiles_acked_ptr(operand);
@@ -34,6 +34,7 @@ inline void llk_wait_for_free_tiles(const std::int32_t operand, const std::int32

     std::int32_t free_tiles;
     do {
+        zone.inc_counter();
         std::uint16_t tiles_acked = (std::uint16_t)reg_read((std::uint32_t)tiles_acked_ptr);
         std::uint32_t free_tiles_wrap = get_local_cb_interface(output).fifo_num_pages - (tiles_received - tiles_acked);
         free_tiles = (std::int32_t)free_tiles_wrap;
diff --git a/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_unpack.h b/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_unpack.h
index 6b4eea296e..0a6dd3214e 100644
--- a/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_unpack.h
+++ b/tt_metal/hw/ckernels/wormhole_b0/metal/llk_io/llk_io_unpack.h
@@ -65,7 +65,7 @@ inline __attribute__((__always_inline__)) void apply_mm_stagger(int operand) {
 // Wait for N tiles available in the incoming stream
 inline void llk_wait_tiles(int operand, std::int32_t num_tiles) {
     // TODO(MO): Manually uncomment until issue #6619 is resolved
-    // DeviceZoneScopedSumN1("CB-COMPUTE-WAIT-FRONT");
+    DeviceZoneScopedSumN1("CB-COMPUTE-WAIT-FRONT");
     std::uint32_t input = operand;
     volatile tt_l1_ptr std::uint32_t* tiles_received_ptr = get_cb_tiles_received_ptr(operand);
     std::uint16_t num_tiles_u = (std::uint16_t)num_tiles;
@@ -74,6 +74,7 @@ inline void llk_wait_tiles(int operand, std::int32_t num_tiles) {

     uint16_t num_tiles_recv;
     do {
+        zone.inc_counter();
         tiles_received = (std::uint16_t)reg_read((std::uint32_t)tiles_received_ptr);
         num_tiles_recv = tiles_received - get_local_cb_interface(input).tiles_acked;
     } while (num_tiles_recv < num_tiles_u);
diff --git a/tt_metal/tools/profiler/kernel_profiler.hpp b/tt_metal/tools/profiler/kernel_profiler.hpp
index 09760828a9..f27fdfa6b7 100644
--- a/tt_metal/tools/profiler/kernel_profiler.hpp
+++ b/tt_metal/tools/profiler/kernel_profiler.hpp
@@ -446,16 +446,15 @@ struct profileScopeGuaranteed {

 template <uint32_t timer_id, uint32_t index>
 struct profileScopeAccumulate {
-    uint64_t start_time = 0;
-    volatile tt_reg_ptr uint32_t* p_reg = reinterpret_cast<volatile tt_reg_ptr uint32_t*>(RISCV_DEBUG_REG_WALL_CLOCK_L);

-    inline __attribute__((always_inline)) profileScopeAccumulate() {
-        start_time = ((uint64_t)p_reg[WALL_CLOCK_HIGH_INDEX] << 32) | p_reg[WALL_CLOCK_LOW_INDEX];
-    }
     inline __attribute__((always_inline)) ~profileScopeAccumulate() {
         sumIDs[index] = timer_id;
-        sums[index] += (((uint64_t)p_reg[WALL_CLOCK_HIGH_INDEX] << 32) | p_reg[WALL_CLOCK_LOW_INDEX]) - start_time;
     }
+
+    inline __attribute__((always_inline)) void inc_counter() {
+        sums[index] += 1;
+    }
+
 };

 // performs quick push to DRAM if buffers appear full
