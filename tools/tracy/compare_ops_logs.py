#! /usr/bin/env python3

# SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC

# SPDX-License-Identifier: Apache-2.0

import sys
import pandas as pd
import click
from loguru import logger


@click.command()
@click.option("--python-ops-perf-report", type=click.Path(), help="Path to the ops perf report generated by Python")
@click.option("--cpp-ops-perf-report", type=click.Path(), help="Path to the ops perf report generated by C++")
def main(python_ops_perf_report, cpp_ops_perf_report):
    logger.info(
        f"Comparing Python ops perf report {python_ops_perf_report} with C++ ops perf report {cpp_ops_perf_report}"
    )

    try:
        python_df = pd.read_csv(python_ops_perf_report)
    except pd.errors.EmptyDataError:
        python_df = pd.DataFrame()

    try:
        cpp_df = pd.read_csv(cpp_ops_perf_report)
    except pd.errors.EmptyDataError:
        cpp_df = pd.DataFrame()

    if python_df.empty or cpp_df.empty:
        logger.info("Skipping comparison because at least one of the ops perf reports is empty")
        return

    common_columns = python_df.columns.intersection(cpp_df.columns)
    if common_columns.empty:
        logger.info("Skipping comparison because the two ops perf reports have no common columns")
        return

    assert common_columns.size >= 11, f"Only {common_columns.size} common columns found"

    python_df_filtered = python_df[common_columns]
    cpp_df_filtered = cpp_df[common_columns]
    cpp_df_filtered = cpp_df_filtered[cpp_df_filtered["GLOBAL CALL COUNT"] != 0]

    python_df_sorted = python_df_filtered.sort_values(by="GLOBAL CALL COUNT").reset_index(drop=True)
    cpp_df_sorted = cpp_df_filtered.sort_values(by="GLOBAL CALL COUNT").reset_index(drop=True)

    are_equal = python_df_sorted.equals(cpp_df_sorted)
    if are_equal:
        logger.info("Ops perf reports are equal")
    else:
        logger.info("Ops perf reports are not equal")
        logger.info(f"Python ops perf report: {python_df_sorted}")
        logger.info(f"C++ ops perf report: {cpp_df_sorted}")
        sys.exit(1)


if __name__ == "__main__":
    main()
