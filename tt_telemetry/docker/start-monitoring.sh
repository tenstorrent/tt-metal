#!/bin/bash
# Start Prometheus + Grafana monitoring stack for TT-Metal telemetry
#
# Usage:
#   ./start-monitoring.sh [HOST:PORT] [HOST:PORT] ...
#
# Examples:
#   # Scrape localhost TT-Metal telemetry (default)
#   ./start-monitoring.sh
#
#   # Scrape remote TT-Metal telemetry
#   ./start-monitoring.sh sjc-wh-05:53494
#
#   # Scrape multiple hosts
#   ./start-monitoring.sh sjc-wh-05:53494 sjc-wh-06:53494

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Parse command-line arguments for target hosts
TARGETS=("$@")

# Show help if requested
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    grep "^#" "$0" | tail -n +2 | cut -c 3-
    exit 0
fi

# Default: scrape localhost telemetry if no targets specified
if [ ${#TARGETS[@]} -eq 0 ]; then
    TARGETS=("host.docker.internal:8080")
fi

# Resolve hostname to IPv4 address if possible
# Falls back to original value if resolution fails
resolve_target() {
    local target="$1"
    local host="${target%:*}"
    local port="${target##*:}"

    # If it's already an IP address, return as-is
    if [[ "$host" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "$target"
        return
    fi

    # Try to resolve hostname to IPv4
    local resolved_ip
    if resolved_ip=$(getent hosts "$host" 2>/dev/null | awk '{print $1; exit}'); then
        echo "  Resolved $host -> $resolved_ip" >&2
        echo "$resolved_ip:$port"
    elif resolved_ip=$(host -t A "$host" 2>/dev/null | awk '/has address/ {print $NF; exit}'); then
        echo "  Resolved $host -> $resolved_ip" >&2
        echo "$resolved_ip:$port"
    elif resolved_ip=$(nslookup "$host" 2>/dev/null | awk '/^Address: / && !/127\.0\.0\.1/ {print $2; exit}'); then
        echo "  Resolved $host -> $resolved_ip" >&2
        echo "$resolved_ip:$port"
    else
        echo "  Warning: Could not resolve $host, using as-is" >&2
        echo "$target"
    fi
}

# Resolve all targets
RESOLVED_TARGETS=()
for target in "${TARGETS[@]}"; do
    RESOLVED_TARGETS+=("$(resolve_target "$target")")
done

# Generate prometheus.yml with targets
generate_prometheus_config() {
    cat > prometheus.yml <<EOF
# Prometheus configuration file for scraping TT-Metal telemetry metrics
#
# AUTO-GENERATED by start-monitoring.sh - Do not edit manually!
# To update targets, run: ./start-monitoring.sh HOST:PORT [HOST:PORT ...]

global:
  scrape_interval: 15s     # Scrape targets every 15 seconds
  evaluation_interval: 15s # Evaluate rules every 15 seconds

scrape_configs:
  - job_name: 'tt-telemetry'
    metrics_path: '/api/metrics'
    static_configs:
      - targets: [
EOF

    for i in "${!RESOLVED_TARGETS[@]}"; do
        if [ $i -eq 0 ]; then
            echo -n "          '${RESOLVED_TARGETS[$i]}'" >> prometheus.yml
        else
            echo "," >> prometheus.yml
            echo -n "          '${RESOLVED_TARGETS[$i]}'" >> prometheus.yml
        fi
    done

    cat >> prometheus.yml <<EOF

        ]
    relabel_configs:
      # Split instance into host and port labels for easier querying
      - source_labels: [__address__]
        regex: '([^:]+):(\d+)'
        target_label: host
        replacement: '$${1}'
      - source_labels: [__address__]
        regex: '([^:]+):(\d+)'
        target_label: port
        replacement: '$${2}'
EOF
}

echo "==================================================================="
echo "TT-Metal Telemetry Monitoring Stack"
echo "==================================================================="
echo ""
echo "TT-Metal Telemetry endpoints:"
for target in "${RESOLVED_TARGETS[@]}"; do
    echo "  - http://$target/api/metrics"
done

echo ""
echo "Generating Prometheus configuration..."
generate_prometheus_config

# Detect docker compose vs docker-compose
if docker compose version &>/dev/null; then
    DOCKER_COMPOSE="docker compose"
elif docker-compose version &>/dev/null; then
    DOCKER_COMPOSE="docker-compose"
else
    echo "Error: Neither 'docker compose' nor 'docker-compose' found"
    exit 1
fi

echo "Starting Docker containers..."
$DOCKER_COMPOSE down 2>/dev/null || true
$DOCKER_COMPOSE up -d

echo ""
echo "==================================================================="
echo "Monitoring stack is running!"
echo "==================================================================="
echo ""
echo "Access points:"
echo "  Prometheus: http://localhost:9090"
echo "  Grafana:    http://localhost:3000 (admin/admin)"
echo ""
echo "To stop the monitoring stack:"
echo "  $DOCKER_COMPOSE down"
echo ""
echo "To view logs:"
echo "  $DOCKER_COMPOSE logs -f"
echo "==================================================================="
