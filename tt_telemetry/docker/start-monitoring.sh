#!/bin/bash
# Start Prometheus + Grafana monitoring stack for TT-Metal telemetry
#
# Usage:
#   ./start-monitoring.sh [HOST:PORT] [HOST:PORT] ...
#
# Examples:
#   # Scrape localhost TT-Metal telemetry (default)
#   ./start-monitoring.sh
#
#   # Scrape remote TT-Metal telemetry
#   ./start-monitoring.sh sjc-wh-05:53494
#
#   # Scrape multiple hosts
#   ./start-monitoring.sh sjc-wh-05:53494 sjc-wh-06:53494

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Parse command-line arguments for target hosts
TARGETS=("$@")

# Show help if requested
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    grep "^#" "$0" | tail -n +2 | cut -c 3-
    exit 0
fi

# Default: scrape localhost telemetry if no targets specified
if [ ${#TARGETS[@]} -eq 0 ]; then
    TARGETS=("host.docker.internal:8080")
fi

# Deduplicate targets
UNIQUE_TARGETS=()
for target in "${TARGETS[@]}"; do
    # Check if target is already in UNIQUE_TARGETS
    found=0
    for unique in "${UNIQUE_TARGETS[@]}"; do
        if [[ "$unique" == "$target" ]]; then
            found=1
            break
        fi
    done
    # Add if not found
    if [[ $found -eq 0 ]]; then
        UNIQUE_TARGETS+=("$target")
    fi
done
TARGETS=("${UNIQUE_TARGETS[@]}")

# Generate prometheus.yml with targets
generate_prometheus_config() {
    cat > prometheus.yml <<EOF
# Prometheus configuration file for scraping TT-Metal telemetry metrics
#
# AUTO-GENERATED by start-monitoring.sh - Do not edit manually!
# To update targets, run: ./start-monitoring.sh HOST:PORT [HOST:PORT ...]

global:
  scrape_interval: 15s     # Scrape targets every 15 seconds
  evaluation_interval: 15s # Evaluate rules every 15 seconds

scrape_configs:
  - job_name: 'tt-telemetry'
    metrics_path: '/api/metrics'
    static_configs:
EOF

    # Create separate target block for each host with its own host label
    for i in "${!TARGETS[@]}"; do
        local target="${TARGETS[$i]}"
        local host="${target%:*}"
        cat >> prometheus.yml <<EOF
      - targets: ['${target}']
        labels:
          host: '${host}'
EOF
    done

}

echo "==================================================================="
echo "TT-Metal Telemetry Monitoring Stack"
echo "==================================================================="
echo ""
echo "TT-Metal Telemetry endpoints:"
for target in "${TARGETS[@]}"; do
    echo "  - http://$target/api/metrics"
done

echo ""
echo "Generating Prometheus configuration..."
generate_prometheus_config

# Detect docker compose vs docker-compose
if docker compose version &>/dev/null; then
    DOCKER_COMPOSE="docker compose"
elif docker-compose version &>/dev/null; then
    DOCKER_COMPOSE="docker-compose"
else
    echo "Error: Neither 'docker compose' nor 'docker-compose' found"
    exit 1
fi

echo "Starting Docker containers..."
$DOCKER_COMPOSE down 2>/dev/null || true
$DOCKER_COMPOSE up -d

echo ""
echo "==================================================================="
echo "Monitoring stack is running!"
echo "==================================================================="
echo ""
echo "Access points:"
echo "  Prometheus: http://localhost:9090"
echo "  Grafana:    http://localhost:3000 (admin/admin)"
echo ""
echo "To stop the monitoring stack:"
echo "  $DOCKER_COMPOSE down"
echo ""
echo "To view logs:"
echo "  $DOCKER_COMPOSE logs -f"
echo "==================================================================="
