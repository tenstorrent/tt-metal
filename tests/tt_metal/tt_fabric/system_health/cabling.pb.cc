// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cabling.proto

#include "cabling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cabling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_CablingDescriptor_Connection_cabling_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cabling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto;
namespace cabling {
class CablingDescriptor_Connection_EndpointDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CablingDescriptor_Connection_Endpoint> _instance;
} _CablingDescriptor_Connection_Endpoint_default_instance_;
class CablingDescriptor_ConnectionDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CablingDescriptor_Connection> _instance;
} _CablingDescriptor_Connection_default_instance_;
class CablingDescriptorDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CablingDescriptor> _instance;
} _CablingDescriptor_default_instance_;
}  // namespace cabling
static void InitDefaultsscc_info_CablingDescriptor_cabling_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::cabling::_CablingDescriptor_default_instance_;
        new (ptr)::cabling::CablingDescriptor();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cabling::CablingDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CablingDescriptor_cabling_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     1,
     0,
     InitDefaultsscc_info_CablingDescriptor_cabling_2eproto},
    {
        &scc_info_CablingDescriptor_Connection_cabling_2eproto.base,
    }};

static void InitDefaultsscc_info_CablingDescriptor_Connection_cabling_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::cabling::_CablingDescriptor_Connection_default_instance_;
        new (ptr)::cabling::CablingDescriptor_Connection();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cabling::CablingDescriptor_Connection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CablingDescriptor_Connection_cabling_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     1,
     0,
     InitDefaultsscc_info_CablingDescriptor_Connection_cabling_2eproto},
    {
        &scc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto.base,
    }};

static void InitDefaultsscc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::cabling::_CablingDescriptor_Connection_Endpoint_default_instance_;
        new (ptr)::cabling::CablingDescriptor_Connection_Endpoint();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cabling::CablingDescriptor_Connection_Endpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     0,
     0,
     InitDefaultsscc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto},
    {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cabling_2eproto[3];
static constexpr const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor** file_level_enum_descriptors_cabling_2eproto = nullptr;
static constexpr const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor** file_level_service_descriptors_cabling_2eproto =
    nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cabling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection_Endpoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection_Endpoint, host_),
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection_Endpoint, tray_),
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection_Endpoint, port_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection, ep_a_),
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor_Connection, ep_b_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor, num_hosts_),
    PROTOBUF_FIELD_OFFSET(::cabling::CablingDescriptor, connections_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::cabling::CablingDescriptor_Connection_Endpoint)},
    {8, -1, sizeof(::cabling::CablingDescriptor_Connection)},
    {15, -1, sizeof(::cabling::CablingDescriptor)},
};

static const ::PROTOBUF_NAMESPACE_ID::Message* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::cabling::_CablingDescriptor_Connection_Endpoint_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::cabling::_CablingDescriptor_Connection_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cabling::_CablingDescriptor_default_instance_),
};

const char descriptor_table_protodef_cabling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\rcabling.proto\022\007cabling\"\243\002\n\021CablingDesc"
    "riptor\022\021\n\tnum_hosts\030\001 \001(\005\022:\n\013connections"
    "\030\002 \003(\0132%.cabling.CablingDescriptor.Conne"
    "ction\032\276\001\n\nConnection\022<\n\004ep_a\030\001 \001(\0132..cab"
    "ling.CablingDescriptor.Connection.Endpoi"
    "nt\022<\n\004ep_b\030\002 \001(\0132..cabling.CablingDescri"
    "ptor.Connection.Endpoint\0324\n\010Endpoint\022\014\n\004"
    "host\030\001 \001(\005\022\014\n\004tray\030\002 \001(\005\022\014\n\004port\030\003 \001(\005b\006"
    "proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const descriptor_table_cabling_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const descriptor_table_cabling_2eproto_sccs[3] = {
    &scc_info_CablingDescriptor_cabling_2eproto.base,
    &scc_info_CablingDescriptor_Connection_cabling_2eproto.base,
    &scc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cabling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cabling_2eproto = {
    false,
    false,
    descriptor_table_protodef_cabling_2eproto,
    "cabling.proto",
    326,
    &descriptor_table_cabling_2eproto_once,
    descriptor_table_cabling_2eproto_sccs,
    descriptor_table_cabling_2eproto_deps,
    3,
    0,
    schemas,
    file_default_instances,
    TableStruct_cabling_2eproto::offsets,
    file_level_metadata_cabling_2eproto,
    3,
    file_level_enum_descriptors_cabling_2eproto,
    file_level_service_descriptors_cabling_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cabling_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cabling_2eproto)), true);
namespace cabling {

// ===================================================================

void CablingDescriptor_Connection_Endpoint::InitAsDefaultInstance() {}
class CablingDescriptor_Connection_Endpoint::_Internal {
public:
};

CablingDescriptor_Connection_Endpoint::CablingDescriptor_Connection_Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena) :
    ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:cabling.CablingDescriptor.Connection.Endpoint)
}
CablingDescriptor_Connection_Endpoint::CablingDescriptor_Connection_Endpoint(
    const CablingDescriptor_Connection_Endpoint& from) :
    ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(
        &host_,
        &from.host_,
        static_cast<size_t>(reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(&host_)) + sizeof(port_));
    // @@protoc_insertion_point(copy_constructor:cabling.CablingDescriptor.Connection.Endpoint)
}

void CablingDescriptor_Connection_Endpoint::SharedCtor() {
    ::memset(
        &host_,
        0,
        static_cast<size_t>(reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(&host_)) + sizeof(port_));
}

CablingDescriptor_Connection_Endpoint::~CablingDescriptor_Connection_Endpoint() {
    // @@protoc_insertion_point(destructor:cabling.CablingDescriptor.Connection.Endpoint)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CablingDescriptor_Connection_Endpoint::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void CablingDescriptor_Connection_Endpoint::ArenaDtor(void* object) {
    CablingDescriptor_Connection_Endpoint* _this = reinterpret_cast<CablingDescriptor_Connection_Endpoint*>(object);
    (void)_this;
}
void CablingDescriptor_Connection_Endpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void CablingDescriptor_Connection_Endpoint::SetCachedSize(int size) const { _cached_size_.Set(size); }
const CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection_Endpoint::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CablingDescriptor_Connection_Endpoint_cabling_2eproto.base);
    return *internal_default_instance();
}

void CablingDescriptor_Connection_Endpoint::Clear() {
    // @@protoc_insertion_point(message_clear_start:cabling.CablingDescriptor.Connection.Endpoint)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(
        &host_,
        0,
        static_cast<size_t>(reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(&host_)) + sizeof(port_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CablingDescriptor_Connection_Endpoint::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 host = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    host_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // int32 tray = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    tray_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // int32 port = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr,
                    ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CablingDescriptor_Connection_Endpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:cabling.CablingDescriptor.Connection.Endpoint)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 host = 1;
    if (this->host() != 0) {
        target = stream->EnsureSpace(target);
        target =
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_host(), target);
    }

    // int32 tray = 2;
    if (this->tray() != 0) {
        target = stream->EnsureSpace(target);
        target =
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tray(), target);
    }

    // int32 port = 3;
    if (this->port() != 0) {
        target = stream->EnsureSpace(target);
        target =
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:cabling.CablingDescriptor.Connection.Endpoint)
    return target;
}

size_t CablingDescriptor_Connection_Endpoint::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:cabling.CablingDescriptor.Connection.Endpoint)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // int32 host = 1;
    if (this->host() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_host());
    }

    // int32 tray = 2;
    if (this->tray() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_tray());
    }

    // int32 port = 3;
    if (this->port() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_port());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void CablingDescriptor_Connection_Endpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:cabling.CablingDescriptor.Connection.Endpoint)
    GOOGLE_DCHECK_NE(&from, this);
    const CablingDescriptor_Connection_Endpoint* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CablingDescriptor_Connection_Endpoint>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cabling.CablingDescriptor.Connection.Endpoint)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:cabling.CablingDescriptor.Connection.Endpoint)
        MergeFrom(*source);
    }
}

void CablingDescriptor_Connection_Endpoint::MergeFrom(const CablingDescriptor_Connection_Endpoint& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:cabling.CablingDescriptor.Connection.Endpoint)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.host() != 0) {
        _internal_set_host(from._internal_host());
    }
    if (from.tray() != 0) {
        _internal_set_tray(from._internal_tray());
    }
    if (from.port() != 0) {
        _internal_set_port(from._internal_port());
    }
}

void CablingDescriptor_Connection_Endpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:cabling.CablingDescriptor.Connection.Endpoint)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void CablingDescriptor_Connection_Endpoint::CopyFrom(const CablingDescriptor_Connection_Endpoint& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:cabling.CablingDescriptor.Connection.Endpoint)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool CablingDescriptor_Connection_Endpoint::IsInitialized() const { return true; }

void CablingDescriptor_Connection_Endpoint::InternalSwap(CablingDescriptor_Connection_Endpoint* other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(CablingDescriptor_Connection_Endpoint, port_) +
        sizeof(CablingDescriptor_Connection_Endpoint::port_) -
        PROTOBUF_FIELD_OFFSET(CablingDescriptor_Connection_Endpoint, host_)>(
        reinterpret_cast<char*>(&host_), reinterpret_cast<char*>(&other->host_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CablingDescriptor_Connection_Endpoint::GetMetadata() const {
    return GetMetadataStatic();
}

// ===================================================================

void CablingDescriptor_Connection::InitAsDefaultInstance() {
    ::cabling::_CablingDescriptor_Connection_default_instance_._instance.get_mutable()->ep_a_ =
        const_cast<::cabling::CablingDescriptor_Connection_Endpoint*>(
            ::cabling::CablingDescriptor_Connection_Endpoint::internal_default_instance());
    ::cabling::_CablingDescriptor_Connection_default_instance_._instance.get_mutable()->ep_b_ =
        const_cast<::cabling::CablingDescriptor_Connection_Endpoint*>(
            ::cabling::CablingDescriptor_Connection_Endpoint::internal_default_instance());
}
class CablingDescriptor_Connection::_Internal {
public:
    static const ::cabling::CablingDescriptor_Connection_Endpoint& ep_a(const CablingDescriptor_Connection* msg);
    static const ::cabling::CablingDescriptor_Connection_Endpoint& ep_b(const CablingDescriptor_Connection* msg);
};

const ::cabling::CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection::_Internal::ep_a(
    const CablingDescriptor_Connection* msg) {
    return *msg->ep_a_;
}
const ::cabling::CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection::_Internal::ep_b(
    const CablingDescriptor_Connection* msg) {
    return *msg->ep_b_;
}
CablingDescriptor_Connection::CablingDescriptor_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena) :
    ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:cabling.CablingDescriptor.Connection)
}
CablingDescriptor_Connection::CablingDescriptor_Connection(const CablingDescriptor_Connection& from) :
    ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_ep_a()) {
        ep_a_ = new ::cabling::CablingDescriptor_Connection_Endpoint(*from.ep_a_);
    } else {
        ep_a_ = nullptr;
    }
    if (from._internal_has_ep_b()) {
        ep_b_ = new ::cabling::CablingDescriptor_Connection_Endpoint(*from.ep_b_);
    } else {
        ep_b_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:cabling.CablingDescriptor.Connection)
}

void CablingDescriptor_Connection::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CablingDescriptor_Connection_cabling_2eproto.base);
    ::memset(
        &ep_a_,
        0,
        static_cast<size_t>(reinterpret_cast<char*>(&ep_b_) - reinterpret_cast<char*>(&ep_a_)) + sizeof(ep_b_));
}

CablingDescriptor_Connection::~CablingDescriptor_Connection() {
    // @@protoc_insertion_point(destructor:cabling.CablingDescriptor.Connection)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CablingDescriptor_Connection::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    if (this != internal_default_instance()) {
        delete ep_a_;
    }
    if (this != internal_default_instance()) {
        delete ep_b_;
    }
}

void CablingDescriptor_Connection::ArenaDtor(void* object) {
    CablingDescriptor_Connection* _this = reinterpret_cast<CablingDescriptor_Connection*>(object);
    (void)_this;
}
void CablingDescriptor_Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void CablingDescriptor_Connection::SetCachedSize(int size) const { _cached_size_.Set(size); }
const CablingDescriptor_Connection& CablingDescriptor_Connection::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CablingDescriptor_Connection_cabling_2eproto.base);
    return *internal_default_instance();
}

void CablingDescriptor_Connection::Clear() {
    // @@protoc_insertion_point(message_clear_start:cabling.CablingDescriptor.Connection)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (GetArena() == nullptr && ep_a_ != nullptr) {
        delete ep_a_;
    }
    ep_a_ = nullptr;
    if (GetArena() == nullptr && ep_b_ != nullptr) {
        delete ep_b_;
    }
    ep_b_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CablingDescriptor_Connection::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // .cabling.CablingDescriptor.Connection.Endpoint ep_a = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_ep_a(), ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // .cabling.CablingDescriptor.Connection.Endpoint ep_b = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    ptr = ctx->ParseMessage(_internal_mutable_ep_b(), ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr,
                    ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CablingDescriptor_Connection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:cabling.CablingDescriptor.Connection)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .cabling.CablingDescriptor.Connection.Endpoint ep_a = 1;
    if (this->has_ep_a()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::ep_a(this), target, stream);
    }

    // .cabling.CablingDescriptor.Connection.Endpoint ep_b = 2;
    if (this->has_ep_b()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::ep_b(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:cabling.CablingDescriptor.Connection)
    return target;
}

size_t CablingDescriptor_Connection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:cabling.CablingDescriptor.Connection)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // .cabling.CablingDescriptor.Connection.Endpoint ep_a = 1;
    if (this->has_ep_a()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*ep_a_);
    }

    // .cabling.CablingDescriptor.Connection.Endpoint ep_b = 2;
    if (this->has_ep_b()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*ep_b_);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void CablingDescriptor_Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:cabling.CablingDescriptor.Connection)
    GOOGLE_DCHECK_NE(&from, this);
    const CablingDescriptor_Connection* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CablingDescriptor_Connection>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cabling.CablingDescriptor.Connection)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:cabling.CablingDescriptor.Connection)
        MergeFrom(*source);
    }
}

void CablingDescriptor_Connection::MergeFrom(const CablingDescriptor_Connection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:cabling.CablingDescriptor.Connection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.has_ep_a()) {
        _internal_mutable_ep_a()->::cabling::CablingDescriptor_Connection_Endpoint::MergeFrom(from._internal_ep_a());
    }
    if (from.has_ep_b()) {
        _internal_mutable_ep_b()->::cabling::CablingDescriptor_Connection_Endpoint::MergeFrom(from._internal_ep_b());
    }
}

void CablingDescriptor_Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:cabling.CablingDescriptor.Connection)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void CablingDescriptor_Connection::CopyFrom(const CablingDescriptor_Connection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:cabling.CablingDescriptor.Connection)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool CablingDescriptor_Connection::IsInitialized() const { return true; }

void CablingDescriptor_Connection::InternalSwap(CablingDescriptor_Connection* other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(CablingDescriptor_Connection, ep_b_) + sizeof(CablingDescriptor_Connection::ep_b_) -
        PROTOBUF_FIELD_OFFSET(CablingDescriptor_Connection, ep_a_)>(
        reinterpret_cast<char*>(&ep_a_), reinterpret_cast<char*>(&other->ep_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CablingDescriptor_Connection::GetMetadata() const { return GetMetadataStatic(); }

// ===================================================================

void CablingDescriptor::InitAsDefaultInstance() {}
class CablingDescriptor::_Internal {
public:
};

CablingDescriptor::CablingDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena) :
    ::PROTOBUF_NAMESPACE_ID::Message(arena), connections_(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:cabling.CablingDescriptor)
}
CablingDescriptor::CablingDescriptor(const CablingDescriptor& from) :
    ::PROTOBUF_NAMESPACE_ID::Message(), connections_(from.connections_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    num_hosts_ = from.num_hosts_;
    // @@protoc_insertion_point(copy_constructor:cabling.CablingDescriptor)
}

void CablingDescriptor::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CablingDescriptor_cabling_2eproto.base);
    num_hosts_ = 0;
}

CablingDescriptor::~CablingDescriptor() {
    // @@protoc_insertion_point(destructor:cabling.CablingDescriptor)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CablingDescriptor::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void CablingDescriptor::ArenaDtor(void* object) {
    CablingDescriptor* _this = reinterpret_cast<CablingDescriptor*>(object);
    (void)_this;
}
void CablingDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void CablingDescriptor::SetCachedSize(int size) const { _cached_size_.Set(size); }
const CablingDescriptor& CablingDescriptor::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CablingDescriptor_cabling_2eproto.base);
    return *internal_default_instance();
}

void CablingDescriptor::Clear() {
    // @@protoc_insertion_point(message_clear_start:cabling.CablingDescriptor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    connections_.Clear();
    num_hosts_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CablingDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 num_hosts = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    num_hosts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // repeated .cabling.CablingDescriptor.Connection connections = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) {
                            break;
                        }
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                } else {
                    goto handle_unusual;
                }
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr,
                    ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CablingDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:cabling.CablingDescriptor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 num_hosts = 1;
    if (this->num_hosts() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_num_hosts(), target);
    }

    // repeated .cabling.CablingDescriptor.Connection connections = 2;
    for (unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, this->_internal_connections(i), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:cabling.CablingDescriptor)
    return target;
}

size_t CablingDescriptor::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:cabling.CablingDescriptor)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .cabling.CablingDescriptor.Connection connections = 2;
    total_size += 1UL * this->_internal_connections_size();
    for (const auto& msg : this->connections_) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // int32 num_hosts = 1;
    if (this->num_hosts() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_num_hosts());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void CablingDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:cabling.CablingDescriptor)
    GOOGLE_DCHECK_NE(&from, this);
    const CablingDescriptor* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CablingDescriptor>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cabling.CablingDescriptor)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:cabling.CablingDescriptor)
        MergeFrom(*source);
    }
}

void CablingDescriptor::MergeFrom(const CablingDescriptor& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:cabling.CablingDescriptor)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    connections_.MergeFrom(from.connections_);
    if (from.num_hosts() != 0) {
        _internal_set_num_hosts(from._internal_num_hosts());
    }
}

void CablingDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:cabling.CablingDescriptor)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void CablingDescriptor::CopyFrom(const CablingDescriptor& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:cabling.CablingDescriptor)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool CablingDescriptor::IsInitialized() const { return true; }

void CablingDescriptor::InternalSwap(CablingDescriptor* other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    connections_.InternalSwap(&other->connections_);
    swap(num_hosts_, other->num_hosts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CablingDescriptor::GetMetadata() const { return GetMetadataStatic(); }

// @@protoc_insertion_point(namespace_scope)
}  // namespace cabling
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::cabling::CablingDescriptor_Connection_Endpoint*
Arena::CreateMaybeMessage<::cabling::CablingDescriptor_Connection_Endpoint>(Arena* arena) {
    return Arena::CreateMessageInternal<::cabling::CablingDescriptor_Connection_Endpoint>(arena);
}
template <>
PROTOBUF_NOINLINE ::cabling::CablingDescriptor_Connection*
Arena::CreateMaybeMessage<::cabling::CablingDescriptor_Connection>(Arena* arena) {
    return Arena::CreateMessageInternal<::cabling::CablingDescriptor_Connection>(arena);
}
template <>
PROTOBUF_NOINLINE ::cabling::CablingDescriptor* Arena::CreateMaybeMessage<::cabling::CablingDescriptor>(Arena* arena) {
    return Arena::CreateMessageInternal<::cabling::CablingDescriptor>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
