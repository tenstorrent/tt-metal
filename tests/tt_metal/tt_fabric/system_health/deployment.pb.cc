// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deployment.proto

#include "deployment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_deployment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Host_deployment_2eproto;
namespace deployment {
class HostDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Host> _instance;
} _Host_default_instance_;
class DeploymentDescriptorDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeploymentDescriptor> _instance;
} _DeploymentDescriptor_default_instance_;
}  // namespace deployment
static void InitDefaultsscc_info_DeploymentDescriptor_deployment_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::deployment::_DeploymentDescriptor_default_instance_;
        new (ptr)::deployment::DeploymentDescriptor();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::deployment::DeploymentDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeploymentDescriptor_deployment_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     1,
     0,
     InitDefaultsscc_info_DeploymentDescriptor_deployment_2eproto},
    {
        &scc_info_Host_deployment_2eproto.base,
    }};

static void InitDefaultsscc_info_Host_deployment_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::deployment::_Host_default_instance_;
        new (ptr)::deployment::Host();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::deployment::Host::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Host_deployment_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     0,
     0,
     InitDefaultsscc_info_Host_deployment_2eproto},
    {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_deployment_2eproto[2];
static constexpr const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor** file_level_enum_descriptors_deployment_2eproto =
    nullptr;
static constexpr const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor** file_level_service_descriptors_deployment_2eproto =
    nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_deployment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::deployment::Host, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::deployment::Host, hall_),
    PROTOBUF_FIELD_OFFSET(::deployment::Host, aisle_),
    PROTOBUF_FIELD_OFFSET(::deployment::Host, rack_),
    PROTOBUF_FIELD_OFFSET(::deployment::Host, shelf_u_),
    PROTOBUF_FIELD_OFFSET(::deployment::Host, pod_type_),
    PROTOBUF_FIELD_OFFSET(::deployment::Host, host_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::deployment::DeploymentDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::deployment::DeploymentDescriptor, rack_capacity_),
    PROTOBUF_FIELD_OFFSET(::deployment::DeploymentDescriptor, hosts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::deployment::Host)},
    {11, -1, sizeof(::deployment::DeploymentDescriptor)},
};

static const ::PROTOBUF_NAMESPACE_ID::Message* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployment::_Host_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::deployment::_DeploymentDescriptor_default_instance_),
};

const char descriptor_table_protodef_deployment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\020deployment.proto\022\ndeployment\"b\n\004Host\022\014"
    "\n\004hall\030\001 \001(\t\022\r\n\005aisle\030\002 \001(\t\022\014\n\004rack\030\003 \001("
    "\005\022\017\n\007shelf_u\030\004 \001(\005\022\020\n\010pod_type\030\006 \001(\t\022\014\n\004"
    "host\030\005 \001(\t\"N\n\024DeploymentDescriptor\022\025\n\rra"
    "ck_capacity\030\001 \001(\005\022\037\n\005hosts\030\002 \003(\0132\020.deplo"
    "yment.Hostb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const descriptor_table_deployment_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const descriptor_table_deployment_2eproto_sccs[2] = {
    &scc_info_DeploymentDescriptor_deployment_2eproto.base,
    &scc_info_Host_deployment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_deployment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deployment_2eproto = {
    false,
    false,
    descriptor_table_protodef_deployment_2eproto,
    "deployment.proto",
    218,
    &descriptor_table_deployment_2eproto_once,
    descriptor_table_deployment_2eproto_sccs,
    descriptor_table_deployment_2eproto_deps,
    2,
    0,
    schemas,
    file_default_instances,
    TableStruct_deployment_2eproto::offsets,
    file_level_metadata_deployment_2eproto,
    2,
    file_level_enum_descriptors_deployment_2eproto,
    file_level_service_descriptors_deployment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_deployment_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_deployment_2eproto)), true);
namespace deployment {

// ===================================================================

void Host::InitAsDefaultInstance() {}
class Host::_Internal {
public:
};

Host::Host(::PROTOBUF_NAMESPACE_ID::Arena* arena) : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:deployment.Host)
}
Host::Host(const Host& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    hall_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_hall().empty()) {
        hall_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hall(), GetArena());
    }
    aisle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_aisle().empty()) {
        aisle_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aisle(), GetArena());
    }
    host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_host().empty()) {
        host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(), GetArena());
    }
    pod_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_pod_type().empty()) {
        pod_type_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pod_type(), GetArena());
    }
    ::memcpy(
        &rack_,
        &from.rack_,
        static_cast<size_t>(reinterpret_cast<char*>(&shelf_u_) - reinterpret_cast<char*>(&rack_)) + sizeof(shelf_u_));
    // @@protoc_insertion_point(copy_constructor:deployment.Host)
}

void Host::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Host_deployment_2eproto.base);
    hall_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    aisle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    pod_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(
        &rack_,
        0,
        static_cast<size_t>(reinterpret_cast<char*>(&shelf_u_) - reinterpret_cast<char*>(&rack_)) + sizeof(shelf_u_));
}

Host::~Host() {
    // @@protoc_insertion_point(destructor:deployment.Host)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Host::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    hall_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    aisle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    pod_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Host::ArenaDtor(void* object) {
    Host* _this = reinterpret_cast<Host*>(object);
    (void)_this;
}
void Host::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Host::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Host& Host::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Host_deployment_2eproto.base);
    return *internal_default_instance();
}

void Host::Clear() {
    // @@protoc_insertion_point(message_clear_start:deployment.Host)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    hall_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    aisle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    pod_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(
        &rack_,
        0,
        static_cast<size_t>(reinterpret_cast<char*>(&shelf_u_) - reinterpret_cast<char*>(&rack_)) + sizeof(shelf_u_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Host::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // string hall = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                    auto str = _internal_mutable_hall();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployment.Host.hall"));
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // string aisle = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_aisle();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployment.Host.aisle"));
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // int32 rack = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    rack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // int32 shelf_u = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
                    shelf_u_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // string host = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
                    auto str = _internal_mutable_host();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployment.Host.host"));
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // string pod_type = 6;
            case 6:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
                    auto str = _internal_mutable_pod_type();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "deployment.Host.pod_type"));
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr,
                    ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Host::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:deployment.Host)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string hall = 1;
    if (this->hall().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_hall().data(),
            static_cast<int>(this->_internal_hall().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "deployment.Host.hall");
        target = stream->WriteStringMaybeAliased(1, this->_internal_hall(), target);
    }

    // string aisle = 2;
    if (this->aisle().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_aisle().data(),
            static_cast<int>(this->_internal_aisle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "deployment.Host.aisle");
        target = stream->WriteStringMaybeAliased(2, this->_internal_aisle(), target);
    }

    // int32 rack = 3;
    if (this->rack() != 0) {
        target = stream->EnsureSpace(target);
        target =
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rack(), target);
    }

    // int32 shelf_u = 4;
    if (this->shelf_u() != 0) {
        target = stream->EnsureSpace(target);
        target =
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_shelf_u(), target);
    }

    // string host = 5;
    if (this->host().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_host().data(),
            static_cast<int>(this->_internal_host().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "deployment.Host.host");
        target = stream->WriteStringMaybeAliased(5, this->_internal_host(), target);
    }

    // string pod_type = 6;
    if (this->pod_type().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_pod_type().data(),
            static_cast<int>(this->_internal_pod_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "deployment.Host.pod_type");
        target = stream->WriteStringMaybeAliased(6, this->_internal_pod_type(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:deployment.Host)
    return target;
}

size_t Host::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:deployment.Host)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string hall = 1;
    if (this->hall().size() > 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_hall());
    }

    // string aisle = 2;
    if (this->aisle().size() > 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_aisle());
    }

    // string host = 5;
    if (this->host().size() > 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_host());
    }

    // string pod_type = 6;
    if (this->pod_type().size() > 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_pod_type());
    }

    // int32 rack = 3;
    if (this->rack() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_rack());
    }

    // int32 shelf_u = 4;
    if (this->shelf_u() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_shelf_u());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Host::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:deployment.Host)
    GOOGLE_DCHECK_NE(&from, this);
    const Host* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Host>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployment.Host)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:deployment.Host)
        MergeFrom(*source);
    }
}

void Host::MergeFrom(const Host& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:deployment.Host)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.hall().size() > 0) {
        _internal_set_hall(from._internal_hall());
    }
    if (from.aisle().size() > 0) {
        _internal_set_aisle(from._internal_aisle());
    }
    if (from.host().size() > 0) {
        _internal_set_host(from._internal_host());
    }
    if (from.pod_type().size() > 0) {
        _internal_set_pod_type(from._internal_pod_type());
    }
    if (from.rack() != 0) {
        _internal_set_rack(from._internal_rack());
    }
    if (from.shelf_u() != 0) {
        _internal_set_shelf_u(from._internal_shelf_u());
    }
}

void Host::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:deployment.Host)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:deployment.Host)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool Host::IsInitialized() const { return true; }

void Host::InternalSwap(Host* other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    hall_.Swap(&other->hall_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    aisle_.Swap(&other->aisle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    pod_type_.Swap(&other->pod_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Host, shelf_u_) + sizeof(Host::shelf_u_) - PROTOBUF_FIELD_OFFSET(Host, rack_)>(
        reinterpret_cast<char*>(&rack_), reinterpret_cast<char*>(&other->rack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Host::GetMetadata() const { return GetMetadataStatic(); }

// ===================================================================

void DeploymentDescriptor::InitAsDefaultInstance() {}
class DeploymentDescriptor::_Internal {
public:
};

DeploymentDescriptor::DeploymentDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena) :
    ::PROTOBUF_NAMESPACE_ID::Message(arena), hosts_(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:deployment.DeploymentDescriptor)
}
DeploymentDescriptor::DeploymentDescriptor(const DeploymentDescriptor& from) :
    ::PROTOBUF_NAMESPACE_ID::Message(), hosts_(from.hosts_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    rack_capacity_ = from.rack_capacity_;
    // @@protoc_insertion_point(copy_constructor:deployment.DeploymentDescriptor)
}

void DeploymentDescriptor::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeploymentDescriptor_deployment_2eproto.base);
    rack_capacity_ = 0;
}

DeploymentDescriptor::~DeploymentDescriptor() {
    // @@protoc_insertion_point(destructor:deployment.DeploymentDescriptor)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeploymentDescriptor::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void DeploymentDescriptor::ArenaDtor(void* object) {
    DeploymentDescriptor* _this = reinterpret_cast<DeploymentDescriptor*>(object);
    (void)_this;
}
void DeploymentDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void DeploymentDescriptor::SetCachedSize(int size) const { _cached_size_.Set(size); }
const DeploymentDescriptor& DeploymentDescriptor::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeploymentDescriptor_deployment_2eproto.base);
    return *internal_default_instance();
}

void DeploymentDescriptor::Clear() {
    // @@protoc_insertion_point(message_clear_start:deployment.DeploymentDescriptor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    hosts_.Clear();
    rack_capacity_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeploymentDescriptor::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 rack_capacity = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    rack_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else {
                    goto handle_unusual;
                }
                continue;
            // repeated .deployment.Host hosts = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_hosts(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) {
                            break;
                        }
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                } else {
                    goto handle_unusual;
                }
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr,
                    ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeploymentDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:deployment.DeploymentDescriptor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 rack_capacity = 1;
    if (this->rack_capacity() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_rack_capacity(), target);
    }

    // repeated .deployment.Host hosts = 2;
    for (unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_hosts_size()); i < n; i++) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, this->_internal_hosts(i), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:deployment.DeploymentDescriptor)
    return target;
}

size_t DeploymentDescriptor::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:deployment.DeploymentDescriptor)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .deployment.Host hosts = 2;
    total_size += 1UL * this->_internal_hosts_size();
    for (const auto& msg : this->hosts_) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // int32 rack_capacity = 1;
    if (this->rack_capacity() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_rack_capacity());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void DeploymentDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:deployment.DeploymentDescriptor)
    GOOGLE_DCHECK_NE(&from, this);
    const DeploymentDescriptor* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeploymentDescriptor>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:deployment.DeploymentDescriptor)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:deployment.DeploymentDescriptor)
        MergeFrom(*source);
    }
}

void DeploymentDescriptor::MergeFrom(const DeploymentDescriptor& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:deployment.DeploymentDescriptor)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    hosts_.MergeFrom(from.hosts_);
    if (from.rack_capacity() != 0) {
        _internal_set_rack_capacity(from._internal_rack_capacity());
    }
}

void DeploymentDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:deployment.DeploymentDescriptor)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

void DeploymentDescriptor::CopyFrom(const DeploymentDescriptor& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:deployment.DeploymentDescriptor)
    if (&from == this) {
        return;
    }
    Clear();
    MergeFrom(from);
}

bool DeploymentDescriptor::IsInitialized() const { return true; }

void DeploymentDescriptor::InternalSwap(DeploymentDescriptor* other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    hosts_.InternalSwap(&other->hosts_);
    swap(rack_capacity_, other->rack_capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeploymentDescriptor::GetMetadata() const { return GetMetadataStatic(); }

// @@protoc_insertion_point(namespace_scope)
}  // namespace deployment
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::deployment::Host* Arena::CreateMaybeMessage<::deployment::Host>(Arena* arena) {
    return Arena::CreateMessageInternal<::deployment::Host>(arena);
}
template <>
PROTOBUF_NOINLINE ::deployment::DeploymentDescriptor* Arena::CreateMaybeMessage<::deployment::DeploymentDescriptor>(
    Arena* arena) {
    return Arena::CreateMessageInternal<::deployment::DeploymentDescriptor>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
