// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cabling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cabling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cabling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cabling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cabling_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cabling_2eproto;
namespace cabling {
class CablingDescriptor;
class CablingDescriptorDefaultTypeInternal;
extern CablingDescriptorDefaultTypeInternal _CablingDescriptor_default_instance_;
class CablingDescriptor_Connection;
class CablingDescriptor_ConnectionDefaultTypeInternal;
extern CablingDescriptor_ConnectionDefaultTypeInternal _CablingDescriptor_Connection_default_instance_;
class CablingDescriptor_Connection_Endpoint;
class CablingDescriptor_Connection_EndpointDefaultTypeInternal;
extern CablingDescriptor_Connection_EndpointDefaultTypeInternal
    _CablingDescriptor_Connection_Endpoint_default_instance_;
}  // namespace cabling
PROTOBUF_NAMESPACE_OPEN
template <>
::cabling::CablingDescriptor* Arena::CreateMaybeMessage<::cabling::CablingDescriptor>(Arena*);
template <>
::cabling::CablingDescriptor_Connection* Arena::CreateMaybeMessage<::cabling::CablingDescriptor_Connection>(Arena*);
template <>
::cabling::CablingDescriptor_Connection_Endpoint*
Arena::CreateMaybeMessage<::cabling::CablingDescriptor_Connection_Endpoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cabling {

// ===================================================================

class CablingDescriptor_Connection_Endpoint PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:cabling.CablingDescriptor.Connection.Endpoint) */ {
public:
    inline CablingDescriptor_Connection_Endpoint() : CablingDescriptor_Connection_Endpoint(nullptr) {};
    virtual ~CablingDescriptor_Connection_Endpoint();

    CablingDescriptor_Connection_Endpoint(const CablingDescriptor_Connection_Endpoint& from);
    CablingDescriptor_Connection_Endpoint(CablingDescriptor_Connection_Endpoint&& from) noexcept :
        CablingDescriptor_Connection_Endpoint() {
        *this = ::std::move(from);
    }

    inline CablingDescriptor_Connection_Endpoint& operator=(const CablingDescriptor_Connection_Endpoint& from) {
        CopyFrom(from);
        return *this;
    }
    inline CablingDescriptor_Connection_Endpoint& operator=(CablingDescriptor_Connection_Endpoint&& from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) {
                InternalSwap(&from);
            }
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
    static const CablingDescriptor_Connection_Endpoint& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const CablingDescriptor_Connection_Endpoint* internal_default_instance() {
        return reinterpret_cast<const CablingDescriptor_Connection_Endpoint*>(
            &_CablingDescriptor_Connection_Endpoint_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(CablingDescriptor_Connection_Endpoint& a, CablingDescriptor_Connection_Endpoint& b) { a.Swap(&b); }
    inline void Swap(CablingDescriptor_Connection_Endpoint* other) {
        if (other == this) {
            return;
        }
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(CablingDescriptor_Connection_Endpoint* other) {
        if (other == this) {
            return;
        }
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline CablingDescriptor_Connection_Endpoint* New() const final {
        return CreateMaybeMessage<CablingDescriptor_Connection_Endpoint>(nullptr);
    }

    CablingDescriptor_Connection_Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<CablingDescriptor_Connection_Endpoint>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const CablingDescriptor_Connection_Endpoint& from);
    void MergeFrom(const CablingDescriptor_Connection_Endpoint& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(CablingDescriptor_Connection_Endpoint* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "cabling.CablingDescriptor.Connection.Endpoint";
    }

protected:
    explicit CablingDescriptor_Connection_Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cabling_2eproto);
        return ::descriptor_table_cabling_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHostFieldNumber = 1,
        kTrayFieldNumber = 2,
        kPortFieldNumber = 3,
    };
    // int32 host = 1;
    void clear_host();
    ::PROTOBUF_NAMESPACE_ID::int32 host() const;
    void set_host(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_host() const;
    void _internal_set_host(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 tray = 2;
    void clear_tray();
    ::PROTOBUF_NAMESPACE_ID::int32 tray() const;
    void set_tray(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_tray() const;
    void _internal_set_tray(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 port = 3;
    void clear_port();
    ::PROTOBUF_NAMESPACE_ID::int32 port() const;
    void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
    void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:cabling.CablingDescriptor.Connection.Endpoint)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 host_;
    ::PROTOBUF_NAMESPACE_ID::int32 tray_;
    ::PROTOBUF_NAMESPACE_ID::int32 port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_cabling_2eproto;
};
// -------------------------------------------------------------------

class CablingDescriptor_Connection PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:cabling.CablingDescriptor.Connection) */ {
public:
    inline CablingDescriptor_Connection() : CablingDescriptor_Connection(nullptr) {};
    virtual ~CablingDescriptor_Connection();

    CablingDescriptor_Connection(const CablingDescriptor_Connection& from);
    CablingDescriptor_Connection(CablingDescriptor_Connection&& from) noexcept : CablingDescriptor_Connection() {
        *this = ::std::move(from);
    }

    inline CablingDescriptor_Connection& operator=(const CablingDescriptor_Connection& from) {
        CopyFrom(from);
        return *this;
    }
    inline CablingDescriptor_Connection& operator=(CablingDescriptor_Connection&& from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) {
                InternalSwap(&from);
            }
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
    static const CablingDescriptor_Connection& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const CablingDescriptor_Connection* internal_default_instance() {
        return reinterpret_cast<const CablingDescriptor_Connection*>(&_CablingDescriptor_Connection_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(CablingDescriptor_Connection& a, CablingDescriptor_Connection& b) { a.Swap(&b); }
    inline void Swap(CablingDescriptor_Connection* other) {
        if (other == this) {
            return;
        }
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(CablingDescriptor_Connection* other) {
        if (other == this) {
            return;
        }
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline CablingDescriptor_Connection* New() const final {
        return CreateMaybeMessage<CablingDescriptor_Connection>(nullptr);
    }

    CablingDescriptor_Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<CablingDescriptor_Connection>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const CablingDescriptor_Connection& from);
    void MergeFrom(const CablingDescriptor_Connection& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(CablingDescriptor_Connection* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "cabling.CablingDescriptor.Connection"; }

protected:
    explicit CablingDescriptor_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cabling_2eproto);
        return ::descriptor_table_cabling_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    typedef CablingDescriptor_Connection_Endpoint Endpoint;

    // accessors -------------------------------------------------------

    enum : int {
        kEpAFieldNumber = 1,
        kEpBFieldNumber = 2,
    };
    // .cabling.CablingDescriptor.Connection.Endpoint ep_a = 1;
    bool has_ep_a() const;

private:
    bool _internal_has_ep_a() const;

public:
    void clear_ep_a();
    const ::cabling::CablingDescriptor_Connection_Endpoint& ep_a() const;
    ::cabling::CablingDescriptor_Connection_Endpoint* release_ep_a();
    ::cabling::CablingDescriptor_Connection_Endpoint* mutable_ep_a();
    void set_allocated_ep_a(::cabling::CablingDescriptor_Connection_Endpoint* ep_a);

private:
    const ::cabling::CablingDescriptor_Connection_Endpoint& _internal_ep_a() const;
    ::cabling::CablingDescriptor_Connection_Endpoint* _internal_mutable_ep_a();

public:
    void unsafe_arena_set_allocated_ep_a(::cabling::CablingDescriptor_Connection_Endpoint* ep_a);
    ::cabling::CablingDescriptor_Connection_Endpoint* unsafe_arena_release_ep_a();

    // .cabling.CablingDescriptor.Connection.Endpoint ep_b = 2;
    bool has_ep_b() const;

private:
    bool _internal_has_ep_b() const;

public:
    void clear_ep_b();
    const ::cabling::CablingDescriptor_Connection_Endpoint& ep_b() const;
    ::cabling::CablingDescriptor_Connection_Endpoint* release_ep_b();
    ::cabling::CablingDescriptor_Connection_Endpoint* mutable_ep_b();
    void set_allocated_ep_b(::cabling::CablingDescriptor_Connection_Endpoint* ep_b);

private:
    const ::cabling::CablingDescriptor_Connection_Endpoint& _internal_ep_b() const;
    ::cabling::CablingDescriptor_Connection_Endpoint* _internal_mutable_ep_b();

public:
    void unsafe_arena_set_allocated_ep_b(::cabling::CablingDescriptor_Connection_Endpoint* ep_b);
    ::cabling::CablingDescriptor_Connection_Endpoint* unsafe_arena_release_ep_b();

    // @@protoc_insertion_point(class_scope:cabling.CablingDescriptor.Connection)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::cabling::CablingDescriptor_Connection_Endpoint* ep_a_;
    ::cabling::CablingDescriptor_Connection_Endpoint* ep_b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_cabling_2eproto;
};
// -------------------------------------------------------------------

class CablingDescriptor PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:cabling.CablingDescriptor) */ {
public:
    inline CablingDescriptor() : CablingDescriptor(nullptr) {};
    virtual ~CablingDescriptor();

    CablingDescriptor(const CablingDescriptor& from);
    CablingDescriptor(CablingDescriptor&& from) noexcept : CablingDescriptor() { *this = ::std::move(from); }

    inline CablingDescriptor& operator=(const CablingDescriptor& from) {
        CopyFrom(from);
        return *this;
    }
    inline CablingDescriptor& operator=(CablingDescriptor&& from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) {
                InternalSwap(&from);
            }
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
    static const CablingDescriptor& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const CablingDescriptor* internal_default_instance() {
        return reinterpret_cast<const CablingDescriptor*>(&_CablingDescriptor_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(CablingDescriptor& a, CablingDescriptor& b) { a.Swap(&b); }
    inline void Swap(CablingDescriptor* other) {
        if (other == this) {
            return;
        }
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(CablingDescriptor* other) {
        if (other == this) {
            return;
        }
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline CablingDescriptor* New() const final { return CreateMaybeMessage<CablingDescriptor>(nullptr); }

    CablingDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<CablingDescriptor>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const CablingDescriptor& from);
    void MergeFrom(const CablingDescriptor& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(CablingDescriptor* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "cabling.CablingDescriptor"; }

protected:
    explicit CablingDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cabling_2eproto);
        return ::descriptor_table_cabling_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    typedef CablingDescriptor_Connection Connection;

    // accessors -------------------------------------------------------

    enum : int {
        kConnectionsFieldNumber = 2,
        kNumHostsFieldNumber = 1,
    };
    // repeated .cabling.CablingDescriptor.Connection connections = 2;
    int connections_size() const;

private:
    int _internal_connections_size() const;

public:
    void clear_connections();
    ::cabling::CablingDescriptor_Connection* mutable_connections(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cabling::CablingDescriptor_Connection>* mutable_connections();

private:
    const ::cabling::CablingDescriptor_Connection& _internal_connections(int index) const;
    ::cabling::CablingDescriptor_Connection* _internal_add_connections();

public:
    const ::cabling::CablingDescriptor_Connection& connections(int index) const;
    ::cabling::CablingDescriptor_Connection* add_connections();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cabling::CablingDescriptor_Connection>& connections() const;

    // int32 num_hosts = 1;
    void clear_num_hosts();
    ::PROTOBUF_NAMESPACE_ID::int32 num_hosts() const;
    void set_num_hosts(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_hosts() const;
    void _internal_set_num_hosts(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:cabling.CablingDescriptor)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cabling::CablingDescriptor_Connection> connections_;
    ::PROTOBUF_NAMESPACE_ID::int32 num_hosts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_cabling_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CablingDescriptor_Connection_Endpoint

// int32 host = 1;
inline void CablingDescriptor_Connection_Endpoint::clear_host() { host_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor_Connection_Endpoint::_internal_host() const { return host_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor_Connection_Endpoint::host() const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.Connection.Endpoint.host)
    return _internal_host();
}
inline void CablingDescriptor_Connection_Endpoint::_internal_set_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
    host_ = value;
}
inline void CablingDescriptor_Connection_Endpoint::set_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_host(value);
    // @@protoc_insertion_point(field_set:cabling.CablingDescriptor.Connection.Endpoint.host)
}

// int32 tray = 2;
inline void CablingDescriptor_Connection_Endpoint::clear_tray() { tray_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor_Connection_Endpoint::_internal_tray() const { return tray_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor_Connection_Endpoint::tray() const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.Connection.Endpoint.tray)
    return _internal_tray();
}
inline void CablingDescriptor_Connection_Endpoint::_internal_set_tray(::PROTOBUF_NAMESPACE_ID::int32 value) {
    tray_ = value;
}
inline void CablingDescriptor_Connection_Endpoint::set_tray(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_tray(value);
    // @@protoc_insertion_point(field_set:cabling.CablingDescriptor.Connection.Endpoint.tray)
}

// int32 port = 3;
inline void CablingDescriptor_Connection_Endpoint::clear_port() { port_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor_Connection_Endpoint::_internal_port() const { return port_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor_Connection_Endpoint::port() const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.Connection.Endpoint.port)
    return _internal_port();
}
inline void CablingDescriptor_Connection_Endpoint::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
    port_ = value;
}
inline void CablingDescriptor_Connection_Endpoint::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_port(value);
    // @@protoc_insertion_point(field_set:cabling.CablingDescriptor.Connection.Endpoint.port)
}

// -------------------------------------------------------------------

// CablingDescriptor_Connection

// .cabling.CablingDescriptor.Connection.Endpoint ep_a = 1;
inline bool CablingDescriptor_Connection::_internal_has_ep_a() const {
    return this != internal_default_instance() && ep_a_ != nullptr;
}
inline bool CablingDescriptor_Connection::has_ep_a() const { return _internal_has_ep_a(); }
inline void CablingDescriptor_Connection::clear_ep_a() {
    if (GetArena() == nullptr && ep_a_ != nullptr) {
        delete ep_a_;
    }
    ep_a_ = nullptr;
}
inline const ::cabling::CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection::_internal_ep_a() const {
    const ::cabling::CablingDescriptor_Connection_Endpoint* p = ep_a_;
    return p != nullptr ? *p
                        : *reinterpret_cast<const ::cabling::CablingDescriptor_Connection_Endpoint*>(
                              &::cabling::_CablingDescriptor_Connection_Endpoint_default_instance_);
}
inline const ::cabling::CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection::ep_a() const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.Connection.ep_a)
    return _internal_ep_a();
}
inline void CablingDescriptor_Connection::unsafe_arena_set_allocated_ep_a(
    ::cabling::CablingDescriptor_Connection_Endpoint* ep_a) {
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ep_a_);
    }
    ep_a_ = ep_a;
    if (ep_a) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cabling.CablingDescriptor.Connection.ep_a)
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::release_ep_a() {
    auto temp = unsafe_arena_release_ep_a();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::unsafe_arena_release_ep_a() {
    // @@protoc_insertion_point(field_release:cabling.CablingDescriptor.Connection.ep_a)

    ::cabling::CablingDescriptor_Connection_Endpoint* temp = ep_a_;
    ep_a_ = nullptr;
    return temp;
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::_internal_mutable_ep_a() {
    if (ep_a_ == nullptr) {
        auto* p = CreateMaybeMessage<::cabling::CablingDescriptor_Connection_Endpoint>(GetArena());
        ep_a_ = p;
    }
    return ep_a_;
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::mutable_ep_a() {
    // @@protoc_insertion_point(field_mutable:cabling.CablingDescriptor.Connection.ep_a)
    return _internal_mutable_ep_a();
}
inline void CablingDescriptor_Connection::set_allocated_ep_a(::cabling::CablingDescriptor_Connection_Endpoint* ep_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete ep_a_;
    }
    if (ep_a) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ep_a);
        if (message_arena != submessage_arena) {
            ep_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(message_arena, ep_a, submessage_arena);
        }

    } else {
    }
    ep_a_ = ep_a;
    // @@protoc_insertion_point(field_set_allocated:cabling.CablingDescriptor.Connection.ep_a)
}

// .cabling.CablingDescriptor.Connection.Endpoint ep_b = 2;
inline bool CablingDescriptor_Connection::_internal_has_ep_b() const {
    return this != internal_default_instance() && ep_b_ != nullptr;
}
inline bool CablingDescriptor_Connection::has_ep_b() const { return _internal_has_ep_b(); }
inline void CablingDescriptor_Connection::clear_ep_b() {
    if (GetArena() == nullptr && ep_b_ != nullptr) {
        delete ep_b_;
    }
    ep_b_ = nullptr;
}
inline const ::cabling::CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection::_internal_ep_b() const {
    const ::cabling::CablingDescriptor_Connection_Endpoint* p = ep_b_;
    return p != nullptr ? *p
                        : *reinterpret_cast<const ::cabling::CablingDescriptor_Connection_Endpoint*>(
                              &::cabling::_CablingDescriptor_Connection_Endpoint_default_instance_);
}
inline const ::cabling::CablingDescriptor_Connection_Endpoint& CablingDescriptor_Connection::ep_b() const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.Connection.ep_b)
    return _internal_ep_b();
}
inline void CablingDescriptor_Connection::unsafe_arena_set_allocated_ep_b(
    ::cabling::CablingDescriptor_Connection_Endpoint* ep_b) {
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ep_b_);
    }
    ep_b_ = ep_b;
    if (ep_b) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cabling.CablingDescriptor.Connection.ep_b)
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::release_ep_b() {
    auto temp = unsafe_arena_release_ep_b();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::unsafe_arena_release_ep_b() {
    // @@protoc_insertion_point(field_release:cabling.CablingDescriptor.Connection.ep_b)

    ::cabling::CablingDescriptor_Connection_Endpoint* temp = ep_b_;
    ep_b_ = nullptr;
    return temp;
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::_internal_mutable_ep_b() {
    if (ep_b_ == nullptr) {
        auto* p = CreateMaybeMessage<::cabling::CablingDescriptor_Connection_Endpoint>(GetArena());
        ep_b_ = p;
    }
    return ep_b_;
}
inline ::cabling::CablingDescriptor_Connection_Endpoint* CablingDescriptor_Connection::mutable_ep_b() {
    // @@protoc_insertion_point(field_mutable:cabling.CablingDescriptor.Connection.ep_b)
    return _internal_mutable_ep_b();
}
inline void CablingDescriptor_Connection::set_allocated_ep_b(::cabling::CablingDescriptor_Connection_Endpoint* ep_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete ep_b_;
    }
    if (ep_b) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ep_b);
        if (message_arena != submessage_arena) {
            ep_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(message_arena, ep_b, submessage_arena);
        }

    } else {
    }
    ep_b_ = ep_b;
    // @@protoc_insertion_point(field_set_allocated:cabling.CablingDescriptor.Connection.ep_b)
}

// -------------------------------------------------------------------

// CablingDescriptor

// int32 num_hosts = 1;
inline void CablingDescriptor::clear_num_hosts() { num_hosts_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor::_internal_num_hosts() const { return num_hosts_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 CablingDescriptor::num_hosts() const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.num_hosts)
    return _internal_num_hosts();
}
inline void CablingDescriptor::_internal_set_num_hosts(::PROTOBUF_NAMESPACE_ID::int32 value) { num_hosts_ = value; }
inline void CablingDescriptor::set_num_hosts(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_num_hosts(value);
    // @@protoc_insertion_point(field_set:cabling.CablingDescriptor.num_hosts)
}

// repeated .cabling.CablingDescriptor.Connection connections = 2;
inline int CablingDescriptor::_internal_connections_size() const { return connections_.size(); }
inline int CablingDescriptor::connections_size() const { return _internal_connections_size(); }
inline void CablingDescriptor::clear_connections() { connections_.Clear(); }
inline ::cabling::CablingDescriptor_Connection* CablingDescriptor::mutable_connections(int index) {
    // @@protoc_insertion_point(field_mutable:cabling.CablingDescriptor.connections)
    return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cabling::CablingDescriptor_Connection>*
CablingDescriptor::mutable_connections() {
    // @@protoc_insertion_point(field_mutable_list:cabling.CablingDescriptor.connections)
    return &connections_;
}
inline const ::cabling::CablingDescriptor_Connection& CablingDescriptor::_internal_connections(int index) const {
    return connections_.Get(index);
}
inline const ::cabling::CablingDescriptor_Connection& CablingDescriptor::connections(int index) const {
    // @@protoc_insertion_point(field_get:cabling.CablingDescriptor.connections)
    return _internal_connections(index);
}
inline ::cabling::CablingDescriptor_Connection* CablingDescriptor::_internal_add_connections() {
    return connections_.Add();
}
inline ::cabling::CablingDescriptor_Connection* CablingDescriptor::add_connections() {
    // @@protoc_insertion_point(field_add:cabling.CablingDescriptor.connections)
    return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cabling::CablingDescriptor_Connection>&
CablingDescriptor::connections() const {
    // @@protoc_insertion_point(field_list:cabling.CablingDescriptor.connections)
    return connections_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace cabling

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cabling_2eproto
