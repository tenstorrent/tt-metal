// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deployment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deployment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deployment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deployment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deployment_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deployment_2eproto;
namespace deployment {
class DeploymentDescriptor;
class DeploymentDescriptorDefaultTypeInternal;
extern DeploymentDescriptorDefaultTypeInternal _DeploymentDescriptor_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
}  // namespace deployment
PROTOBUF_NAMESPACE_OPEN
template <>
::deployment::DeploymentDescriptor* Arena::CreateMaybeMessage<::deployment::DeploymentDescriptor>(Arena*);
template <>
::deployment::Host* Arena::CreateMaybeMessage<::deployment::Host>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace deployment {

// ===================================================================

class Host PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deployment.Host) */ {
public:
    inline Host() : Host(nullptr) {};
    virtual ~Host();

    Host(const Host& from);
    Host(Host&& from) noexcept : Host() { *this = ::std::move(from); }

    inline Host& operator=(const Host& from) {
        CopyFrom(from);
        return *this;
    }
    inline Host& operator=(Host&& from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) {
                InternalSwap(&from);
            }
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
    static const Host& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Host* internal_default_instance() {
        return reinterpret_cast<const Host*>(&_Host_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(Host& a, Host& b) { a.Swap(&b); }
    inline void Swap(Host* other) {
        if (other == this) {
            return;
        }
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Host* other) {
        if (other == this) {
            return;
        }
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Host* New() const final { return CreateMaybeMessage<Host>(nullptr); }

    Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final { return CreateMaybeMessage<Host>(arena); }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Host& from);
    void MergeFrom(const Host& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Host* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "deployment.Host"; }

protected:
    explicit Host(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deployment_2eproto);
        return ::descriptor_table_deployment_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHallFieldNumber = 1,
        kAisleFieldNumber = 2,
        kHostFieldNumber = 5,
        kPodTypeFieldNumber = 6,
        kRackFieldNumber = 3,
        kShelfUFieldNumber = 4,
    };
    // string hall = 1;
    void clear_hall();
    const std::string& hall() const;
    void set_hall(const std::string& value);
    void set_hall(std::string&& value);
    void set_hall(const char* value);
    void set_hall(const char* value, size_t size);
    std::string* mutable_hall();
    std::string* release_hall();
    void set_allocated_hall(std::string* hall);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    std::string* unsafe_arena_release_hall();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    void unsafe_arena_set_allocated_hall(std::string* hall);

private:
    const std::string& _internal_hall() const;
    void _internal_set_hall(const std::string& value);
    std::string* _internal_mutable_hall();

public:
    // string aisle = 2;
    void clear_aisle();
    const std::string& aisle() const;
    void set_aisle(const std::string& value);
    void set_aisle(std::string&& value);
    void set_aisle(const char* value);
    void set_aisle(const char* value, size_t size);
    std::string* mutable_aisle();
    std::string* release_aisle();
    void set_allocated_aisle(std::string* aisle);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    std::string* unsafe_arena_release_aisle();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    void unsafe_arena_set_allocated_aisle(std::string* aisle);

private:
    const std::string& _internal_aisle() const;
    void _internal_set_aisle(const std::string& value);
    std::string* _internal_mutable_aisle();

public:
    // string host = 5;
    void clear_host();
    const std::string& host() const;
    void set_host(const std::string& value);
    void set_host(std::string&& value);
    void set_host(const char* value);
    void set_host(const char* value, size_t size);
    std::string* mutable_host();
    std::string* release_host();
    void set_allocated_host(std::string* host);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    std::string* unsafe_arena_release_host();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    void unsafe_arena_set_allocated_host(std::string* host);

private:
    const std::string& _internal_host() const;
    void _internal_set_host(const std::string& value);
    std::string* _internal_mutable_host();

public:
    // string pod_type = 6;
    void clear_pod_type();
    const std::string& pod_type() const;
    void set_pod_type(const std::string& value);
    void set_pod_type(std::string&& value);
    void set_pod_type(const char* value);
    void set_pod_type(const char* value, size_t size);
    std::string* mutable_pod_type();
    std::string* release_pod_type();
    void set_allocated_pod_type(std::string* pod_type);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    std::string* unsafe_arena_release_pod_type();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
        "The unsafe_arena_ accessors for"
        "    string fields are deprecated and will be removed in a"
        "    future release.")
    void unsafe_arena_set_allocated_pod_type(std::string* pod_type);

private:
    const std::string& _internal_pod_type() const;
    void _internal_set_pod_type(const std::string& value);
    std::string* _internal_mutable_pod_type();

public:
    // int32 rack = 3;
    void clear_rack();
    ::PROTOBUF_NAMESPACE_ID::int32 rack() const;
    void set_rack(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_rack() const;
    void _internal_set_rack(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 shelf_u = 4;
    void clear_shelf_u();
    ::PROTOBUF_NAMESPACE_ID::int32 shelf_u() const;
    void set_shelf_u(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_shelf_u() const;
    void _internal_set_shelf_u(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:deployment.Host)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hall_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aisle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_type_;
    ::PROTOBUF_NAMESPACE_ID::int32 rack_;
    ::PROTOBUF_NAMESPACE_ID::int32 shelf_u_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_deployment_2eproto;
};
// -------------------------------------------------------------------

class DeploymentDescriptor PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:deployment.DeploymentDescriptor) */ {
public:
    inline DeploymentDescriptor() : DeploymentDescriptor(nullptr) {};
    virtual ~DeploymentDescriptor();

    DeploymentDescriptor(const DeploymentDescriptor& from);
    DeploymentDescriptor(DeploymentDescriptor&& from) noexcept : DeploymentDescriptor() { *this = ::std::move(from); }

    inline DeploymentDescriptor& operator=(const DeploymentDescriptor& from) {
        CopyFrom(from);
        return *this;
    }
    inline DeploymentDescriptor& operator=(DeploymentDescriptor&& from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) {
                InternalSwap(&from);
            }
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
    static const DeploymentDescriptor& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const DeploymentDescriptor* internal_default_instance() {
        return reinterpret_cast<const DeploymentDescriptor*>(&_DeploymentDescriptor_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(DeploymentDescriptor& a, DeploymentDescriptor& b) { a.Swap(&b); }
    inline void Swap(DeploymentDescriptor* other) {
        if (other == this) {
            return;
        }
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DeploymentDescriptor* other) {
        if (other == this) {
            return;
        }
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline DeploymentDescriptor* New() const final { return CreateMaybeMessage<DeploymentDescriptor>(nullptr); }

    DeploymentDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<DeploymentDescriptor>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const DeploymentDescriptor& from);
    void MergeFrom(const DeploymentDescriptor& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(DeploymentDescriptor* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "deployment.DeploymentDescriptor"; }

protected:
    explicit DeploymentDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deployment_2eproto);
        return ::descriptor_table_deployment_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHostsFieldNumber = 2,
        kRackCapacityFieldNumber = 1,
    };
    // repeated .deployment.Host hosts = 2;
    int hosts_size() const;

private:
    int _internal_hosts_size() const;

public:
    void clear_hosts();
    ::deployment::Host* mutable_hosts(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::deployment::Host>* mutable_hosts();

private:
    const ::deployment::Host& _internal_hosts(int index) const;
    ::deployment::Host* _internal_add_hosts();

public:
    const ::deployment::Host& hosts(int index) const;
    ::deployment::Host* add_hosts();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::deployment::Host>& hosts() const;

    // int32 rack_capacity = 1;
    void clear_rack_capacity();
    ::PROTOBUF_NAMESPACE_ID::int32 rack_capacity() const;
    void set_rack_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_rack_capacity() const;
    void _internal_set_rack_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:deployment.DeploymentDescriptor)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::deployment::Host> hosts_;
    ::PROTOBUF_NAMESPACE_ID::int32 rack_capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_deployment_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Host

// string hall = 1;
inline void Host::clear_hall() {
    hall_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Host::hall() const {
    // @@protoc_insertion_point(field_get:deployment.Host.hall)
    return _internal_hall();
}
inline void Host::set_hall(const std::string& value) {
    _internal_set_hall(value);
    // @@protoc_insertion_point(field_set:deployment.Host.hall)
}
inline std::string* Host::mutable_hall() {
    // @@protoc_insertion_point(field_mutable:deployment.Host.hall)
    return _internal_mutable_hall();
}
inline const std::string& Host::_internal_hall() const { return hall_.Get(); }
inline void Host::_internal_set_hall(const std::string& value) {
    hall_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Host::set_hall(std::string&& value) {
    hall_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:deployment.Host.hall)
}
inline void Host::set_hall(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    hall_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value), GetArena());
    // @@protoc_insertion_point(field_set_char:deployment.Host.hall)
}
inline void Host::set_hall(const char* value, size_t size) {
    hall_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:deployment.Host.hall)
}
inline std::string* Host::_internal_mutable_hall() {
    return hall_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Host::release_hall() {
    // @@protoc_insertion_point(field_release:deployment.Host.hall)
    return hall_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::set_allocated_hall(std::string* hall) {
    if (hall != nullptr) {
    } else {
    }
    hall_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hall, GetArena());
    // @@protoc_insertion_point(field_set_allocated:deployment.Host.hall)
}
inline std::string* Host::unsafe_arena_release_hall() {
    // @@protoc_insertion_point(field_unsafe_arena_release:deployment.Host.hall)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return hall_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::unsafe_arena_set_allocated_hall(std::string* hall) {
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (hall != nullptr) {
    } else {
    }
    hall_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hall, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployment.Host.hall)
}

// string aisle = 2;
inline void Host::clear_aisle() {
    aisle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Host::aisle() const {
    // @@protoc_insertion_point(field_get:deployment.Host.aisle)
    return _internal_aisle();
}
inline void Host::set_aisle(const std::string& value) {
    _internal_set_aisle(value);
    // @@protoc_insertion_point(field_set:deployment.Host.aisle)
}
inline std::string* Host::mutable_aisle() {
    // @@protoc_insertion_point(field_mutable:deployment.Host.aisle)
    return _internal_mutable_aisle();
}
inline const std::string& Host::_internal_aisle() const { return aisle_.Get(); }
inline void Host::_internal_set_aisle(const std::string& value) {
    aisle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Host::set_aisle(std::string&& value) {
    aisle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:deployment.Host.aisle)
}
inline void Host::set_aisle(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    aisle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value), GetArena());
    // @@protoc_insertion_point(field_set_char:deployment.Host.aisle)
}
inline void Host::set_aisle(const char* value, size_t size) {
    aisle_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:deployment.Host.aisle)
}
inline std::string* Host::_internal_mutable_aisle() {
    return aisle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Host::release_aisle() {
    // @@protoc_insertion_point(field_release:deployment.Host.aisle)
    return aisle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::set_allocated_aisle(std::string* aisle) {
    if (aisle != nullptr) {
    } else {
    }
    aisle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aisle, GetArena());
    // @@protoc_insertion_point(field_set_allocated:deployment.Host.aisle)
}
inline std::string* Host::unsafe_arena_release_aisle() {
    // @@protoc_insertion_point(field_unsafe_arena_release:deployment.Host.aisle)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return aisle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::unsafe_arena_set_allocated_aisle(std::string* aisle) {
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (aisle != nullptr) {
    } else {
    }
    aisle_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aisle, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployment.Host.aisle)
}

// int32 rack = 3;
inline void Host::clear_rack() { rack_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Host::_internal_rack() const { return rack_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Host::rack() const {
    // @@protoc_insertion_point(field_get:deployment.Host.rack)
    return _internal_rack();
}
inline void Host::_internal_set_rack(::PROTOBUF_NAMESPACE_ID::int32 value) { rack_ = value; }
inline void Host::set_rack(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_rack(value);
    // @@protoc_insertion_point(field_set:deployment.Host.rack)
}

// int32 shelf_u = 4;
inline void Host::clear_shelf_u() { shelf_u_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Host::_internal_shelf_u() const { return shelf_u_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Host::shelf_u() const {
    // @@protoc_insertion_point(field_get:deployment.Host.shelf_u)
    return _internal_shelf_u();
}
inline void Host::_internal_set_shelf_u(::PROTOBUF_NAMESPACE_ID::int32 value) { shelf_u_ = value; }
inline void Host::set_shelf_u(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_shelf_u(value);
    // @@protoc_insertion_point(field_set:deployment.Host.shelf_u)
}

// string pod_type = 6;
inline void Host::clear_pod_type() {
    pod_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Host::pod_type() const {
    // @@protoc_insertion_point(field_get:deployment.Host.pod_type)
    return _internal_pod_type();
}
inline void Host::set_pod_type(const std::string& value) {
    _internal_set_pod_type(value);
    // @@protoc_insertion_point(field_set:deployment.Host.pod_type)
}
inline std::string* Host::mutable_pod_type() {
    // @@protoc_insertion_point(field_mutable:deployment.Host.pod_type)
    return _internal_mutable_pod_type();
}
inline const std::string& Host::_internal_pod_type() const { return pod_type_.Get(); }
inline void Host::_internal_set_pod_type(const std::string& value) {
    pod_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Host::set_pod_type(std::string&& value) {
    pod_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:deployment.Host.pod_type)
}
inline void Host::set_pod_type(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    pod_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value), GetArena());
    // @@protoc_insertion_point(field_set_char:deployment.Host.pod_type)
}
inline void Host::set_pod_type(const char* value, size_t size) {
    pod_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:deployment.Host.pod_type)
}
inline std::string* Host::_internal_mutable_pod_type() {
    return pod_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Host::release_pod_type() {
    // @@protoc_insertion_point(field_release:deployment.Host.pod_type)
    return pod_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::set_allocated_pod_type(std::string* pod_type) {
    if (pod_type != nullptr) {
    } else {
    }
    pod_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_type, GetArena());
    // @@protoc_insertion_point(field_set_allocated:deployment.Host.pod_type)
}
inline std::string* Host::unsafe_arena_release_pod_type() {
    // @@protoc_insertion_point(field_unsafe_arena_release:deployment.Host.pod_type)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return pod_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::unsafe_arena_set_allocated_pod_type(std::string* pod_type) {
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (pod_type != nullptr) {
    } else {
    }
    pod_type_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_type, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployment.Host.pod_type)
}

// string host = 5;
inline void Host::clear_host() {
    host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Host::host() const {
    // @@protoc_insertion_point(field_get:deployment.Host.host)
    return _internal_host();
}
inline void Host::set_host(const std::string& value) {
    _internal_set_host(value);
    // @@protoc_insertion_point(field_set:deployment.Host.host)
}
inline std::string* Host::mutable_host() {
    // @@protoc_insertion_point(field_mutable:deployment.Host.host)
    return _internal_mutable_host();
}
inline const std::string& Host::_internal_host() const { return host_.Get(); }
inline void Host::_internal_set_host(const std::string& value) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Host::set_host(std::string&& value) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:deployment.Host.host)
}
inline void Host::set_host(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value), GetArena());
    // @@protoc_insertion_point(field_set_char:deployment.Host.host)
}
inline void Host::set_host(const char* value, size_t size) {
    host_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:deployment.Host.host)
}
inline std::string* Host::_internal_mutable_host() {
    return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Host::release_host() {
    // @@protoc_insertion_point(field_release:deployment.Host.host)
    return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::set_allocated_host(std::string* host) {
    if (host != nullptr) {
    } else {
    }
    host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host, GetArena());
    // @@protoc_insertion_point(field_set_allocated:deployment.Host.host)
}
inline std::string* Host::unsafe_arena_release_host() {
    // @@protoc_insertion_point(field_unsafe_arena_release:deployment.Host.host)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::unsafe_arena_set_allocated_host(std::string* host) {
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (host != nullptr) {
    } else {
    }
    host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deployment.Host.host)
}

// -------------------------------------------------------------------

// DeploymentDescriptor

// int32 rack_capacity = 1;
inline void DeploymentDescriptor::clear_rack_capacity() { rack_capacity_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 DeploymentDescriptor::_internal_rack_capacity() const { return rack_capacity_; }
inline ::PROTOBUF_NAMESPACE_ID::int32 DeploymentDescriptor::rack_capacity() const {
    // @@protoc_insertion_point(field_get:deployment.DeploymentDescriptor.rack_capacity)
    return _internal_rack_capacity();
}
inline void DeploymentDescriptor::_internal_set_rack_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
    rack_capacity_ = value;
}
inline void DeploymentDescriptor::set_rack_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_rack_capacity(value);
    // @@protoc_insertion_point(field_set:deployment.DeploymentDescriptor.rack_capacity)
}

// repeated .deployment.Host hosts = 2;
inline int DeploymentDescriptor::_internal_hosts_size() const { return hosts_.size(); }
inline int DeploymentDescriptor::hosts_size() const { return _internal_hosts_size(); }
inline void DeploymentDescriptor::clear_hosts() { hosts_.Clear(); }
inline ::deployment::Host* DeploymentDescriptor::mutable_hosts(int index) {
    // @@protoc_insertion_point(field_mutable:deployment.DeploymentDescriptor.hosts)
    return hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::deployment::Host>* DeploymentDescriptor::mutable_hosts() {
    // @@protoc_insertion_point(field_mutable_list:deployment.DeploymentDescriptor.hosts)
    return &hosts_;
}
inline const ::deployment::Host& DeploymentDescriptor::_internal_hosts(int index) const { return hosts_.Get(index); }
inline const ::deployment::Host& DeploymentDescriptor::hosts(int index) const {
    // @@protoc_insertion_point(field_get:deployment.DeploymentDescriptor.hosts)
    return _internal_hosts(index);
}
inline ::deployment::Host* DeploymentDescriptor::_internal_add_hosts() { return hosts_.Add(); }
inline ::deployment::Host* DeploymentDescriptor::add_hosts() {
    // @@protoc_insertion_point(field_add:deployment.DeploymentDescriptor.hosts)
    return _internal_add_hosts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::deployment::Host>& DeploymentDescriptor::hosts() const {
    // @@protoc_insertion_point(field_list:deployment.DeploymentDescriptor.hosts)
    return hosts_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace deployment

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deployment_2eproto
