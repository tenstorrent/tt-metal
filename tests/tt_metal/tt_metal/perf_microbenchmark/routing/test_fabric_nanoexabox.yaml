# SPDX-FileCopyrightText: Â© 2025 Tenstorrent Inc.
#
# SPDX-License-Identifier: Apache-2.0

# ======================================================================================
# Optional Top-Level Configuration: Physical Mesh
# This section allows you to specify a custom mesh descriptor pased on a mesh graph
# descriptor YAML file and ethernet coord mapping. If not specified, the default mesh
# descriptor will be used. Both the ethernet mapping and yaml path are required
# ======================================================================================
physical_mesh:
   mesh_descriptor_path: "tests/tt_metal/tt_fabric/custom_mesh_descriptors/nano_exabox_mesh_graph_descriptor.yaml"
   eth_coord_mapping: [
      [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 2, 0, 0, 0],
        [0, 3, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 2, 1, 0, 0],
        [0, 3, 1, 0, 0],
      ],
      [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 2, 0, 0, 0],
        [0, 3, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 2, 1, 0, 0],
        [0, 3, 1, 0, 0],
      ],
      [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 2, 0, 0, 0],
        [0, 3, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 2, 1, 0, 0],
        [0, 3, 1, 0, 0],
      ],
      [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 2, 0, 0, 0],
        [0, 3, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 2, 1, 0, 0],
        [0, 3, 1, 0, 0],
      ],
      [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 2, 0, 0, 0],
        [0, 3, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 2, 1, 0, 0],
        [0, 3, 1, 0, 0],
      ]
    ]

Tests:
  # ======================================================================================
  # Test 1: A simple, fully specified unicast test for multi-host.
  # This demonstrates the most basic configuration using ChipIds.
  # Fabric must be 2D Dynamic.
  # ======================================================================================
  - name: MultiMeshRandomPairing
    fabric_setup:
      topology: Mesh
      routing_type: Dynamic
    parametrization_params:
      size: [512, 1024, 2048]
      num_packets: [50, 100]
      ntype: [unicast_write, atomic_inc]
    defaults:
      ftype: unicast
    patterns:
      - type: full_device_random_pairing
        iterations: 100

  - name: MultiMeshSingleHopUnicast
    fabric_setup:
      topology: Mesh
      routing_type: Dynamic
    defaults:
      ftype: unicast
      ntype: unicast_write
      size: 1024
      num_packets: 100
    senders:
      - device: [0, 0]
        patterns:
          - destination:
              device: [1, 1]
          - destination:
              device: [2, 2]
          - destination:
              device: [3, 3]
          - destination:
              device: [4, 4]
          - destination:
              device: [1, 0]
          - destination:
              device: [2, 1]
          - destination:
              device: [3, 2]
          - destination:
              device: [4, 3]

  # ======================================================================================
  # Test 2: Testing multi-hop across meshes. Each Mesh sends packets to every other mesh.
  # ======================================================================================
  - name: MultiMeshMultiHopUnicast
    fabric_setup:
      topology: Mesh
      routing_type: Dynamic
    parametrization_params:
      size: [256, 512, 1024, 2048]
      num_packets: [50, 100]
      ntype: [unicast_write, atomic_inc]
    defaults:
      ftype: unicast
    senders:
      - device: [1, 0]
        patterns:
          - destination:
              device: [0, 1]
          - destination:
              device: [2, 1]
          - destination:
              device: [3, 1]
          - destination:
              device: [4, 1]
      - device: [1, 1]
        patterns:
          - destination:
              device: [0, 2]
          - destination:
              device: [2, 2]
          - destination:
              device: [3, 2]
          - destination:
              device: [4, 2]
      - device: [2, 2]
        patterns:
          - destination:
              device: [0, 3]
          - destination:
              device: [1, 3]
          - destination:
              device: [3, 3]
          - destination:
              device: [4, 3]
      - device: [2, 3]
        patterns:
          - destination:
              device: [0, 4]
          - destination:
              device: [1, 4]
          - destination:
              device: [3, 4]
          - destination:
              device: [4, 4]
      - device: [3, 4]
        patterns:
          - destination:
              device: [0, 5]
          - destination:
              device: [1, 5]
          - destination:
              device: [2, 5]
          - destination:
              device: [4, 5]
      - device: [3, 5]
        patterns:
          - destination:
              device: [0, 6]
          - destination:
              device: [1, 6]
          - destination:
              device: [2, 6]
          - destination:
              device: [4, 6]
      - device: [4, 6]
        patterns:
          - destination:
              device: [0, 7]
          - destination:
              device: [1, 7]
          - destination:
              device: [2, 7]
          - destination:
              device: [3, 7]
      - device: [4, 7]
        patterns:
          - destination:
              device: [0, 0]
          - destination:
              device: [1, 0]
          - destination:
              device: [2, 0]
          - destination:
              device: [3, 0]
